{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tmh73\\\\Aviation Synergy\\\\MaXwell AI - General\\\\HIRA_25\\\\src\\\\stores\\\\projectStore.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext } from 'react';\nimport { create } from 'zustand';\nimport { supabase } from '../services/supabase';\nimport { projectService } from '../services/projectService';\nimport { updatecontrols, getControlsByProjectId } from '../services/controlService';\n\n// Custom error class for project operations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ProjectOperationError extends Error {\n  constructor(message, operation, details = null) {\n    super(message);\n    this.name = 'ProjectOperationError';\n    this.operation = operation;\n    this.details = details;\n  }\n}\nconst useProjectStore = create((set, get) => ({\n  // State\n  projects: [],\n  currentProject: null,\n  currentStep: 0,\n  isLoading: false,\n  error: null,\n  retryCount: 0,\n  maxRetries: 3,\n  // Form Data State\n  projectDetails: null,\n  hazardIdentificationData: null,\n  riskAssessmentData: null,\n  riskControlsData: null,\n  // Loading and Error Handlers\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  setError: error => set({\n    error\n  }),\n  clearError: () => set({\n    error: null\n  }),\n  // Reset state\n  resetState: () => set({\n    currentProject: null,\n    currentStep: 0,\n    projectDetails: null,\n    hazardIdentificationData: null,\n    riskAssessmentData: null,\n    riskControlsData: null,\n    error: null,\n    retryCount: 0\n  }),\n  // Project Selection\n  setCurrentProject: async project => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      if (!project) {\n        store.resetState();\n        return;\n      }\n\n      // Set current project and project details\n      set({\n        currentProject: project,\n        projectDetails: {\n          project_id: project.project_id,\n          // Changed from projectId to project_id\n          title: project.title,\n          date: project.date,\n          facilitator: project.facilitator,\n          attendees: project.attendees || [],\n          operational_desc: project.operational_desc || '',\n          operational_files: Array.isArray(project.operational_files) ? project.operational_files : []\n        }\n      });\n\n      // Load all available step data\n      const stepData = await Promise.all([store.loadStepData(2),\n      // Hazard Identification\n      store.loadStepData(3),\n      // Risk Assessment\n      store.loadStepData(4) // Risk Controls\n      ]);\n\n      // Determine the furthest completed step\n      let lastCompletedStep = 1; // Project details is step 1\n      stepData.forEach((exists, index) => {\n        if (exists) lastCompletedStep = index + 2;\n      });\n\n      // Set the current step to the next incomplete step\n      set({\n        currentStep: Math.min(lastCompletedStep + 1, 4)\n      });\n    } catch (error) {\n      console.error('Error setting current project:', error);\n      store.setError(`Failed to load project data: ${error.message}`);\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  // Navigation\n  setCurrentStep: step => {\n    const store = get();\n\n    // Always allow navigation to step 0 (dashboard) or 1 (project details)\n    if (step <= 1) {\n      set({\n        currentStep: step,\n        error: null\n      });\n      return true;\n    }\n\n    // For other steps, check prerequisites\n    const previousStepData = store.getStepData(step - 1);\n    if (!previousStepData) {\n      store.setError('Please complete the previous step first');\n      return false;\n    }\n    set({\n      currentStep: step,\n      error: null\n    });\n    return true;\n  },\n  // Project Operations with Retry Logic\n  loadProjects: async () => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').select('*').order('created_at', {\n        ascending: false\n      });\n      if (error) throw new ProjectOperationError('Failed to load projects', 'LOAD', error);\n      set({\n        projects: data\n      });\n    } catch (error) {\n      console.error('Load projects error:', error);\n      if (store.retryCount < store.maxRetries) {\n        set(state => ({\n          retryCount: state.retryCount + 1\n        }));\n        await store.loadProjects();\n      } else {\n        set({\n          error: `Failed to load projects after ${store.maxRetries} attempts: ${error.message}`,\n          retryCount: 0\n        });\n      }\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  createProject: async projectData => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').insert([projectData]).select().single();\n      if (error) throw new ProjectOperationError('Failed to create project', 'CREATE', error);\n      set(state => ({\n        projects: [data, ...state.projects],\n        currentProject: data,\n        projectDetails: data,\n        currentStep: 2 // Automatically advance to Hazard Identification\n      }));\n      return data;\n    } catch (error) {\n      console.error('Create project error:', error);\n      set({\n        error: `Failed to create project: ${error.message}`\n      });\n      throw error;\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  updateProject: async (id, projectData) => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').update(projectData).eq('id', id).select().single();\n      if (error) throw new ProjectOperationError('Failed to update project', 'UPDATE', error);\n      set(state => ({\n        projects: state.projects.map(p => p.id === id ? data : p),\n        currentProject: data,\n        projectDetails: data\n      }));\n      return data;\n    } catch (error) {\n      console.error('Update project error:', error);\n      set({\n        error: `Failed to update project: ${error.message}`\n      });\n      throw error;\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  deleteProject: async id => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      // Delete all related data using projectService\n      await projectService.deleteProjectData(id);\n\n      // Then delete the project\n      const {\n        error\n      } = await supabase.from('hira_projects').delete().eq('id', id);\n      if (error) throw new ProjectOperationError('Failed to delete project', 'DELETE', error);\n      set(state => {\n        var _state$currentProject;\n        return {\n          projects: state.projects.filter(p => p.id !== id),\n          ...(((_state$currentProject = state.currentProject) === null || _state$currentProject === void 0 ? void 0 : _state$currentProject.id) === id ? {\n            currentProject: null,\n            projectDetails: null,\n            currentStep: 0\n          } : {})\n        };\n      });\n    } catch (error) {\n      console.error('Delete project error:', error);\n      set({\n        error: `Failed to delete project: ${error.message}`\n      });\n      throw error;\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  // Form Data Management\n  setStepData: async (step, data) => {\n    var _store$currentProject, _store$currentProject2;\n    const store = get();\n    try {\n      // Update local state\n      switch (step) {\n        case 1:\n          set({\n            projectDetails: data\n          });\n          break;\n        case 2:\n          set({\n            hazardIdentificationData: data\n          });\n          // Save to relational tables using project_id\n          if ((_store$currentProject = store.currentProject) !== null && _store$currentProject !== void 0 && _store$currentProject.project_id) {\n            console.log('Saving events with project_id:', store.currentProject.project_id);\n            for (const event of data.events) {\n              await projectService.saveEvent(store.currentProject.project_id, event);\n            }\n          } else {\n            throw new Error('Project ID not found');\n          }\n          break;\n        case 3:\n          set({\n            riskAssessmentData: data\n          });\n          break;\n        case 4:\n          set({\n            riskControlsData: data\n          });\n          // Save risk controls using project_id\n          if ((_store$currentProject2 = store.currentProject) !== null && _store$currentProject2 !== void 0 && _store$currentProject2.project_id) {\n            console.log('Saving risk controls for project:', store.currentProject.project_id);\n            await updateRiskControls(store.currentProject.project_id, data);\n          } else {\n            throw new Error('Project ID not found');\n          }\n          break;\n        default:\n          throw new Error(`Invalid step: ${step}`);\n      }\n      return true;\n    } catch (error) {\n      console.error(`Error in setStepData(${step}):`, error);\n      store.setError(`Failed to save step ${step} data: ${error.message}`);\n      return false;\n    }\n  },\n  // Load step data from database\n  loadStepData: async step => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      if (!store.currentProject) throw new Error('No current project');\n      switch (step) {\n        case 2:\n          // Hazard Identification\n          const projectData = await projectService.loadProjectData(store.currentProject.project_id);\n          if (projectData) {\n            set({\n              hazardIdentificationData: {\n                events: projectData\n              }\n            });\n            return true;\n          }\n          return false;\n        case 3:\n          // Risk Assessment\n          // TODO: Implement risk assessment data loading\n          return false;\n        case 4:\n          // Risk Controls\n          const controlsData = await getRiskControlsByProjectId(store.currentProject.project_id);\n          if (controlsData) {\n            set({\n              riskControlsData: {\n                controls: controlsData\n              }\n            });\n            return true;\n          }\n          return false;\n        default:\n          return false;\n      }\n    } catch (error) {\n      console.error(`Load step ${step} error:`, error);\n      store.setError(`Failed to load step ${step}: ${error.message}`);\n      return false;\n    } finally {\n      store.setLoading(false);\n    }\n  }\n}));\nconst ProjectStoreContext = /*#__PURE__*/createContext();\nexport const ProjectStoreProvider = ({\n  children\n}) => {\n  _s();\n  const store = useProjectStore();\n  return /*#__PURE__*/_jsxDEV(ProjectStoreContext.Provider, {\n    value: store,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectStoreProvider, \"mAOz46q01EClzuejUd7fG0ykt6c=\", false, function () {\n  return [useProjectStore];\n});\n_c = ProjectStoreProvider;\nexport const useProjectStoreContext = () => {\n  _s2();\n  return useContext(ProjectStoreContext);\n};\n_s2(useProjectStoreContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default useProjectStore;\nvar _c;\n$RefreshReg$(_c, \"ProjectStoreProvider\");","map":{"version":3,"names":["createContext","useContext","create","supabase","projectService","updatecontrols","getControlsByProjectId","jsxDEV","_jsxDEV","ProjectOperationError","Error","constructor","message","operation","details","name","useProjectStore","set","get","projects","currentProject","currentStep","isLoading","error","retryCount","maxRetries","projectDetails","hazardIdentificationData","riskAssessmentData","riskControlsData","setLoading","setError","clearError","resetState","setCurrentProject","project","store","project_id","title","date","facilitator","attendees","operational_desc","operational_files","Array","isArray","stepData","Promise","all","loadStepData","lastCompletedStep","forEach","exists","index","Math","min","console","setCurrentStep","step","previousStepData","getStepData","loadProjects","data","from","select","order","ascending","state","createProject","projectData","insert","single","updateProject","id","update","eq","map","p","deleteProject","deleteProjectData","delete","_state$currentProject","filter","setStepData","_store$currentProject","_store$currentProject2","log","event","events","saveEvent","updateRiskControls","loadProjectData","controlsData","getRiskControlsByProjectId","controls","ProjectStoreContext","ProjectStoreProvider","children","_s","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useProjectStoreContext","_s2","$RefreshReg$"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/stores/projectStore.js"],"sourcesContent":["import { createContext, useContext } from 'react';\r\nimport { create } from 'zustand';\r\nimport { supabase } from '../services/supabase';\r\nimport { projectService } from '../services/projectService';\r\nimport { updatecontrols, getControlsByProjectId} from '../services/controlService';\r\n\r\n// Custom error class for project operations\r\nclass ProjectOperationError extends Error {\r\n  constructor(message, operation, details = null) {\r\n    super(message);\r\n    this.name = 'ProjectOperationError';\r\n    this.operation = operation;\r\n    this.details = details;\r\n  }\r\n}\r\n\r\nconst useProjectStore = create((set, get) => ({\r\n  // State\r\n  projects: [],\r\n  currentProject: null,\r\n  currentStep: 0,\r\n  isLoading: false,\r\n  error: null,\r\n  retryCount: 0,\r\n  maxRetries: 3,\r\n\r\n  // Form Data State\r\n  projectDetails: null,\r\n  hazardIdentificationData: null,\r\n  riskAssessmentData: null,\r\n  riskControlsData: null,\r\n\r\n  // Loading and Error Handlers\r\n  setLoading: (isLoading) => set({ isLoading }),\r\n  setError: (error) => set({ error }),\r\n  clearError: () => set({ error: null }),\r\n  \r\n  // Reset state\r\n  resetState: () => set({\r\n    currentProject: null,\r\n    currentStep: 0,\r\n    projectDetails: null,\r\n    hazardIdentificationData: null,\r\n    riskAssessmentData: null,\r\n    riskControlsData: null,\r\n    error: null,\r\n    retryCount: 0\r\n  }),\r\n\r\n  // Project Selection\r\n  setCurrentProject: async (project) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      if (!project) {\r\n        store.resetState();\r\n        return;\r\n      }\r\n\r\n      // Set current project and project details\r\n      set({ \r\n        currentProject: project,\r\n        projectDetails: {\r\n          project_id: project.project_id, // Changed from projectId to project_id\r\n          title: project.title,\r\n          date: project.date,\r\n          facilitator: project.facilitator,\r\n          attendees: project.attendees || [],\r\n          operational_desc: project.operational_desc || '',\r\n          operational_files: Array.isArray(project.operational_files) ? project.operational_files : []\r\n        }\r\n      });\r\n\r\n      // Load all available step data\r\n      const stepData = await Promise.all([\r\n        store.loadStepData(2), // Hazard Identification\r\n        store.loadStepData(3), // Risk Assessment\r\n        store.loadStepData(4)  // Risk Controls\r\n      ]);\r\n\r\n      // Determine the furthest completed step\r\n      let lastCompletedStep = 1; // Project details is step 1\r\n      stepData.forEach((exists, index) => {\r\n        if (exists) lastCompletedStep = index + 2;\r\n      });\r\n\r\n      // Set the current step to the next incomplete step\r\n      set({ currentStep: Math.min(lastCompletedStep + 1, 4) });\r\n\r\n    } catch (error) {\r\n      console.error('Error setting current project:', error);\r\n      store.setError(`Failed to load project data: ${error.message}`);\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  // Navigation\r\n  setCurrentStep: (step) => {\r\n    const store = get();\r\n    \r\n    // Always allow navigation to step 0 (dashboard) or 1 (project details)\r\n    if (step <= 1) {\r\n      set({ currentStep: step, error: null });\r\n      return true;\r\n    }\r\n\r\n    // For other steps, check prerequisites\r\n    const previousStepData = store.getStepData(step - 1);\r\n    if (!previousStepData) {\r\n      store.setError('Please complete the previous step first');\r\n      return false;\r\n    }\r\n\r\n    set({ currentStep: step, error: null });\r\n    return true;\r\n  },\r\n\r\n  // Project Operations with Retry Logic\r\n  loadProjects: async () => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw new ProjectOperationError('Failed to load projects', 'LOAD', error);\r\n\r\n      set({ projects: data });\r\n    } catch (error) {\r\n      console.error('Load projects error:', error);\r\n      if (store.retryCount < store.maxRetries) {\r\n        set(state => ({ retryCount: state.retryCount + 1 }));\r\n        await store.loadProjects();\r\n      } else {\r\n        set({ \r\n          error: `Failed to load projects after ${store.maxRetries} attempts: ${error.message}`,\r\n          retryCount: 0\r\n        });\r\n      }\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  createProject: async (projectData) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .insert([projectData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw new ProjectOperationError('Failed to create project', 'CREATE', error);\r\n\r\n      set(state => ({\r\n        projects: [data, ...state.projects],\r\n        currentProject: data,\r\n        projectDetails: data,\r\n        currentStep: 2 // Automatically advance to Hazard Identification\r\n      }));\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Create project error:', error);\r\n      set({ error: `Failed to create project: ${error.message}` });\r\n      throw error;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  updateProject: async (id, projectData) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .update(projectData)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw new ProjectOperationError('Failed to update project', 'UPDATE', error);\r\n\r\n      set(state => ({\r\n        projects: state.projects.map(p => p.id === id ? data : p),\r\n        currentProject: data,\r\n        projectDetails: data\r\n      }));\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Update project error:', error);\r\n      set({ error: `Failed to update project: ${error.message}` });\r\n      throw error;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  deleteProject: async (id) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      // Delete all related data using projectService\r\n      await projectService.deleteProjectData(id);\r\n\r\n      // Then delete the project\r\n      const { error } = await supabase\r\n        .from('hira_projects')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw new ProjectOperationError('Failed to delete project', 'DELETE', error);\r\n\r\n      set(state => ({\r\n        projects: state.projects.filter(p => p.id !== id),\r\n        ...(state.currentProject?.id === id ? {\r\n          currentProject: null,\r\n          projectDetails: null,\r\n          currentStep: 0\r\n        } : {})\r\n      }));\r\n    } catch (error) {\r\n      console.error('Delete project error:', error);\r\n      set({ error: `Failed to delete project: ${error.message}` });\r\n      throw error;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  // Form Data Management\r\n  setStepData: async (step, data) => {\r\n    const store = get();\r\n    try {\r\n      // Update local state\r\n      switch (step) {\r\n        case 1:\r\n          set({ projectDetails: data });\r\n          break;\r\n        case 2:\r\n          set({ hazardIdentificationData: data });\r\n          // Save to relational tables using project_id\r\n          if (store.currentProject?.project_id) {\r\n            console.log('Saving events with project_id:', store.currentProject.project_id);\r\n            for (const event of data.events) {\r\n              await projectService.saveEvent(store.currentProject.project_id, event);\r\n            }\r\n          } else {\r\n            throw new Error('Project ID not found');\r\n          }\r\n          break;\r\n        case 3:\r\n          set({ riskAssessmentData: data });\r\n          break;\r\n        case 4:\r\n          set({ riskControlsData: data });\r\n          // Save risk controls using project_id\r\n          if (store.currentProject?.project_id) {\r\n            console.log('Saving risk controls for project:', store.currentProject.project_id);\r\n            await updateRiskControls(store.currentProject.project_id, data);\r\n          } else {\r\n            throw new Error('Project ID not found');\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Invalid step: ${step}`);\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error in setStepData(${step}):`, error);\r\n      store.setError(`Failed to save step ${step} data: ${error.message}`);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Load step data from database\r\n  loadStepData: async (step) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      if (!store.currentProject) throw new Error('No current project');\r\n\r\n      switch (step) {\r\n        case 2: // Hazard Identification\r\n          const projectData = await projectService.loadProjectData(store.currentProject.project_id);\r\n          if (projectData) {\r\n            set({ hazardIdentificationData: { events: projectData } });\r\n            return true;\r\n          }\r\n          return false;\r\n\r\n        case 3: // Risk Assessment\r\n          // TODO: Implement risk assessment data loading\r\n          return false;\r\n\r\n        case 4: // Risk Controls\r\n          const controlsData = await getRiskControlsByProjectId(store.currentProject.project_id);\r\n          if (controlsData) {\r\n            set({ riskControlsData: { controls: controlsData } });\r\n            return true;\r\n          }\r\n          return false;\r\n\r\n        default:\r\n          return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Load step ${step} error:`, error);\r\n      store.setError(`Failed to load step ${step}: ${error.message}`);\r\n      return false;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  }\r\n}));\r\n\r\nconst ProjectStoreContext = createContext();\r\n\r\nexport const ProjectStoreProvider = ({ children }) => {\r\n  const store = useProjectStore();\r\n  return (\r\n    <ProjectStoreContext.Provider value={store}>\r\n      {children}\r\n    </ProjectStoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useProjectStoreContext = () => useContext(ProjectStoreContext);\r\n\r\nexport default useProjectStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}