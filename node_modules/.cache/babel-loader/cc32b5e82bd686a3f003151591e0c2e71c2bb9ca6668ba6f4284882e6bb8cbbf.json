{"ast":null,"code":"import { supabase } from './supabase';\nexport const projectService = {\n  // Save event and all its related data\n  async saveEvent(projectId, eventData) {\n    try {\n      // First save the event\n      const {\n        data: event,\n        error: eventError\n      } = await supabase.from('hira_events').insert({\n        project_id: projectId,\n        name: eventData.name\n      }).select().single();\n      if (eventError) throw eventError;\n\n      // Then save each hazard for this event\n      for (const hazard of eventData.hazards) {\n        const {\n          data: hazardData,\n          error: hazardError\n        } = await supabase.from('hira_hazards').insert({\n          event_id: event.id,\n          description: hazard.description\n        }).select().single();\n        if (hazardError) throw hazardError;\n\n        // Save consequences for this hazard\n        for (const consequence of hazard.consequences) {\n          const {\n            error: consequenceError\n          } = await supabase.from('hira_consequences').insert({\n            hazard_id: hazardData.id,\n            description: consequence.description,\n            current_controls: consequence.currentControls\n          });\n          if (consequenceError) throw consequenceError;\n        }\n      }\n      return event;\n    } catch (error) {\n      console.error('Error saving event data:', error);\n      throw error;\n    }\n  },\n  // Load all events and related data for a project\n  async loadProjectData(projectId) {\n    try {\n      // Get all events for the project\n      const {\n        data: events,\n        error: eventsError\n      } = await supabase.from('hira_events').select(`\n          id,\n          name,\n          hazards:hira_hazards (\n            id,\n            description,\n            consequences:hira_consequences (\n              id,\n              description,\n              current_controls\n            )\n          )\n        `).eq('project_id', projectId);\n      if (eventsError) throw eventsError;\n      return events;\n    } catch (error) {\n      console.error('Error loading project data:', error);\n      throw error;\n    }\n  },\n  // Save risk assessment for a consequence\n  async saveRiskAssessment(consequenceId, assessmentData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_risk_assessments').insert({\n        consequence_id: consequenceId,\n        probability: assessmentData.probability,\n        severity: assessmentData.severity,\n        likelihood: assessmentData.likelihood,\n        impact: assessmentData.impact,\n        tolerability: assessmentData.tolerability\n      }).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error saving risk assessment:', error);\n      throw error;\n    }\n  },\n  // Save risk controls for an assessment\n  async saveRiskControls(assessmentId, controlsData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_risk_controls').insert({\n        assessment_id: assessmentId,\n        additional_mitigation: controlsData.additionalMitigation,\n        risk_owner: controlsData.riskOwner,\n        target_date: controlsData.targetDate,\n        date_implemented: controlsData.dateImplemented\n      }).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error saving risk controls:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","projectService","saveEvent","projectId","eventData","data","event","error","eventError","from","insert","project_id","name","select","single","hazard","hazards","hazardData","hazardError","event_id","id","description","consequence","consequences","consequenceError","hazard_id","current_controls","currentControls","console","loadProjectData","events","eventsError","eq","saveRiskAssessment","consequenceId","assessmentData","consequence_id","probability","severity","likelihood","impact","tolerability","saveRiskControls","assessmentId","controlsData","assessment_id","additional_mitigation","additionalMitigation","risk_owner","riskOwner","target_date","targetDate","date_implemented","dateImplemented"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/projectService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const projectService = {\r\n  // Save event and all its related data\r\n  async saveEvent(projectId, eventData) {\r\n    try {\r\n      // First save the event\r\n      const { data: event, error: eventError } = await supabase\r\n        .from('hira_events')\r\n        .insert({\r\n          project_id: projectId,\r\n          name: eventData.name\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (eventError) throw eventError;\r\n\r\n      // Then save each hazard for this event\r\n      for (const hazard of eventData.hazards) {\r\n        const { data: hazardData, error: hazardError } = await supabase\r\n          .from('hira_hazards')\r\n          .insert({\r\n            event_id: event.id,\r\n            description: hazard.description\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (hazardError) throw hazardError;\r\n\r\n        // Save consequences for this hazard\r\n        for (const consequence of hazard.consequences) {\r\n          const { error: consequenceError } = await supabase\r\n            .from('hira_consequences')\r\n            .insert({\r\n              hazard_id: hazardData.id,\r\n              description: consequence.description,\r\n              current_controls: consequence.currentControls\r\n            });\r\n\r\n          if (consequenceError) throw consequenceError;\r\n        }\r\n      }\r\n\r\n      return event;\r\n    } catch (error) {\r\n      console.error('Error saving event data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Load all events and related data for a project\r\n  async loadProjectData(projectId) {\r\n    try {\r\n      // Get all events for the project\r\n      const { data: events, error: eventsError } = await supabase\r\n        .from('hira_events')\r\n        .select(`\r\n          id,\r\n          name,\r\n          hazards:hira_hazards (\r\n            id,\r\n            description,\r\n            consequences:hira_consequences (\r\n              id,\r\n              description,\r\n              current_controls\r\n            )\r\n          )\r\n        `)\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsError) throw eventsError;\r\n\r\n      return events;\r\n    } catch (error) {\r\n      console.error('Error loading project data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Save risk assessment for a consequence\r\n  async saveRiskAssessment(consequenceId, assessmentData) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_risk_assessments')\r\n        .insert({\r\n          consequence_id: consequenceId,\r\n          probability: assessmentData.probability,\r\n          severity: assessmentData.severity,\r\n          likelihood: assessmentData.likelihood,\r\n          impact: assessmentData.impact,\r\n          tolerability: assessmentData.tolerability\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error saving risk assessment:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Save risk controls for an assessment\r\n  async saveRiskControls(assessmentId, controlsData) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_risk_controls')\r\n        .insert({\r\n          assessment_id: assessmentId,\r\n          additional_mitigation: controlsData.additionalMitigation,\r\n          risk_owner: controlsData.riskOwner,\r\n          target_date: controlsData.targetDate,\r\n          date_implemented: controlsData.dateImplemented\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error saving risk controls:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}