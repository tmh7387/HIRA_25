{"ast":null,"code":"import { supabase } from './supabase';\nasync function findConsequence(consequenceId) {\n  console.log('Finding consequence with ID:', consequenceId);\n  const {\n    data,\n    error\n  } = await supabase.from('hira_consequences').select(`\n      id,\n      description,\n      current_controls,\n      hazard:hira_hazards!inner(\n        id,\n        description,\n        event:hira_events!inner(\n          id,\n          name\n        )\n      )\n    `).eq('id', consequenceId).single();\n  if (error) {\n    console.error('Error finding consequence:', error);\n    console.error('Attempted to find consequence with ID:', consequenceId);\n    throw new Error(`Consequence not found: ${consequenceId}`);\n  }\n  if (!data) {\n    console.error('No consequence found with ID:', consequenceId);\n    throw new Error(`No consequence found with ID: ${consequenceId}`);\n  }\n  console.log('Found consequence:', data);\n  return data;\n}\nasync function createOrUpdateAssessment(assessment, matrixType) {\n  console.log('Creating/updating assessment for consequence:', assessment.uniqueId);\n  const normalizedMatrixType = matrixType.toLowerCase();\n\n  // First verify the consequence exists\n  const consequence = await findConsequence(assessment.uniqueId);\n\n  // Check if an assessment already exists for this consequence\n  const {\n    data: existingAssessment,\n    error: fetchError\n  } = await supabase.from('hira_risk_assessments').select('*').eq('consequence_id', consequence.id).single();\n  if (fetchError && fetchError.code !== 'PGRST116') {\n    // PGRST116 is \"not found\" error\n    throw fetchError;\n  }\n  const assessmentData = {\n    consequence_id: consequence.id,\n    matrix_type: normalizedMatrixType,\n    probability: assessment.probability ? parseInt(assessment.probability) : null,\n    severity: assessment.severity || null,\n    likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\n    impact: assessment.impact ? parseInt(assessment.impact) : null,\n    tolerability: assessment.tolerability || null\n  };\n  let result;\n  if (existingAssessment) {\n    console.log('Updating existing assessment:', existingAssessment.id);\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_assessments').update(assessmentData).eq('id', existingAssessment.id).select().single();\n    if (error) throw error;\n    result = data;\n  } else {\n    console.log('Creating new assessment for consequence:', consequence.id);\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_assessments').insert(assessmentData).select().single();\n    if (error) throw error;\n    result = data;\n  }\n  return {\n    id: result.id,\n    uniqueId: consequence.id,\n    event: consequence.hazard.event.name,\n    hazard: consequence.hazard.description,\n    consequence: consequence.description,\n    currentControls: consequence.current_controls,\n    matrixType: result.matrix_type.toUpperCase(),\n    probability: result.probability,\n    severity: result.severity,\n    likelihood: result.likelihood,\n    impact: result.impact,\n    tolerability: result.tolerability\n  };\n}\nexport async function updateAssessments(projectId, assessmentsData, matrixType) {\n  try {\n    console.log('Updating assessments for project:', projectId);\n    console.log('Assessments data:', assessmentsData);\n\n    // Process each assessment\n    const assessmentPromises = assessmentsData.assessments.map(assessment => createOrUpdateAssessment(assessment, matrixType));\n    const results = await Promise.all(assessmentPromises);\n    console.log('Successfully updated all assessments:', results);\n    return {\n      assessments: results\n    };\n  } catch (error) {\n    console.error('Error updating assessments:', error);\n    throw error;\n  }\n}\nexport async function getAssessmentsByProjectId(projectId) {\n  try {\n    console.log('Getting assessments for project:', projectId);\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_assessments').select(`\n        id,\n        matrix_type,\n        probability,\n        severity,\n        likelihood,\n        impact,\n        tolerability,\n        consequence:hira_consequences!inner(\n          id,\n          description,\n          current_controls,\n          hazard:hira_hazards!inner(\n            id,\n            description,\n            event:hira_events!inner(\n              id,\n              name,\n              project_id\n            )\n          )\n        )\n      `).eq('consequence.hazard.event.project_id', projectId);\n    if (error) throw error;\n    console.log('Found assessments:', data);\n    return data.map(assessment => ({\n      id: assessment.id,\n      uniqueId: assessment.consequence.id,\n      event: assessment.consequence.hazard.event.name,\n      hazard: assessment.consequence.hazard.description,\n      consequence: assessment.consequence.description,\n      currentControls: assessment.consequence.current_controls,\n      matrixType: assessment.matrix_type.toUpperCase(),\n      probability: assessment.probability,\n      severity: assessment.severity,\n      likelihood: assessment.likelihood,\n      impact: assessment.impact,\n      tolerability: assessment.tolerability\n    }));\n  } catch (error) {\n    console.error('Error getting assessments:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","findConsequence","consequenceId","console","log","data","error","from","select","eq","single","Error","createOrUpdateAssessment","assessment","matrixType","uniqueId","normalizedMatrixType","toLowerCase","consequence","existingAssessment","fetchError","id","code","assessmentData","consequence_id","matrix_type","probability","parseInt","severity","likelihood","impact","tolerability","result","update","insert","event","hazard","name","description","currentControls","current_controls","toUpperCase","updateAssessments","projectId","assessmentsData","assessmentPromises","assessments","map","results","Promise","all","getAssessmentsByProjectId"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/riskAssessmentService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nasync function findConsequence(consequenceId) {\r\n  console.log('Finding consequence with ID:', consequenceId);\r\n  \r\n  const { data, error } = await supabase\r\n    .from('hira_consequences')\r\n    .select(`\r\n      id,\r\n      description,\r\n      current_controls,\r\n      hazard:hira_hazards!inner(\r\n        id,\r\n        description,\r\n        event:hira_events!inner(\r\n          id,\r\n          name\r\n        )\r\n      )\r\n    `)\r\n    .eq('id', consequenceId)\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error finding consequence:', error);\r\n    console.error('Attempted to find consequence with ID:', consequenceId);\r\n    throw new Error(`Consequence not found: ${consequenceId}`);\r\n  }\r\n\r\n  if (!data) {\r\n    console.error('No consequence found with ID:', consequenceId);\r\n    throw new Error(`No consequence found with ID: ${consequenceId}`);\r\n  }\r\n\r\n  console.log('Found consequence:', data);\r\n  return data;\r\n}\r\n\r\nasync function createOrUpdateAssessment(assessment, matrixType) {\r\n  console.log('Creating/updating assessment for consequence:', assessment.uniqueId);\r\n  \r\n  const normalizedMatrixType = matrixType.toLowerCase();\r\n\r\n  // First verify the consequence exists\r\n  const consequence = await findConsequence(assessment.uniqueId);\r\n\r\n  // Check if an assessment already exists for this consequence\r\n  const { data: existingAssessment, error: fetchError } = await supabase\r\n    .from('hira_risk_assessments')\r\n    .select('*')\r\n    .eq('consequence_id', consequence.id)\r\n    .single();\r\n\r\n  if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 is \"not found\" error\r\n    throw fetchError;\r\n  }\r\n\r\n  const assessmentData = {\r\n    consequence_id: consequence.id,\r\n    matrix_type: normalizedMatrixType,\r\n    probability: assessment.probability ? parseInt(assessment.probability) : null,\r\n    severity: assessment.severity || null,\r\n    likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\r\n    impact: assessment.impact ? parseInt(assessment.impact) : null,\r\n    tolerability: assessment.tolerability || null\r\n  };\r\n\r\n  let result;\r\n  if (existingAssessment) {\r\n    console.log('Updating existing assessment:', existingAssessment.id);\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_assessments')\r\n      .update(assessmentData)\r\n      .eq('id', existingAssessment.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    result = data;\r\n  } else {\r\n    console.log('Creating new assessment for consequence:', consequence.id);\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_assessments')\r\n      .insert(assessmentData)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    result = data;\r\n  }\r\n\r\n  return {\r\n    id: result.id,\r\n    uniqueId: consequence.id,\r\n    event: consequence.hazard.event.name,\r\n    hazard: consequence.hazard.description,\r\n    consequence: consequence.description,\r\n    currentControls: consequence.current_controls,\r\n    matrixType: result.matrix_type.toUpperCase(),\r\n    probability: result.probability,\r\n    severity: result.severity,\r\n    likelihood: result.likelihood,\r\n    impact: result.impact,\r\n    tolerability: result.tolerability\r\n  };\r\n}\r\n\r\nexport async function updateAssessments(projectId, assessmentsData, matrixType) {\r\n  try {\r\n    console.log('Updating assessments for project:', projectId);\r\n    console.log('Assessments data:', assessmentsData);\r\n\r\n    // Process each assessment\r\n    const assessmentPromises = assessmentsData.assessments.map(assessment => \r\n      createOrUpdateAssessment(assessment, matrixType)\r\n    );\r\n\r\n    const results = await Promise.all(assessmentPromises);\r\n    console.log('Successfully updated all assessments:', results);\r\n    return { assessments: results };\r\n  } catch (error) {\r\n    console.error('Error updating assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getAssessmentsByProjectId(projectId) {\r\n  try {\r\n    console.log('Getting assessments for project:', projectId);\r\n\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_assessments')\r\n      .select(`\r\n        id,\r\n        matrix_type,\r\n        probability,\r\n        severity,\r\n        likelihood,\r\n        impact,\r\n        tolerability,\r\n        consequence:hira_consequences!inner(\r\n          id,\r\n          description,\r\n          current_controls,\r\n          hazard:hira_hazards!inner(\r\n            id,\r\n            description,\r\n            event:hira_events!inner(\r\n              id,\r\n              name,\r\n              project_id\r\n            )\r\n          )\r\n        )\r\n      `)\r\n      .eq('consequence.hazard.event.project_id', projectId);\r\n\r\n    if (error) throw error;\r\n\r\n    console.log('Found assessments:', data);\r\n\r\n    return data.map(assessment => ({\r\n      id: assessment.id,\r\n      uniqueId: assessment.consequence.id,\r\n      event: assessment.consequence.hazard.event.name,\r\n      hazard: assessment.consequence.hazard.description,\r\n      consequence: assessment.consequence.description,\r\n      currentControls: assessment.consequence.current_controls,\r\n      matrixType: assessment.matrix_type.toUpperCase(),\r\n      probability: assessment.probability,\r\n      severity: assessment.severity,\r\n      likelihood: assessment.likelihood,\r\n      impact: assessment.impact,\r\n      tolerability: assessment.tolerability\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error getting assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}