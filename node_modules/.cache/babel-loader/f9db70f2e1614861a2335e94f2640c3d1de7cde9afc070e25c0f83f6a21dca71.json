{"ast":null,"code":"import { create } from 'zustand';\nimport { supabase } from '../services/supabase';\nimport { listFiles } from '../services/supabase';\nconst useProjectStore = create((set, get) => ({\n  projects: [],\n  currentProject: null,\n  currentStep: 0,\n  isLoading: false,\n  error: null,\n  setCurrentProject: async project => {\n    try {\n      var _project;\n      if ((_project = project) !== null && _project !== void 0 && _project.project_id) {\n        const files = await listFiles(project.project_id);\n        project = {\n          ...project,\n          operational_files: files\n        };\n      }\n      set({\n        currentProject: project\n      });\n    } catch (error) {\n      console.error('Error loading project files:', error);\n      set({\n        currentProject: project\n      });\n    }\n  },\n  setCurrentStep: step => set({\n    currentStep: step\n  }),\n  loadProjects: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').select('*').order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      const projectsWithFiles = await Promise.all(data.map(async project => {\n        if (project.project_id) {\n          const files = await listFiles(project.project_id);\n          return {\n            ...project,\n            operational_files: files\n          };\n        }\n        return project;\n      }));\n      set({\n        projects: projectsWithFiles\n      });\n    } catch (error) {\n      console.error('Load projects error:', error);\n      set({\n        error: error.message\n      });\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  createProject: async projectData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      var _projectData$operatio;\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').insert([{\n        project_id: projectData.project_id,\n        title: projectData.title,\n        date: projectData.date,\n        facilitator: projectData.facilitator,\n        attendees: projectData.attendees,\n        operational_desc: projectData.operational_desc,\n        operational_files: ((_projectData$operatio = projectData.operational_files) === null || _projectData$operatio === void 0 ? void 0 : _projectData$operatio.map(file => ({\n          name: file.name,\n          path: file.path,\n          url: file.url,\n          size: file.size,\n          type: file.type\n        }))) || []\n      }]).select().single();\n      if (error) throw error;\n      const files = await listFiles(data.project_id);\n      const projectWithFiles = {\n        ...data,\n        operational_files: files\n      };\n      set(state => ({\n        projects: [projectWithFiles, ...state.projects],\n        currentProject: projectWithFiles\n      }));\n      return projectWithFiles;\n    } catch (error) {\n      console.error('Create project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  updateProject: async projectData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      var _projectData$operatio2;\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').update({\n        title: projectData.title,\n        date: projectData.date,\n        facilitator: projectData.facilitator,\n        attendees: projectData.attendees,\n        operational_desc: projectData.operational_desc,\n        operational_files: ((_projectData$operatio2 = projectData.operational_files) === null || _projectData$operatio2 === void 0 ? void 0 : _projectData$operatio2.map(file => ({\n          name: file.name,\n          path: file.path,\n          url: file.url,\n          size: file.size,\n          type: file.type\n        }))) || []\n      }).eq('project_id', projectData.project_id).select().single();\n      if (error) throw error;\n      const files = await listFiles(data.project_id);\n      const projectWithFiles = {\n        ...data,\n        operational_files: files\n      };\n      set(state => ({\n        projects: state.projects.map(p => p.project_id === projectData.project_id ? projectWithFiles : p),\n        currentProject: projectWithFiles\n      }));\n      return projectWithFiles;\n    } catch (error) {\n      console.error('Update project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  deleteProject: async project_id => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        error\n      } = await supabase.from('hira_projects').delete().eq('project_id', project_id);\n      if (error) throw error;\n      set(state => ({\n        projects: state.projects.filter(p => p.project_id !== project_id),\n        currentProject: null\n      }));\n    } catch (error) {\n      console.error('Delete project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  }\n}));\nexport default useProjectStore;","map":{"version":3,"names":["create","supabase","listFiles","useProjectStore","set","get","projects","currentProject","currentStep","isLoading","error","setCurrentProject","project","_project","project_id","files","operational_files","console","setCurrentStep","step","loadProjects","data","from","select","order","ascending","projectsWithFiles","Promise","all","map","message","createProject","projectData","_projectData$operatio","insert","title","date","facilitator","attendees","operational_desc","file","name","path","url","size","type","single","projectWithFiles","state","updateProject","_projectData$operatio2","update","eq","p","deleteProject","delete","filter"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/stores/projectStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { supabase } from '../services/supabase';\r\nimport { listFiles } from '../services/supabase';\r\n\r\nconst useProjectStore = create((set, get) => ({\r\n  projects: [],\r\n  currentProject: null,\r\n  currentStep: 0,\r\n  isLoading: false,\r\n  error: null,\r\n\r\n  setCurrentProject: async (project) => {\r\n    try {\r\n      if (project?.project_id) {\r\n        const files = await listFiles(project.project_id);\r\n        project = {\r\n          ...project,\r\n          operational_files: files\r\n        };\r\n      }\r\n      set({ currentProject: project });\r\n    } catch (error) {\r\n      console.error('Error loading project files:', error);\r\n      set({ currentProject: project });\r\n    }\r\n  },\r\n\r\n  setCurrentStep: (step) => set({ currentStep: step }),\r\n\r\n  loadProjects: async () => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      const projectsWithFiles = await Promise.all(data.map(async (project) => {\r\n        if (project.project_id) {\r\n          const files = await listFiles(project.project_id);\r\n          return {\r\n            ...project,\r\n            operational_files: files\r\n          };\r\n        }\r\n        return project;\r\n      }));\r\n\r\n      set({ projects: projectsWithFiles });\r\n    } catch (error) {\r\n      console.error('Load projects error:', error);\r\n      set({ error: error.message });\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  createProject: async (projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .insert([{\r\n          project_id: projectData.project_id,\r\n          title: projectData.title,\r\n          date: projectData.date,\r\n          facilitator: projectData.facilitator,\r\n          attendees: projectData.attendees,\r\n          operational_desc: projectData.operational_desc,\r\n          operational_files: projectData.operational_files?.map(file => ({\r\n            name: file.name,\r\n            path: file.path,\r\n            url: file.url,\r\n            size: file.size,\r\n            type: file.type\r\n          })) || []\r\n        }])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const files = await listFiles(data.project_id);\r\n      const projectWithFiles = {\r\n        ...data,\r\n        operational_files: files\r\n      };\r\n\r\n      set((state) => ({\r\n        projects: [projectWithFiles, ...state.projects],\r\n        currentProject: projectWithFiles\r\n      }));\r\n\r\n      return projectWithFiles;\r\n    } catch (error) {\r\n      console.error('Create project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  updateProject: async (projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .update({\r\n          title: projectData.title,\r\n          date: projectData.date,\r\n          facilitator: projectData.facilitator,\r\n          attendees: projectData.attendees,\r\n          operational_desc: projectData.operational_desc,\r\n          operational_files: projectData.operational_files?.map(file => ({\r\n            name: file.name,\r\n            path: file.path,\r\n            url: file.url,\r\n            size: file.size,\r\n            type: file.type\r\n          })) || []\r\n        })\r\n        .eq('project_id', projectData.project_id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const files = await listFiles(data.project_id);\r\n      const projectWithFiles = {\r\n        ...data,\r\n        operational_files: files\r\n      };\r\n\r\n      set((state) => ({\r\n        projects: state.projects.map((p) =>\r\n          p.project_id === projectData.project_id ? projectWithFiles : p\r\n        ),\r\n        currentProject: projectWithFiles\r\n      }));\r\n\r\n      return projectWithFiles;\r\n    } catch (error) {\r\n      console.error('Update project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  deleteProject: async (project_id) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { error } = await supabase\r\n        .from('hira_projects')\r\n        .delete()\r\n        .eq('project_id', project_id);\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: state.projects.filter((p) => p.project_id !== project_id),\r\n        currentProject: null\r\n      }));\r\n    } catch (error) {\r\n      console.error('Delete project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  }\r\n}));\r\n\r\nexport default useProjectStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}