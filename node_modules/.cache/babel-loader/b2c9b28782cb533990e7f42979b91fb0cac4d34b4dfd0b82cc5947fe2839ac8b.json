{"ast":null,"code":"import { create } from 'zustand';\nimport { supabase } from '../services/supabase';\nconst useProjectStore = create((set, get) => ({\n  projects: [],\n  currentProject: null,\n  currentStep: 0,\n  isLoading: false,\n  error: null,\n  setCurrentProject: project => set({\n    currentProject: project\n  }),\n  setCurrentStep: step => set({\n    currentStep: step\n  }),\n  clearError: () => set({\n    error: null\n  }),\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  loadProjects: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('projects').select('*').order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      set({\n        projects: data || []\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  createProject: async projectData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('projects').insert([projectData]).select().single();\n      if (error) throw error;\n      set(state => ({\n        projects: [data, ...state.projects],\n        currentProject: data\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  updateProject: async (projectId, projectData) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('projects').update(projectData).eq('projectId', projectId).select().single();\n      if (error) throw error;\n      set(state => ({\n        projects: state.projects.map(p => p.projectId === projectId ? data : p),\n        currentProject: data\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  deleteProject: async projectId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        error\n      } = await supabase.from('projects').delete().eq('projectId', projectId);\n      if (error) throw error;\n      set(state => ({\n        projects: state.projects.filter(p => p.projectId !== projectId),\n        currentProject: null\n      }));\n    } catch (error) {\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  }\n}));\nexport default useProjectStore;","map":{"version":3,"names":["create","supabase","useProjectStore","set","get","projects","currentProject","currentStep","isLoading","error","setCurrentProject","project","setCurrentStep","step","clearError","setLoading","loadProjects","data","from","select","order","ascending","message","createProject","projectData","insert","single","state","updateProject","projectId","update","eq","map","p","deleteProject","delete","filter"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/stores/projectStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { supabase } from '../services/supabase';\r\n\r\nconst useProjectStore = create((set, get) => ({\r\n  projects: [],\r\n  currentProject: null,\r\n  currentStep: 0,\r\n  isLoading: false,\r\n  error: null,\r\n\r\n  setCurrentProject: (project) => set({ currentProject: project }),\r\n  setCurrentStep: (step) => set({ currentStep: step }),\r\n  clearError: () => set({ error: null }),\r\n  setLoading: (isLoading) => set({ isLoading }),\r\n\r\n  loadProjects: async () => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('projects')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      set({ projects: data || [] });\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  createProject: async (projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('projects')\r\n        .insert([projectData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: [data, ...state.projects],\r\n        currentProject: data\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  updateProject: async (projectId, projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('projects')\r\n        .update(projectData)\r\n        .eq('projectId', projectId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: state.projects.map((p) =>\r\n          p.projectId === projectId ? data : p\r\n        ),\r\n        currentProject: data\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  deleteProject: async (projectId) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { error } = await supabase\r\n        .from('projects')\r\n        .delete()\r\n        .eq('projectId', projectId);\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: state.projects.filter((p) => p.projectId !== projectId),\r\n        currentProject: null\r\n      }));\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  }\r\n}));\r\n\r\nexport default useProjectStore;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,QAAQ,QAAQ,sBAAsB;AAE/C,MAAMC,eAAe,GAAGF,MAAM,CAAC,CAACG,GAAG,EAAEC,GAAG,MAAM;EAC5CC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE,IAAI;EACpBC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EAEXC,iBAAiB,EAAGC,OAAO,IAAKR,GAAG,CAAC;IAAEG,cAAc,EAAEK;EAAQ,CAAC,CAAC;EAChEC,cAAc,EAAGC,IAAI,IAAKV,GAAG,CAAC;IAAEI,WAAW,EAAEM;EAAK,CAAC,CAAC;EACpDC,UAAU,EAAEA,CAAA,KAAMX,GAAG,CAAC;IAAEM,KAAK,EAAE;EAAK,CAAC,CAAC;EACtCM,UAAU,EAAGP,SAAS,IAAKL,GAAG,CAAC;IAAEK;EAAU,CAAC,CAAC;EAE7CQ,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxBb,GAAG,CAAC;MAAEK,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAM;QAAEQ,IAAI;QAAER;MAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCiB,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,YAAY,EAAE;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;MAE5C,IAAIZ,KAAK,EAAE,MAAMA,KAAK;MAEtBN,GAAG,CAAC;QAAEE,QAAQ,EAAEY,IAAI,IAAI;MAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdN,GAAG,CAAC;QAAEM,KAAK,EAAEA,KAAK,CAACa;MAAQ,CAAC,CAAC;IAC/B,CAAC,SAAS;MACRnB,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;IAC3B;EACF,CAAC;EAEDe,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpCrB,GAAG,CAAC;MAAEK,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAM;QAAEQ,IAAI;QAAER;MAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCiB,IAAI,CAAC,UAAU,CAAC,CAChBO,MAAM,CAAC,CAACD,WAAW,CAAC,CAAC,CACrBL,MAAM,CAAC,CAAC,CACRO,MAAM,CAAC,CAAC;MAEX,IAAIjB,KAAK,EAAE,MAAMA,KAAK;MAEtBN,GAAG,CAAEwB,KAAK,KAAM;QACdtB,QAAQ,EAAE,CAACY,IAAI,EAAE,GAAGU,KAAK,CAACtB,QAAQ,CAAC;QACnCC,cAAc,EAAEW;MAClB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdN,GAAG,CAAC;QAAEM,KAAK,EAAEA,KAAK,CAACa;MAAQ,CAAC,CAAC;MAC7B,MAAMb,KAAK;IACb,CAAC,SAAS;MACRN,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;IAC3B;EACF,CAAC;EAEDoB,aAAa,EAAE,MAAAA,CAAOC,SAAS,EAAEL,WAAW,KAAK;IAC/CrB,GAAG,CAAC;MAAEK,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAM;QAAEQ,IAAI;QAAER;MAAM,CAAC,GAAG,MAAMR,QAAQ,CACnCiB,IAAI,CAAC,UAAU,CAAC,CAChBY,MAAM,CAACN,WAAW,CAAC,CACnBO,EAAE,CAAC,WAAW,EAAEF,SAAS,CAAC,CAC1BV,MAAM,CAAC,CAAC,CACRO,MAAM,CAAC,CAAC;MAEX,IAAIjB,KAAK,EAAE,MAAMA,KAAK;MAEtBN,GAAG,CAAEwB,KAAK,KAAM;QACdtB,QAAQ,EAAEsB,KAAK,CAACtB,QAAQ,CAAC2B,GAAG,CAAEC,CAAC,IAC7BA,CAAC,CAACJ,SAAS,KAAKA,SAAS,GAAGZ,IAAI,GAAGgB,CACrC,CAAC;QACD3B,cAAc,EAAEW;MAClB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdN,GAAG,CAAC;QAAEM,KAAK,EAAEA,KAAK,CAACa;MAAQ,CAAC,CAAC;MAC7B,MAAMb,KAAK;IACb,CAAC,SAAS;MACRN,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;IAC3B;EACF,CAAC;EAED0B,aAAa,EAAE,MAAOL,SAAS,IAAK;IAClC1B,GAAG,CAAC;MAAEK,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAM;QAAEA;MAAM,CAAC,GAAG,MAAMR,QAAQ,CAC7BiB,IAAI,CAAC,UAAU,CAAC,CAChBiB,MAAM,CAAC,CAAC,CACRJ,EAAE,CAAC,WAAW,EAAEF,SAAS,CAAC;MAE7B,IAAIpB,KAAK,EAAE,MAAMA,KAAK;MAEtBN,GAAG,CAAEwB,KAAK,KAAM;QACdtB,QAAQ,EAAEsB,KAAK,CAACtB,QAAQ,CAAC+B,MAAM,CAAEH,CAAC,IAAKA,CAAC,CAACJ,SAAS,KAAKA,SAAS,CAAC;QACjEvB,cAAc,EAAE;MAClB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdN,GAAG,CAAC;QAAEM,KAAK,EAAEA,KAAK,CAACa;MAAQ,CAAC,CAAC;MAC7B,MAAMb,KAAK;IACb,CAAC,SAAS;MACRN,GAAG,CAAC;QAAEK,SAAS,EAAE;MAAM,CAAC,CAAC;IAC3B;EACF;AACF,CAAC,CAAC,CAAC;AAEH,eAAeN,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}