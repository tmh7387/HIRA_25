{"ast":null,"code":"import { supabase } from './supabase';\nexport async function createAssessments(projectId, assessmentsData, matrixType) {\n  console.log('Creating assessments for project:', projectId);\n  console.log('Assessments data:', assessmentsData);\n\n  // Convert matrix type to lowercase to match database constraint\n  const normalizedMatrixType = matrixType.toLowerCase();\n  const assessmentPromises = assessmentsData.assessments.map(async assessment => {\n    try {\n      // Verify the consequence exists in hira_consequences\n      const {\n        data: consequence,\n        error: consequenceError\n      } = await supabase.from('hira_consequences').select(`\n          id,\n          description,\n          current_controls,\n          hazard:hira_hazards!inner(\n            id,\n            description,\n            event:hira_events!inner(\n              id,\n              name\n            )\n          )\n        `).eq('id', assessment.uniqueId) // uniqueId is the consequence ID from hazard identification\n      .single();\n      if (consequenceError) {\n        console.error('Error finding consequence:', consequenceError);\n        throw new Error(`Consequence not found: ${assessment.uniqueId}`);\n      }\n      if (!consequence) {\n        throw new Error(`No consequence found with ID: ${assessment.uniqueId}`);\n      }\n      console.log('Found consequence:', consequence);\n\n      // Create the risk assessment\n      const {\n        data: createdAssessment,\n        error: assessmentError\n      } = await supabase.from('hira_risk_assessments').insert({\n        consequence_id: consequence.id,\n        matrix_type: normalizedMatrixType,\n        probability: assessment.probability ? parseInt(assessment.probability) : null,\n        severity: assessment.severity || null,\n        likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\n        impact: assessment.impact ? parseInt(assessment.impact) : null,\n        tolerability: assessment.tolerability || null\n      }).select().single();\n      if (assessmentError) {\n        console.error('Error creating assessment:', assessmentError);\n        throw assessmentError;\n      }\n      console.log('Created assessment:', createdAssessment);\n      return {\n        id: createdAssessment.id,\n        uniqueId: consequence.id,\n        // Return consequence ID for form matching\n        event: consequence.hazard.event.name,\n        hazard: consequence.hazard.description,\n        consequence: consequence.description,\n        currentControls: consequence.current_controls,\n        matrixType: createdAssessment.matrix_type.toUpperCase(),\n        probability: createdAssessment.probability,\n        severity: createdAssessment.severity,\n        likelihood: createdAssessment.likelihood,\n        impact: createdAssessment.impact,\n        tolerability: createdAssessment.tolerability\n      };\n    } catch (error) {\n      console.error('Error processing assessment:', error);\n      throw error;\n    }\n  });\n  try {\n    const results = await Promise.all(assessmentPromises);\n    console.log('Successfully created all assessments:', results);\n    return {\n      assessments: results\n    };\n  } catch (error) {\n    console.error('Error creating assessments:', error);\n    throw error;\n  }\n}\nexport async function updateAssessments(projectId, assessmentsData, matrixType) {\n  try {\n    console.log('Updating assessments for project:', projectId);\n    console.log('Assessments data:', assessmentsData);\n    const normalizedMatrixType = matrixType.toLowerCase();\n\n    // Update or create assessments for each consequence\n    const assessmentPromises = assessmentsData.assessments.map(async assessment => {\n      try {\n        // Check if an assessment already exists for this consequence\n        const {\n          data: existingAssessment,\n          error: fetchError\n        } = await supabase.from('hira_risk_assessments').select('*').eq('consequence_id', assessment.uniqueId).single();\n        if (fetchError && fetchError.code !== 'PGRST116') {\n          // PGRST116 is \"not found\" error\n          throw fetchError;\n        }\n        const assessmentData = {\n          consequence_id: assessment.uniqueId,\n          matrix_type: normalizedMatrixType,\n          probability: assessment.probability ? parseInt(assessment.probability) : null,\n          severity: assessment.severity || null,\n          likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\n          impact: assessment.impact ? parseInt(assessment.impact) : null,\n          tolerability: assessment.tolerability || null\n        };\n        let result;\n        if (existingAssessment) {\n          // Update existing assessment\n          const {\n            data,\n            error\n          } = await supabase.from('hira_risk_assessments').update(assessmentData).eq('id', existingAssessment.id).select().single();\n          if (error) throw error;\n          result = data;\n        } else {\n          // Create new assessment\n          const {\n            data,\n            error\n          } = await supabase.from('hira_risk_assessments').insert(assessmentData).select().single();\n          if (error) throw error;\n          result = data;\n        }\n\n        // Get the full consequence data for the response\n        const {\n          data: consequence,\n          error: consequenceError\n        } = await supabase.from('hira_consequences').select(`\n            id,\n            description,\n            current_controls,\n            hazard:hira_hazards!inner(\n              id,\n              description,\n              event:hira_events!inner(\n                id,\n                name\n              )\n            )\n          `).eq('id', assessment.uniqueId).single();\n        if (consequenceError) throw consequenceError;\n        return {\n          id: result.id,\n          uniqueId: consequence.id,\n          event: consequence.hazard.event.name,\n          hazard: consequence.hazard.description,\n          consequence: consequence.description,\n          currentControls: consequence.current_controls,\n          matrixType: result.matrix_type.toUpperCase(),\n          probability: result.probability,\n          severity: result.severity,\n          likelihood: result.likelihood,\n          impact: result.impact,\n          tolerability: result.tolerability\n        };\n      } catch (error) {\n        console.error('Error processing assessment:', error);\n        throw error;\n      }\n    });\n    const results = await Promise.all(assessmentPromises);\n    console.log('Successfully updated all assessments:', results);\n    return {\n      assessments: results\n    };\n  } catch (error) {\n    console.error('Error updating assessments:', error);\n    throw error;\n  }\n}\nexport async function getAssessmentsByProjectId(projectId) {\n  try {\n    console.log('Getting assessments for project:', projectId);\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_assessments').select(`\n        id,\n        matrix_type,\n        probability,\n        severity,\n        likelihood,\n        impact,\n        tolerability,\n        consequence:hira_consequences!inner(\n          id,\n          description,\n          current_controls,\n          hazard:hira_hazards!inner(\n            id,\n            description,\n            event:hira_events!inner(\n              id,\n              name,\n              project_id\n            )\n          )\n        )\n      `).eq('consequence.hazard.event.project_id', projectId);\n    if (error) throw error;\n    console.log('Found assessments:', data);\n    return data.map(assessment => ({\n      id: assessment.id,\n      uniqueId: assessment.consequence.id,\n      // Return consequence ID for form matching\n      event: assessment.consequence.hazard.event.name,\n      hazard: assessment.consequence.hazard.description,\n      consequence: assessment.consequence.description,\n      currentControls: assessment.consequence.current_controls,\n      matrixType: assessment.matrix_type.toUpperCase(),\n      probability: assessment.probability,\n      severity: assessment.severity,\n      likelihood: assessment.likelihood,\n      impact: assessment.impact,\n      tolerability: assessment.tolerability\n    }));\n  } catch (error) {\n    console.error('Error getting assessments:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","createAssessments","projectId","assessmentsData","matrixType","console","log","normalizedMatrixType","toLowerCase","assessmentPromises","assessments","map","assessment","data","consequence","error","consequenceError","from","select","eq","uniqueId","single","Error","createdAssessment","assessmentError","insert","consequence_id","id","matrix_type","probability","parseInt","severity","likelihood","impact","tolerability","event","hazard","name","description","currentControls","current_controls","toUpperCase","results","Promise","all","updateAssessments","existingAssessment","fetchError","code","assessmentData","result","update","getAssessmentsByProjectId"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/riskAssessmentService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function createAssessments(projectId, assessmentsData, matrixType) {\r\n  console.log('Creating assessments for project:', projectId);\r\n  console.log('Assessments data:', assessmentsData);\r\n  \r\n  // Convert matrix type to lowercase to match database constraint\r\n  const normalizedMatrixType = matrixType.toLowerCase();\r\n  \r\n  const assessmentPromises = assessmentsData.assessments.map(async assessment => {\r\n    try {\r\n      // Verify the consequence exists in hira_consequences\r\n      const { data: consequence, error: consequenceError } = await supabase\r\n        .from('hira_consequences')\r\n        .select(`\r\n          id,\r\n          description,\r\n          current_controls,\r\n          hazard:hira_hazards!inner(\r\n            id,\r\n            description,\r\n            event:hira_events!inner(\r\n              id,\r\n              name\r\n            )\r\n          )\r\n        `)\r\n        .eq('id', assessment.uniqueId) // uniqueId is the consequence ID from hazard identification\r\n        .single();\r\n\r\n      if (consequenceError) {\r\n        console.error('Error finding consequence:', consequenceError);\r\n        throw new Error(`Consequence not found: ${assessment.uniqueId}`);\r\n      }\r\n\r\n      if (!consequence) {\r\n        throw new Error(`No consequence found with ID: ${assessment.uniqueId}`);\r\n      }\r\n\r\n      console.log('Found consequence:', consequence);\r\n\r\n      // Create the risk assessment\r\n      const { data: createdAssessment, error: assessmentError } = await supabase\r\n        .from('hira_risk_assessments')\r\n        .insert({\r\n          consequence_id: consequence.id,\r\n          matrix_type: normalizedMatrixType,\r\n          probability: assessment.probability ? parseInt(assessment.probability) : null,\r\n          severity: assessment.severity || null,\r\n          likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\r\n          impact: assessment.impact ? parseInt(assessment.impact) : null,\r\n          tolerability: assessment.tolerability || null\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (assessmentError) {\r\n        console.error('Error creating assessment:', assessmentError);\r\n        throw assessmentError;\r\n      }\r\n\r\n      console.log('Created assessment:', createdAssessment);\r\n\r\n      return {\r\n        id: createdAssessment.id,\r\n        uniqueId: consequence.id, // Return consequence ID for form matching\r\n        event: consequence.hazard.event.name,\r\n        hazard: consequence.hazard.description,\r\n        consequence: consequence.description,\r\n        currentControls: consequence.current_controls,\r\n        matrixType: createdAssessment.matrix_type.toUpperCase(),\r\n        probability: createdAssessment.probability,\r\n        severity: createdAssessment.severity,\r\n        likelihood: createdAssessment.likelihood,\r\n        impact: createdAssessment.impact,\r\n        tolerability: createdAssessment.tolerability\r\n      };\r\n    } catch (error) {\r\n      console.error('Error processing assessment:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  try {\r\n    const results = await Promise.all(assessmentPromises);\r\n    console.log('Successfully created all assessments:', results);\r\n    return { assessments: results };\r\n  } catch (error) {\r\n    console.error('Error creating assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateAssessments(projectId, assessmentsData, matrixType) {\r\n  try {\r\n    console.log('Updating assessments for project:', projectId);\r\n    console.log('Assessments data:', assessmentsData);\r\n\r\n    const normalizedMatrixType = matrixType.toLowerCase();\r\n\r\n    // Update or create assessments for each consequence\r\n    const assessmentPromises = assessmentsData.assessments.map(async assessment => {\r\n      try {\r\n        // Check if an assessment already exists for this consequence\r\n        const { data: existingAssessment, error: fetchError } = await supabase\r\n          .from('hira_risk_assessments')\r\n          .select('*')\r\n          .eq('consequence_id', assessment.uniqueId)\r\n          .single();\r\n\r\n        if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 is \"not found\" error\r\n          throw fetchError;\r\n        }\r\n\r\n        const assessmentData = {\r\n          consequence_id: assessment.uniqueId,\r\n          matrix_type: normalizedMatrixType,\r\n          probability: assessment.probability ? parseInt(assessment.probability) : null,\r\n          severity: assessment.severity || null,\r\n          likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\r\n          impact: assessment.impact ? parseInt(assessment.impact) : null,\r\n          tolerability: assessment.tolerability || null\r\n        };\r\n\r\n        let result;\r\n        if (existingAssessment) {\r\n          // Update existing assessment\r\n          const { data, error } = await supabase\r\n            .from('hira_risk_assessments')\r\n            .update(assessmentData)\r\n            .eq('id', existingAssessment.id)\r\n            .select()\r\n            .single();\r\n\r\n          if (error) throw error;\r\n          result = data;\r\n        } else {\r\n          // Create new assessment\r\n          const { data, error } = await supabase\r\n            .from('hira_risk_assessments')\r\n            .insert(assessmentData)\r\n            .select()\r\n            .single();\r\n\r\n          if (error) throw error;\r\n          result = data;\r\n        }\r\n\r\n        // Get the full consequence data for the response\r\n        const { data: consequence, error: consequenceError } = await supabase\r\n          .from('hira_consequences')\r\n          .select(`\r\n            id,\r\n            description,\r\n            current_controls,\r\n            hazard:hira_hazards!inner(\r\n              id,\r\n              description,\r\n              event:hira_events!inner(\r\n                id,\r\n                name\r\n              )\r\n            )\r\n          `)\r\n          .eq('id', assessment.uniqueId)\r\n          .single();\r\n\r\n        if (consequenceError) throw consequenceError;\r\n\r\n        return {\r\n          id: result.id,\r\n          uniqueId: consequence.id,\r\n          event: consequence.hazard.event.name,\r\n          hazard: consequence.hazard.description,\r\n          consequence: consequence.description,\r\n          currentControls: consequence.current_controls,\r\n          matrixType: result.matrix_type.toUpperCase(),\r\n          probability: result.probability,\r\n          severity: result.severity,\r\n          likelihood: result.likelihood,\r\n          impact: result.impact,\r\n          tolerability: result.tolerability\r\n        };\r\n      } catch (error) {\r\n        console.error('Error processing assessment:', error);\r\n        throw error;\r\n      }\r\n    });\r\n\r\n    const results = await Promise.all(assessmentPromises);\r\n    console.log('Successfully updated all assessments:', results);\r\n    return { assessments: results };\r\n  } catch (error) {\r\n    console.error('Error updating assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getAssessmentsByProjectId(projectId) {\r\n  try {\r\n    console.log('Getting assessments for project:', projectId);\r\n\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_assessments')\r\n      .select(`\r\n        id,\r\n        matrix_type,\r\n        probability,\r\n        severity,\r\n        likelihood,\r\n        impact,\r\n        tolerability,\r\n        consequence:hira_consequences!inner(\r\n          id,\r\n          description,\r\n          current_controls,\r\n          hazard:hira_hazards!inner(\r\n            id,\r\n            description,\r\n            event:hira_events!inner(\r\n              id,\r\n              name,\r\n              project_id\r\n            )\r\n          )\r\n        )\r\n      `)\r\n      .eq('consequence.hazard.event.project_id', projectId);\r\n\r\n    if (error) throw error;\r\n\r\n    console.log('Found assessments:', data);\r\n\r\n    return data.map(assessment => ({\r\n      id: assessment.id,\r\n      uniqueId: assessment.consequence.id, // Return consequence ID for form matching\r\n      event: assessment.consequence.hazard.event.name,\r\n      hazard: assessment.consequence.hazard.description,\r\n      consequence: assessment.consequence.description,\r\n      currentControls: assessment.consequence.current_controls,\r\n      matrixType: assessment.matrix_type.toUpperCase(),\r\n      probability: assessment.probability,\r\n      severity: assessment.severity,\r\n      likelihood: assessment.likelihood,\r\n      impact: assessment.impact,\r\n      tolerability: assessment.tolerability\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error getting assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}