{"ast":null,"code":"/**\r\n * Generates a unique project ID with a specific format:\r\n * HIRA-YYYYMMDD-HHMMSS-XXX\r\n * where XXX is a random 3-digit number\r\n * @returns {string} Generated project ID\r\n */\nexport function generateProjectId() {\n  const now = new Date();\n\n  // Format date components\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n  const seconds = String(now.getSeconds()).padStart(2, '0');\n\n  // Generate random 3-digit number\n  const random = String(Math.floor(Math.random() * 1000)).padStart(3, '0');\n\n  // Combine all parts\n  return `HIRA-${year}${month}${day}-${hours}${minutes}${seconds}-${random}`;\n}\n\n/**\r\n * Validates a project ID format\r\n * @param {string} projectId - Project ID to validate\r\n * @returns {boolean} Whether the ID is valid\r\n */\nexport function isValidProjectId(projectId) {\n  const pattern = /^HIRA-\\d{8}-\\d{6}-\\d{3}$/;\n  return pattern.test(projectId);\n}\n\n/**\r\n * Extracts the timestamp from a project ID\r\n * @param {string} projectId - Project ID to parse\r\n * @returns {Date|null} Date object or null if invalid\r\n */\nexport function getProjectTimestamp(projectId) {\n  if (!isValidProjectId(projectId)) return null;\n  const [, datePart, timePart] = projectId.split('-');\n  const year = parseInt(datePart.substring(0, 4));\n  const month = parseInt(datePart.substring(4, 6)) - 1; // JS months are 0-based\n  const day = parseInt(datePart.substring(6, 8));\n  const hours = parseInt(timePart.substring(0, 2));\n  const minutes = parseInt(timePart.substring(2, 4));\n  const seconds = parseInt(timePart.substring(4, 6));\n  return new Date(year, month, day, hours, minutes, seconds);\n}\n\n/**\r\n * Compares two project IDs chronologically\r\n * @param {string} idA - First project ID\r\n * @param {string} idB - Second project ID\r\n * @returns {number} -1 if A is earlier, 1 if B is earlier, 0 if equal\r\n */\nexport function compareProjectIds(idA, idB) {\n  var _getProjectTimestamp, _getProjectTimestamp2;\n  const timeA = (_getProjectTimestamp = getProjectTimestamp(idA)) === null || _getProjectTimestamp === void 0 ? void 0 : _getProjectTimestamp.getTime();\n  const timeB = (_getProjectTimestamp2 = getProjectTimestamp(idB)) === null || _getProjectTimestamp2 === void 0 ? void 0 : _getProjectTimestamp2.getTime();\n  if (!timeA || !timeB) return 0;\n  if (timeA < timeB) return -1;\n  if (timeA > timeB) return 1;\n  return 0;\n}\n\n/**\r\n * Gets a human-readable string from a project ID\r\n * @param {string} projectId - Project ID to format\r\n * @returns {string} Formatted string or original ID if invalid\r\n */\nexport function formatProjectId(projectId) {\n  const timestamp = getProjectTimestamp(projectId);\n  if (!timestamp) return projectId;\n  const [,, randomPart] = projectId.split('-');\n  const dateStr = timestamp.toLocaleDateString();\n  const timeStr = timestamp.toLocaleTimeString();\n  return `${dateStr} ${timeStr} (${randomPart})`;\n}","map":{"version":3,"names":["generateProjectId","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","random","Math","floor","isValidProjectId","projectId","pattern","test","getProjectTimestamp","datePart","timePart","split","parseInt","substring","compareProjectIds","idA","idB","_getProjectTimestamp","_getProjectTimestamp2","timeA","getTime","timeB","formatProjectId","timestamp","randomPart","dateStr","toLocaleDateString","timeStr","toLocaleTimeString"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/utils/projectIdGenerator.js"],"sourcesContent":["/**\r\n * Generates a unique project ID with a specific format:\r\n * HIRA-YYYYMMDD-HHMMSS-XXX\r\n * where XXX is a random 3-digit number\r\n * @returns {string} Generated project ID\r\n */\r\nexport function generateProjectId() {\r\n  const now = new Date();\r\n  \r\n  // Format date components\r\n  const year = now.getFullYear();\r\n  const month = String(now.getMonth() + 1).padStart(2, '0');\r\n  const day = String(now.getDate()).padStart(2, '0');\r\n  const hours = String(now.getHours()).padStart(2, '0');\r\n  const minutes = String(now.getMinutes()).padStart(2, '0');\r\n  const seconds = String(now.getSeconds()).padStart(2, '0');\r\n  \r\n  // Generate random 3-digit number\r\n  const random = String(Math.floor(Math.random() * 1000)).padStart(3, '0');\r\n  \r\n  // Combine all parts\r\n  return `HIRA-${year}${month}${day}-${hours}${minutes}${seconds}-${random}`;\r\n}\r\n\r\n/**\r\n * Validates a project ID format\r\n * @param {string} projectId - Project ID to validate\r\n * @returns {boolean} Whether the ID is valid\r\n */\r\nexport function isValidProjectId(projectId) {\r\n  const pattern = /^HIRA-\\d{8}-\\d{6}-\\d{3}$/;\r\n  return pattern.test(projectId);\r\n}\r\n\r\n/**\r\n * Extracts the timestamp from a project ID\r\n * @param {string} projectId - Project ID to parse\r\n * @returns {Date|null} Date object or null if invalid\r\n */\r\nexport function getProjectTimestamp(projectId) {\r\n  if (!isValidProjectId(projectId)) return null;\r\n  \r\n  const [, datePart, timePart] = projectId.split('-');\r\n  \r\n  const year = parseInt(datePart.substring(0, 4));\r\n  const month = parseInt(datePart.substring(4, 6)) - 1; // JS months are 0-based\r\n  const day = parseInt(datePart.substring(6, 8));\r\n  const hours = parseInt(timePart.substring(0, 2));\r\n  const minutes = parseInt(timePart.substring(2, 4));\r\n  const seconds = parseInt(timePart.substring(4, 6));\r\n  \r\n  return new Date(year, month, day, hours, minutes, seconds);\r\n}\r\n\r\n/**\r\n * Compares two project IDs chronologically\r\n * @param {string} idA - First project ID\r\n * @param {string} idB - Second project ID\r\n * @returns {number} -1 if A is earlier, 1 if B is earlier, 0 if equal\r\n */\r\nexport function compareProjectIds(idA, idB) {\r\n  const timeA = getProjectTimestamp(idA)?.getTime();\r\n  const timeB = getProjectTimestamp(idB)?.getTime();\r\n  \r\n  if (!timeA || !timeB) return 0;\r\n  if (timeA < timeB) return -1;\r\n  if (timeA > timeB) return 1;\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Gets a human-readable string from a project ID\r\n * @param {string} projectId - Project ID to format\r\n * @returns {string} Formatted string or original ID if invalid\r\n */\r\nexport function formatProjectId(projectId) {\r\n  const timestamp = getProjectTimestamp(projectId);\r\n  if (!timestamp) return projectId;\r\n  \r\n  const [, , randomPart] = projectId.split('-');\r\n  const dateStr = timestamp.toLocaleDateString();\r\n  const timeStr = timestamp.toLocaleTimeString();\r\n  \r\n  return `${dateStr} ${timeStr} (${randomPart})`;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}