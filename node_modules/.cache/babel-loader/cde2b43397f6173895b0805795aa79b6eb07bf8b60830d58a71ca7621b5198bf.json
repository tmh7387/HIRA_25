{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Test connection and log status\nsupabase.from('hira_projects').select('count', {\n  count: 'exact',\n  head: true\n}).then(({\n  error\n}) => {\n  if (error) {\n    console.error('Supabase connection error:', error.message);\n  } else {\n    console.log('Successfully connected to Supabase');\n  }\n}).catch(err => {\n  console.error('Failed to test Supabase connection:', err.message);\n});\n\n// Constants for file upload limits\nconst MAX_FILES = 5;\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\nconst BUCKET_NAME = 'hira-files';\nconst SUBFOLDER = 'operational-images';\n\n// Helper function to validate files\nexport const validateFiles = (newFiles, existingFiles = []) => {\n  console.log('Validating files:', {\n    newFiles: newFiles.map(f => ({\n      name: f.name,\n      size: f.size\n    })),\n    existingFiles: existingFiles.map(f => ({\n      name: f.name,\n      size: f.size\n    }))\n  });\n  const totalFiles = existingFiles.length + newFiles.length;\n  if (totalFiles > MAX_FILES) {\n    console.error('File count validation failed:', {\n      totalFiles,\n      MAX_FILES\n    });\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\n  }\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\n  const totalSize = existingSize + newSize;\n  console.log('Size validation:', {\n    existingSize: formatFileSize(existingSize),\n    newSize: formatFileSize(newSize),\n    totalSize: formatFileSize(totalSize),\n    maxSize: formatFileSize(MAX_TOTAL_SIZE)\n  });\n  if (totalSize > MAX_TOTAL_SIZE) {\n    console.error('File size validation failed:', {\n      totalSize,\n      MAX_TOTAL_SIZE\n    });\n    throw new Error(`Total file size cannot exceed 50MB`);\n  }\n  console.log('File validation passed');\n  return true;\n};\n\n// Helper functions for common operations\nexport const uploadFile = async (file, existingFiles = []) => {\n  console.log('Starting file upload:', {\n    fileName: file.name,\n    fileSize: formatFileSize(file.size),\n    fileType: file.type\n  });\n  try {\n    // Validate the new file\n    validateFiles([file], existingFiles);\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${Date.now()}.${fileExt}`;\n    const filePath = `${SUBFOLDER}/${fileName}`;\n    console.log('Uploading file to Supabase:', {\n      bucket: BUCKET_NAME,\n      filePath,\n      fileSize: formatFileSize(file.size)\n    });\n\n    // Upload the file\n    const {\n      data,\n      error\n    } = await supabase.storage.from(BUCKET_NAME).upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false\n    });\n    if (error) {\n      console.error('Supabase upload error:', error);\n      throw error;\n    }\n    console.log('File uploaded successfully:', {\n      filePath,\n      data\n    });\n\n    // Get the public URL\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from(BUCKET_NAME).getPublicUrl(filePath);\n    console.log('Generated public URL:', publicUrl);\n    return {\n      url: publicUrl,\n      path: filePath,\n      name: file.name,\n      size: file.size,\n      type: file.type\n    };\n  } catch (error) {\n    console.error('File upload error:', error);\n    throw error;\n  }\n};\nexport const deleteFile = async path => {\n  console.log('Attempting to delete file:', path);\n  try {\n    if (!path.startsWith(SUBFOLDER)) {\n      path = `${SUBFOLDER}/${path}`;\n    }\n    console.log('Deleting file from Supabase:', {\n      bucket: BUCKET_NAME,\n      path\n    });\n    const {\n      error\n    } = await supabase.storage.from(BUCKET_NAME).remove([path]);\n    if (error) {\n      console.error('Supabase delete error:', error);\n      throw error;\n    }\n    console.log('File deleted successfully');\n  } catch (error) {\n    console.error('File deletion error:', error);\n    throw error;\n  }\n};\n\n// Helper function to get file size in readable format\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","from","select","count","head","then","error","console","message","log","catch","err","MAX_FILES","MAX_TOTAL_SIZE","BUCKET_NAME","SUBFOLDER","validateFiles","newFiles","existingFiles","map","f","name","size","totalFiles","length","existingSize","reduce","total","file","newSize","totalSize","formatFileSize","maxSize","uploadFile","fileName","fileSize","fileType","type","fileExt","split","pop","Date","now","filePath","bucket","data","storage","upload","cacheControl","upsert","publicUrl","getPublicUrl","url","path","deleteFile","startsWith","remove","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Test connection and log status\r\nsupabase.from('hira_projects')\r\n  .select('count', { count: 'exact', head: true })\r\n  .then(({ error }) => {\r\n    if (error) {\r\n      console.error('Supabase connection error:', error.message);\r\n    } else {\r\n      console.log('Successfully connected to Supabase');\r\n    }\r\n  })\r\n  .catch(err => {\r\n    console.error('Failed to test Supabase connection:', err.message);\r\n  });\r\n\r\n// Constants for file upload limits\r\nconst MAX_FILES = 5;\r\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\r\nconst BUCKET_NAME = 'hira-files';\r\nconst SUBFOLDER = 'operational-images';\r\n\r\n// Helper function to validate files\r\nexport const validateFiles = (newFiles, existingFiles = []) => {\r\n  console.log('Validating files:', { \r\n    newFiles: newFiles.map(f => ({ name: f.name, size: f.size })),\r\n    existingFiles: existingFiles.map(f => ({ name: f.name, size: f.size }))\r\n  });\r\n\r\n  const totalFiles = existingFiles.length + newFiles.length;\r\n  if (totalFiles > MAX_FILES) {\r\n    console.error('File count validation failed:', { totalFiles, MAX_FILES });\r\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\r\n  }\r\n\r\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\r\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\r\n  const totalSize = existingSize + newSize;\r\n\r\n  console.log('Size validation:', { \r\n    existingSize: formatFileSize(existingSize),\r\n    newSize: formatFileSize(newSize),\r\n    totalSize: formatFileSize(totalSize),\r\n    maxSize: formatFileSize(MAX_TOTAL_SIZE)\r\n  });\r\n\r\n  if (totalSize > MAX_TOTAL_SIZE) {\r\n    console.error('File size validation failed:', { totalSize, MAX_TOTAL_SIZE });\r\n    throw new Error(`Total file size cannot exceed 50MB`);\r\n  }\r\n\r\n  console.log('File validation passed');\r\n  return true;\r\n};\r\n\r\n// Helper functions for common operations\r\nexport const uploadFile = async (file, existingFiles = []) => {\r\n  console.log('Starting file upload:', { \r\n    fileName: file.name,\r\n    fileSize: formatFileSize(file.size),\r\n    fileType: file.type\r\n  });\r\n\r\n  try {\r\n    // Validate the new file\r\n    validateFiles([file], existingFiles);\r\n\r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${Date.now()}.${fileExt}`;\r\n    const filePath = `${SUBFOLDER}/${fileName}`;\r\n\r\n    console.log('Uploading file to Supabase:', { \r\n      bucket: BUCKET_NAME,\r\n      filePath,\r\n      fileSize: formatFileSize(file.size)\r\n    });\r\n\r\n    // Upload the file\r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .upload(filePath, file, {\r\n        cacheControl: '3600',\r\n        upsert: false\r\n      });\r\n\r\n    if (error) {\r\n      console.error('Supabase upload error:', error);\r\n      throw error;\r\n    }\r\n\r\n    console.log('File uploaded successfully:', { filePath, data });\r\n\r\n    // Get the public URL\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .getPublicUrl(filePath);\r\n\r\n    console.log('Generated public URL:', publicUrl);\r\n\r\n    return {\r\n      url: publicUrl,\r\n      path: filePath,\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type\r\n    };\r\n  } catch (error) {\r\n    console.error('File upload error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const deleteFile = async (path) => {\r\n  console.log('Attempting to delete file:', path);\r\n\r\n  try {\r\n    if (!path.startsWith(SUBFOLDER)) {\r\n      path = `${SUBFOLDER}/${path}`;\r\n    }\r\n\r\n    console.log('Deleting file from Supabase:', { bucket: BUCKET_NAME, path });\r\n\r\n    const { error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .remove([path]);\r\n\r\n    if (error) {\r\n      console.error('Supabase delete error:', error);\r\n      throw error;\r\n    }\r\n\r\n    console.log('File deleted successfully');\r\n  } catch (error) {\r\n    console.error('File deletion error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to get file size in readable format\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}