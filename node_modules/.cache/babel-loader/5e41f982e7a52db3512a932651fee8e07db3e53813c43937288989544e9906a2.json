{"ast":null,"code":"import { supabase } from './supabase';\nexport const controlService = {\n  async createRiskControl(assessment_id, controlData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_risk_controls').insert({\n        assessment_id: assessment_id,\n        additional_mitigation: controlData.additional_mitigation,\n        risk_owner: controlData.risk_owner,\n        target_date: controlData.target_date,\n        date_implemented: controlData.date_implemented,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error creating risk control:', error);\n      throw error;\n    }\n  },\n  async updateRiskControl(controlId, controlData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_risk_controls').update({\n        additional_mitigation: controlData.additional_mitigation,\n        risk_owner: controlData.risk_owner,\n        target_date: controlData.target_date,\n        date_implemented: controlData.date_implemented,\n        updated_at: new Date().toISOString()\n      }).eq('id', controlId).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating risk control:', error);\n      throw error;\n    }\n  },\n  async getRiskControlByAssessmentId(assessment_id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_risk_controls').select(`\n          id,\n          assessment_id,\n          additional_mitigation,\n          risk_owner,\n          target_date,\n          date_implemented\n        `).eq('assessment_id', assessment_id).single();\n      if (error && error.code !== 'PGRST116') {\n        // Ignore \"not found\" error\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Error getting risk control:', error);\n      throw error;\n    }\n  },\n  async deleteRiskControl(controlId) {\n    try {\n      const {\n        error\n      } = await supabase.from('hira_risk_controls').delete().eq('id', controlId);\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error deleting risk control:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","controlService","createRiskControl","assessment_id","controlData","data","error","from","insert","additional_mitigation","risk_owner","target_date","date_implemented","created_at","Date","toISOString","updated_at","select","single","console","updateRiskControl","controlId","update","eq","getRiskControlByAssessmentId","code","deleteRiskControl","delete"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/controlService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const controlService = {\r\n  async createRiskControl(assessment_id, controlData) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_risk_controls')\r\n        .insert({\r\n          assessment_id: assessment_id,\r\n          additional_mitigation: controlData.additional_mitigation,\r\n          risk_owner: controlData.risk_owner,\r\n          target_date: controlData.target_date,\r\n          date_implemented: controlData.date_implemented,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error creating risk control:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateRiskControl(controlId, controlData) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_risk_controls')\r\n        .update({\r\n          additional_mitigation: controlData.additional_mitigation,\r\n          risk_owner: controlData.risk_owner,\r\n          target_date: controlData.target_date,\r\n          date_implemented: controlData.date_implemented,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', controlId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error updating risk control:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getRiskControlByAssessmentId(assessment_id) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_risk_controls')\r\n        .select(`\r\n          id,\r\n          assessment_id,\r\n          additional_mitigation,\r\n          risk_owner,\r\n          target_date,\r\n          date_implemented\r\n        `)\r\n        .eq('assessment_id', assessment_id)\r\n        .single();\r\n\r\n      if (error && error.code !== 'PGRST116') { // Ignore \"not found\" error\r\n        throw error;\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting risk control:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteRiskControl(controlId) {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('hira_risk_controls')\r\n        .delete()\r\n        .eq('id', controlId);\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      console.error('Error deleting risk control:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}