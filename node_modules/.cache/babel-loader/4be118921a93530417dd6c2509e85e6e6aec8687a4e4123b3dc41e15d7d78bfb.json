{"ast":null,"code":"import { create } from 'zustand';\nimport { supabase } from '../services/supabase';\nconst useProjectStore = create((set, get) => ({\n  projects: [],\n  currentProject: null,\n  currentStep: 0,\n  isLoading: false,\n  error: null,\n  setCurrentProject: project => set({\n    currentProject: project\n  }),\n  setCurrentStep: step => set({\n    currentStep: step\n  }),\n  loadProjects: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').select('*').order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n      set({\n        projects: data\n      });\n    } catch (error) {\n      console.error('Load projects error:', error);\n      set({\n        error: error.message\n      });\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  createProject: async projectData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').insert([projectData]).select().single();\n      if (error) throw error;\n      set(state => ({\n        projects: [data, ...state.projects],\n        currentProject: data\n      }));\n      return data;\n    } catch (error) {\n      console.error('Create project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  updateProject: async (id, projectData) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').update(projectData).eq('id', id).select().single();\n      if (error) throw error;\n      set(state => ({\n        projects: state.projects.map(p => p.id === id ? data : p),\n        currentProject: data\n      }));\n      return data;\n    } catch (error) {\n      console.error('Update project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  deleteProject: async id => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        error\n      } = await supabase.from('hira_projects').delete().eq('id', id);\n      if (error) throw error;\n      set(state => ({\n        projects: state.projects.filter(p => p.id !== id),\n        currentProject: null\n      }));\n    } catch (error) {\n      console.error('Delete project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  }\n}));\nexport default useProjectStore;","map":{"version":3,"names":["create","supabase","useProjectStore","set","get","projects","currentProject","currentStep","isLoading","error","setCurrentProject","project","setCurrentStep","step","loadProjects","data","from","select","order","ascending","console","message","createProject","projectData","insert","single","state","updateProject","id","update","eq","map","p","deleteProject","delete","filter"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/stores/projectStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { supabase } from '../services/supabase';\r\n\r\nconst useProjectStore = create((set, get) => ({\r\n  projects: [],\r\n  currentProject: null,\r\n  currentStep: 0,\r\n  isLoading: false,\r\n  error: null,\r\n\r\n  setCurrentProject: (project) => set({ currentProject: project }),\r\n  \r\n  setCurrentStep: (step) => set({ currentStep: step }),\r\n\r\n  loadProjects: async () => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      set({ projects: data });\r\n    } catch (error) {\r\n      console.error('Load projects error:', error);\r\n      set({ error: error.message });\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  createProject: async (projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .insert([projectData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: [data, ...state.projects],\r\n        currentProject: data\r\n      }));\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Create project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  updateProject: async (id, projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .update(projectData)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: state.projects.map((p) =>\r\n          p.id === id ? data : p\r\n        ),\r\n        currentProject: data\r\n      }));\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Update project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  deleteProject: async (id) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { error } = await supabase\r\n        .from('hira_projects')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: state.projects.filter((p) => p.id !== id),\r\n        currentProject: null\r\n      }));\r\n    } catch (error) {\r\n      console.error('Delete project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  }\r\n}));\r\n\r\nexport default useProjectStore;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}