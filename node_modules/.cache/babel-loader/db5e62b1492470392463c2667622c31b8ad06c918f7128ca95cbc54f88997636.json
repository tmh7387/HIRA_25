{"ast":null,"code":"import { supabase } from './supabase';\nexport const projectService = {\n  // Save event and all its related data\n  async saveEvent(projectId, eventData) {\n    try {\n      console.log('Saving event for project:', projectId, eventData);\n      let event;\n      // Check if event already exists\n      if (eventData.uniqueId) {\n        const {\n          data: existingEvent,\n          error: fetchError\n        } = await supabase.from('hira_events').select('*').eq('id', eventData.uniqueId).single();\n        if (!fetchError && existingEvent) {\n          // Update existing event\n          const {\n            data: updatedEvent,\n            error: updateError\n          } = await supabase.from('hira_events').update({\n            name: eventData.name,\n            updated_at: new Date().toISOString()\n          }).eq('id', eventData.uniqueId).select().single();\n          if (updateError) throw updateError;\n          event = updatedEvent;\n        }\n      }\n\n      // If event doesn't exist, create new one\n      if (!event) {\n        const {\n          data: newEvent,\n          error: createError\n        } = await supabase.from('hira_events').insert({\n          project_id: projectId,\n          name: eventData.name,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select().single();\n        if (createError) throw createError;\n        event = newEvent;\n      }\n      console.log('Event saved:', event);\n\n      // Then save each hazard for this event\n      for (const hazard of eventData.hazards) {\n        const {\n          data: hazardData,\n          error: hazardError\n        } = await supabase.from('hira_hazards').insert({\n          event_id: event.id,\n          description: hazard.description,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select().single();\n        if (hazardError) {\n          console.error('Error saving hazard:', hazardError);\n          throw hazardError;\n        }\n        console.log('Hazard saved:', hazardData);\n\n        // Save consequences for this hazard\n        const savedConsequences = [];\n        for (const consequence of hazard.consequences) {\n          const {\n            data: consequenceData,\n            error: consequenceError\n          } = await supabase.from('hira_consequences').insert({\n            hazard_id: hazardData.id,\n            description: consequence.description,\n            current_controls: consequence.currentControls,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }).select().single();\n          if (consequenceError) {\n            console.error('Error saving consequence:', consequenceError);\n            throw consequenceError;\n          }\n          console.log('Consequence saved:', consequenceData);\n          savedConsequences.push({\n            ...consequence,\n            uniqueId: consequenceData.id // Update uniqueId to match database ID\n          });\n        }\n\n        // Update hazard with saved consequences\n        hazard.consequences = savedConsequences;\n      }\n      return event;\n    } catch (error) {\n      console.error('Error in saveEvent:', error);\n      throw error;\n    }\n  },\n  // Load all events and related data for a project\n  async loadProjectData(projectId) {\n    try {\n      console.log('Loading project data:', projectId);\n\n      // Get all events for the project with their related data\n      const {\n        data: events,\n        error: eventsError\n      } = await supabase.from('hira_events').select(`\n          id,\n          name,\n          hira_hazards (\n            id,\n            description,\n            hira_consequences (\n              id,\n              description,\n              current_controls\n            )\n          )\n        `).eq('project_id', projectId);\n      if (eventsError) {\n        console.error('Error loading events:', eventsError);\n        throw eventsError;\n      }\n      console.log('Loaded events:', events);\n\n      // Transform the data to match the frontend structure\n      return events.map(event => ({\n        uniqueId: event.id,\n        name: event.name,\n        hazards: event.hira_hazards.map(hazard => ({\n          uniqueId: hazard.id,\n          description: hazard.description,\n          consequences: hazard.hira_consequences.map(consequence => ({\n            uniqueId: consequence.id,\n            // Use database ID as uniqueId\n            description: consequence.description,\n            currentControls: consequence.current_controls\n          }))\n        }))\n      }));\n    } catch (error) {\n      console.error('Error in loadProjectData:', error);\n      throw error;\n    }\n  },\n  // Delete all data for a project\n  async deleteProjectData(projectId) {\n    try {\n      console.log('Deleting project data:', projectId);\n\n      // First get all events for this project\n      const {\n        data: events,\n        error: eventsQueryError\n      } = await supabase.from('hira_events').select('id').eq('project_id', projectId);\n      if (eventsQueryError) throw eventsQueryError;\n\n      // Get all hazards for these events\n      const {\n        data: hazards,\n        error: hazardsQueryError\n      } = await supabase.from('hira_hazards').select('id').in('event_id', events.map(e => e.id));\n      if (hazardsQueryError) throw hazardsQueryError;\n\n      // Get all consequences for these hazards\n      const {\n        data: consequences,\n        error: consequencesQueryError\n      } = await supabase.from('hira_consequences').select('id').in('hazard_id', hazards.map(h => h.id));\n      if (consequencesQueryError) throw consequencesQueryError;\n\n      // Delete risk assessments linked to these consequences\n      const {\n        error: assessmentsError\n      } = await supabase.from('hira_risk_assessments').delete().in('consequence_id', consequences.map(c => c.id));\n      if (assessmentsError) throw assessmentsError;\n\n      // Delete consequences\n      const {\n        error: consequencesError\n      } = await supabase.from('hira_consequences').delete().in('hazard_id', hazards.map(h => h.id));\n      if (consequencesError) throw consequencesError;\n\n      // Delete hazards\n      const {\n        error: hazardsError\n      } = await supabase.from('hira_hazards').delete().in('event_id', events.map(e => e.id));\n      if (hazardsError) throw hazardsError;\n\n      // Delete events\n      const {\n        error: eventsError\n      } = await supabase.from('hira_events').delete().eq('project_id', projectId);\n      if (eventsError) throw eventsError;\n      console.log('Project data deleted successfully');\n    } catch (error) {\n      console.error('Error in deleteProjectData:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","projectService","saveEvent","projectId","eventData","console","log","event","uniqueId","data","existingEvent","error","fetchError","from","select","eq","single","updatedEvent","updateError","update","name","updated_at","Date","toISOString","newEvent","createError","insert","project_id","created_at","hazard","hazards","hazardData","hazardError","event_id","id","description","savedConsequences","consequence","consequences","consequenceData","consequenceError","hazard_id","current_controls","currentControls","push","loadProjectData","events","eventsError","map","hira_hazards","hira_consequences","deleteProjectData","eventsQueryError","hazardsQueryError","in","e","consequencesQueryError","h","assessmentsError","delete","c","consequencesError","hazardsError"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/projectService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const projectService = {\r\n  // Save event and all its related data\r\n  async saveEvent(projectId, eventData) {\r\n    try {\r\n      console.log('Saving event for project:', projectId, eventData);\r\n\r\n      let event;\r\n      // Check if event already exists\r\n      if (eventData.uniqueId) {\r\n        const { data: existingEvent, error: fetchError } = await supabase\r\n          .from('hira_events')\r\n          .select('*')\r\n          .eq('id', eventData.uniqueId)\r\n          .single();\r\n\r\n        if (!fetchError && existingEvent) {\r\n          // Update existing event\r\n          const { data: updatedEvent, error: updateError } = await supabase\r\n            .from('hira_events')\r\n            .update({\r\n              name: eventData.name,\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', eventData.uniqueId)\r\n            .select()\r\n            .single();\r\n\r\n          if (updateError) throw updateError;\r\n          event = updatedEvent;\r\n        }\r\n      }\r\n\r\n      // If event doesn't exist, create new one\r\n      if (!event) {\r\n        const { data: newEvent, error: createError } = await supabase\r\n          .from('hira_events')\r\n          .insert({\r\n            project_id: projectId,\r\n            name: eventData.name,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) throw createError;\r\n        event = newEvent;\r\n      }\r\n\r\n      console.log('Event saved:', event);\r\n\r\n      // Then save each hazard for this event\r\n      for (const hazard of eventData.hazards) {\r\n        const { data: hazardData, error: hazardError } = await supabase\r\n          .from('hira_hazards')\r\n          .insert({\r\n            event_id: event.id,\r\n            description: hazard.description,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (hazardError) {\r\n          console.error('Error saving hazard:', hazardError);\r\n          throw hazardError;\r\n        }\r\n\r\n        console.log('Hazard saved:', hazardData);\r\n\r\n        // Save consequences for this hazard\r\n        const savedConsequences = [];\r\n        for (const consequence of hazard.consequences) {\r\n          const { data: consequenceData, error: consequenceError } = await supabase\r\n            .from('hira_consequences')\r\n            .insert({\r\n              hazard_id: hazardData.id,\r\n              description: consequence.description,\r\n              current_controls: consequence.currentControls,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .select()\r\n            .single();\r\n\r\n          if (consequenceError) {\r\n            console.error('Error saving consequence:', consequenceError);\r\n            throw consequenceError;\r\n          }\r\n\r\n          console.log('Consequence saved:', consequenceData);\r\n          savedConsequences.push({\r\n            ...consequence,\r\n            uniqueId: consequenceData.id // Update uniqueId to match database ID\r\n          });\r\n        }\r\n\r\n        // Update hazard with saved consequences\r\n        hazard.consequences = savedConsequences;\r\n      }\r\n\r\n      return event;\r\n    } catch (error) {\r\n      console.error('Error in saveEvent:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Load all events and related data for a project\r\n  async loadProjectData(projectId) {\r\n    try {\r\n      console.log('Loading project data:', projectId);\r\n\r\n      // Get all events for the project with their related data\r\n      const { data: events, error: eventsError } = await supabase\r\n        .from('hira_events')\r\n        .select(`\r\n          id,\r\n          name,\r\n          hira_hazards (\r\n            id,\r\n            description,\r\n            hira_consequences (\r\n              id,\r\n              description,\r\n              current_controls\r\n            )\r\n          )\r\n        `)\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsError) {\r\n        console.error('Error loading events:', eventsError);\r\n        throw eventsError;\r\n      }\r\n\r\n      console.log('Loaded events:', events);\r\n\r\n      // Transform the data to match the frontend structure\r\n      return events.map(event => ({\r\n        uniqueId: event.id,\r\n        name: event.name,\r\n        hazards: event.hira_hazards.map(hazard => ({\r\n          uniqueId: hazard.id,\r\n          description: hazard.description,\r\n          consequences: hazard.hira_consequences.map(consequence => ({\r\n            uniqueId: consequence.id, // Use database ID as uniqueId\r\n            description: consequence.description,\r\n            currentControls: consequence.current_controls\r\n          }))\r\n        }))\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error in loadProjectData:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete all data for a project\r\n  async deleteProjectData(projectId) {\r\n    try {\r\n      console.log('Deleting project data:', projectId);\r\n\r\n      // First get all events for this project\r\n      const { data: events, error: eventsQueryError } = await supabase\r\n        .from('hira_events')\r\n        .select('id')\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsQueryError) throw eventsQueryError;\r\n\r\n      // Get all hazards for these events\r\n      const { data: hazards, error: hazardsQueryError } = await supabase\r\n        .from('hira_hazards')\r\n        .select('id')\r\n        .in('event_id', events.map(e => e.id));\r\n\r\n      if (hazardsQueryError) throw hazardsQueryError;\r\n\r\n      // Get all consequences for these hazards\r\n      const { data: consequences, error: consequencesQueryError } = await supabase\r\n        .from('hira_consequences')\r\n        .select('id')\r\n        .in('hazard_id', hazards.map(h => h.id));\r\n\r\n      if (consequencesQueryError) throw consequencesQueryError;\r\n\r\n      // Delete risk assessments linked to these consequences\r\n      const { error: assessmentsError } = await supabase\r\n        .from('hira_risk_assessments')\r\n        .delete()\r\n        .in('consequence_id', consequences.map(c => c.id));\r\n\r\n      if (assessmentsError) throw assessmentsError;\r\n\r\n      // Delete consequences\r\n      const { error: consequencesError } = await supabase\r\n        .from('hira_consequences')\r\n        .delete()\r\n        .in('hazard_id', hazards.map(h => h.id));\r\n\r\n      if (consequencesError) throw consequencesError;\r\n\r\n      // Delete hazards\r\n      const { error: hazardsError } = await supabase\r\n        .from('hira_hazards')\r\n        .delete()\r\n        .in('event_id', events.map(e => e.id));\r\n\r\n      if (hazardsError) throw hazardsError;\r\n\r\n      // Delete events\r\n      const { error: eventsError } = await supabase\r\n        .from('hira_events')\r\n        .delete()\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsError) throw eventsError;\r\n\r\n      console.log('Project data deleted successfully');\r\n    } catch (error) {\r\n      console.error('Error in deleteProjectData:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}