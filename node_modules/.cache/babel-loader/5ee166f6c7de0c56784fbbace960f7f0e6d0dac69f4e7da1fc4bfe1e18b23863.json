{"ast":null,"code":"import { RISK_MATRIX } from '../constants/icaoMatrix';\nimport { calculateRiskLevel } from '../constants/integratedMatrix';\nexport function calculateICAORiskTolerability(probability, severity) {\n  const riskIndex = `${probability}${severity}`;\n  return RISK_MATRIX[riskIndex] || 'ACCEPTABLE';\n}\nexport function calculateRiskRating(probability, severity) {\n  const riskLevel = calculateRiskLevel(severity, probability);\n  switch (riskLevel) {\n    case 'RED':\n      return 'HIGH';\n    case 'AMBER':\n      return 'MODERATE';\n    case 'YELLOW':\n      return 'MEDIUM';\n    case 'GREEN':\n      return 'LOW';\n    default:\n      return 'LOW';\n  }\n}\nexport function calculateHighestRisk(assessments, matrixType) {\n  if (!assessments || assessments.length === 0) {\n    return matrixType === 'ICAO' ? 'ACCEPTABLE' : 'LOW';\n  }\n  if (matrixType === 'ICAO') {\n    // ICAO risk levels in order of severity\n    const icaoRiskLevels = ['ACCEPTABLE', 'TOLERABLE', 'INTOLERABLE'];\n    let highestRiskIndex = 0;\n    for (const assessment of assessments) {\n      const currentRisk = calculateICAORiskTolerability(assessment.probability, assessment.severity);\n      const currentRiskIndex = icaoRiskLevels.indexOf(currentRisk);\n      if (currentRiskIndex > highestRiskIndex) {\n        highestRiskIndex = currentRiskIndex;\n      }\n    }\n    return icaoRiskLevels[highestRiskIndex];\n  } else {\n    // Integrated risk levels in order of severity\n    const integratedRiskLevels = ['LOW', 'MEDIUM', 'MODERATE', 'HIGH'];\n    let highestRiskIndex = 0;\n    for (const assessment of assessments) {\n      const currentRisk = calculateRiskRating(assessment.likelihood, assessment.impact);\n      const currentRiskIndex = integratedRiskLevels.indexOf(currentRisk);\n      if (currentRiskIndex > highestRiskIndex) {\n        highestRiskIndex = currentRiskIndex;\n      }\n    }\n    return integratedRiskLevels[highestRiskIndex];\n  }\n}","map":{"version":3,"names":["RISK_MATRIX","calculateRiskLevel","calculateICAORiskTolerability","probability","severity","riskIndex","calculateRiskRating","riskLevel","calculateHighestRisk","assessments","matrixType","length","icaoRiskLevels","highestRiskIndex","assessment","currentRisk","currentRiskIndex","indexOf","integratedRiskLevels","likelihood","impact"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/utils/riskCalculations.js"],"sourcesContent":["import { RISK_MATRIX } from '../constants/icaoMatrix';\nimport { calculateRiskLevel } from '../constants/integratedMatrix';\n\nexport function calculateICAORiskTolerability(probability, severity) {\n  const riskIndex = `${probability}${severity}`;\n  return RISK_MATRIX[riskIndex] || 'ACCEPTABLE';\n}\n\nexport function calculateRiskRating(probability, severity) {\n  const riskLevel = calculateRiskLevel(severity, probability);\n  switch (riskLevel) {\n    case 'RED':\n      return 'HIGH';\n    case 'AMBER':\n      return 'MODERATE';\n    case 'YELLOW':\n      return 'MEDIUM';\n    case 'GREEN':\n      return 'LOW';\n    default:\n      return 'LOW';\n  }\n}\n\nexport function calculateHighestRisk(assessments, matrixType) {\n  if (!assessments || assessments.length === 0) {\n    return matrixType === 'ICAO' ? 'ACCEPTABLE' : 'LOW';\n  }\n\n  if (matrixType === 'ICAO') {\n    // ICAO risk levels in order of severity\n    const icaoRiskLevels = ['ACCEPTABLE', 'TOLERABLE', 'INTOLERABLE'];\n    let highestRiskIndex = 0;\n\n    for (const assessment of assessments) {\n      const currentRisk = calculateICAORiskTolerability(assessment.probability, assessment.severity);\n      const currentRiskIndex = icaoRiskLevels.indexOf(currentRisk);\n      if (currentRiskIndex > highestRiskIndex) {\n        highestRiskIndex = currentRiskIndex;\n      }\n    }\n\n    return icaoRiskLevels[highestRiskIndex];\n  } else {\n    // Integrated risk levels in order of severity\n    const integratedRiskLevels = ['LOW', 'MEDIUM', 'MODERATE', 'HIGH'];\n    let highestRiskIndex = 0;\n\n    for (const assessment of assessments) {\n      const currentRisk = calculateRiskRating(assessment.likelihood, assessment.impact);\n      const currentRiskIndex = integratedRiskLevels.indexOf(currentRisk);\n      if (currentRiskIndex > highestRiskIndex) {\n        highestRiskIndex = currentRiskIndex;\n      }\n    }\n\n    return integratedRiskLevels[highestRiskIndex];\n  }\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,yBAAyB;AACrD,SAASC,kBAAkB,QAAQ,+BAA+B;AAElE,OAAO,SAASC,6BAA6BA,CAACC,WAAW,EAAEC,QAAQ,EAAE;EACnE,MAAMC,SAAS,GAAG,GAAGF,WAAW,GAAGC,QAAQ,EAAE;EAC7C,OAAOJ,WAAW,CAACK,SAAS,CAAC,IAAI,YAAY;AAC/C;AAEA,OAAO,SAASC,mBAAmBA,CAACH,WAAW,EAAEC,QAAQ,EAAE;EACzD,MAAMG,SAAS,GAAGN,kBAAkB,CAACG,QAAQ,EAAED,WAAW,CAAC;EAC3D,QAAQI,SAAS;IACf,KAAK,KAAK;MACR,OAAO,MAAM;IACf,KAAK,OAAO;MACV,OAAO,UAAU;IACnB,KAAK,QAAQ;MACX,OAAO,QAAQ;IACjB,KAAK,OAAO;MACV,OAAO,KAAK;IACd;MACE,OAAO,KAAK;EAChB;AACF;AAEA,OAAO,SAASC,oBAAoBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAC5D,IAAI,CAACD,WAAW,IAAIA,WAAW,CAACE,MAAM,KAAK,CAAC,EAAE;IAC5C,OAAOD,UAAU,KAAK,MAAM,GAAG,YAAY,GAAG,KAAK;EACrD;EAEA,IAAIA,UAAU,KAAK,MAAM,EAAE;IACzB;IACA,MAAME,cAAc,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,aAAa,CAAC;IACjE,IAAIC,gBAAgB,GAAG,CAAC;IAExB,KAAK,MAAMC,UAAU,IAAIL,WAAW,EAAE;MACpC,MAAMM,WAAW,GAAGb,6BAA6B,CAACY,UAAU,CAACX,WAAW,EAAEW,UAAU,CAACV,QAAQ,CAAC;MAC9F,MAAMY,gBAAgB,GAAGJ,cAAc,CAACK,OAAO,CAACF,WAAW,CAAC;MAC5D,IAAIC,gBAAgB,GAAGH,gBAAgB,EAAE;QACvCA,gBAAgB,GAAGG,gBAAgB;MACrC;IACF;IAEA,OAAOJ,cAAc,CAACC,gBAAgB,CAAC;EACzC,CAAC,MAAM;IACL;IACA,MAAMK,oBAAoB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC;IAClE,IAAIL,gBAAgB,GAAG,CAAC;IAExB,KAAK,MAAMC,UAAU,IAAIL,WAAW,EAAE;MACpC,MAAMM,WAAW,GAAGT,mBAAmB,CAACQ,UAAU,CAACK,UAAU,EAAEL,UAAU,CAACM,MAAM,CAAC;MACjF,MAAMJ,gBAAgB,GAAGE,oBAAoB,CAACD,OAAO,CAACF,WAAW,CAAC;MAClE,IAAIC,gBAAgB,GAAGH,gBAAgB,EAAE;QACvCA,gBAAgB,GAAGG,gBAAgB;MACrC;IACF;IAEA,OAAOE,oBAAoB,CAACL,gBAAgB,CAAC;EAC/C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}