{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Constants for file upload limits\nconst MAX_FILES = 5;\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\nconst BUCKET_NAME = 'hira-files';\nconst SUBFOLDER = 'operational-images';\n\n// Helper function to list files in storage for a specific project\nexport const listFiles = async project_id => {\n  try {\n    console.log('Listing files for project:', project_id);\n    const {\n      data,\n      error\n    } = await supabase.storage.from(BUCKET_NAME).list(SUBFOLDER, {\n      search: project_id\n    });\n    if (error) {\n      console.error('Error listing files:', error);\n      throw error;\n    }\n    console.log('Files found:', data);\n\n    // Get public URLs for project files\n    const filesWithUrls = await Promise.all(data.map(async file => {\n      var _file$metadata, _file$metadata2;\n      const {\n        data: {\n          publicUrl\n        }\n      } = supabase.storage.from(BUCKET_NAME).getPublicUrl(`${SUBFOLDER}/${file.name}`);\n      return {\n        name: file.name,\n        size: (_file$metadata = file.metadata) === null || _file$metadata === void 0 ? void 0 : _file$metadata.size,\n        path: `${SUBFOLDER}/${file.name}`,\n        url: publicUrl,\n        type: (_file$metadata2 = file.metadata) === null || _file$metadata2 === void 0 ? void 0 : _file$metadata2.mimetype,\n        project_id: project_id\n      };\n    }));\n    console.log('Files with URLs:', filesWithUrls);\n    return filesWithUrls;\n  } catch (error) {\n    console.error('Error listing files:', error);\n    throw error;\n  }\n};\n\n// Helper function to validate files\nexport const validateFiles = (newFiles, existingFiles = []) => {\n  const totalFiles = existingFiles.length + newFiles.length;\n  if (totalFiles > MAX_FILES) {\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\n  }\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\n  const totalSize = existingSize + newSize;\n  if (totalSize > MAX_TOTAL_SIZE) {\n    throw new Error(`Total file size cannot exceed 50MB`);\n  }\n  return true;\n};\n\n// Helper function to upload file\nexport const uploadFile = async (file, project_id, existingFiles = []) => {\n  try {\n    validateFiles([file], existingFiles);\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${project_id}_${Date.now()}.${fileExt}`;\n    const filePath = `${SUBFOLDER}/${fileName}`;\n    const {\n      data,\n      error\n    } = await supabase.storage.from(BUCKET_NAME).upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false\n    });\n    if (error) throw error;\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from(BUCKET_NAME).getPublicUrl(filePath);\n    return {\n      url: publicUrl,\n      path: filePath,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      project_id: project_id\n    };\n  } catch (error) {\n    console.error('File upload error:', error);\n    throw error;\n  }\n};\n\n// Helper function to delete file\nexport const deleteFile = async path => {\n  try {\n    if (!path.startsWith(SUBFOLDER)) {\n      path = `${SUBFOLDER}/${path}`;\n    }\n    const {\n      error\n    } = await supabase.storage.from(BUCKET_NAME).remove([path]);\n    if (error) throw error;\n  } catch (error) {\n    console.error('File deletion error:', error);\n    throw error;\n  }\n};\n\n// Helper function to get file size in readable format\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","MAX_FILES","MAX_TOTAL_SIZE","BUCKET_NAME","SUBFOLDER","listFiles","project_id","console","log","data","error","storage","from","list","search","filesWithUrls","Promise","all","map","file","_file$metadata","_file$metadata2","publicUrl","getPublicUrl","name","size","metadata","path","url","type","mimetype","validateFiles","newFiles","existingFiles","totalFiles","length","existingSize","reduce","total","newSize","totalSize","uploadFile","fileExt","split","pop","fileName","Date","now","filePath","upload","cacheControl","upsert","deleteFile","startsWith","remove","formatFileSize","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Constants for file upload limits\r\nconst MAX_FILES = 5;\r\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\r\nconst BUCKET_NAME = 'hira-files';\r\nconst SUBFOLDER = 'operational-images';\r\n\r\n// Helper function to list files in storage for a specific project\r\nexport const listFiles = async (project_id) => {\r\n  try {\r\n    console.log('Listing files for project:', project_id);\r\n    \r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .list(SUBFOLDER, {\r\n        search: project_id\r\n      });\r\n\r\n    if (error) {\r\n      console.error('Error listing files:', error);\r\n      throw error;\r\n    }\r\n\r\n    console.log('Files found:', data);\r\n\r\n    // Get public URLs for project files\r\n    const filesWithUrls = await Promise.all(data.map(async (file) => {\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from(BUCKET_NAME)\r\n        .getPublicUrl(`${SUBFOLDER}/${file.name}`);\r\n\r\n      return {\r\n        name: file.name,\r\n        size: file.metadata?.size,\r\n        path: `${SUBFOLDER}/${file.name}`,\r\n        url: publicUrl,\r\n        type: file.metadata?.mimetype,\r\n        project_id: project_id\r\n      };\r\n    }));\r\n\r\n    console.log('Files with URLs:', filesWithUrls);\r\n    return filesWithUrls;\r\n  } catch (error) {\r\n    console.error('Error listing files:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to validate files\r\nexport const validateFiles = (newFiles, existingFiles = []) => {\r\n  const totalFiles = existingFiles.length + newFiles.length;\r\n  if (totalFiles > MAX_FILES) {\r\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\r\n  }\r\n\r\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\r\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\r\n  const totalSize = existingSize + newSize;\r\n\r\n  if (totalSize > MAX_TOTAL_SIZE) {\r\n    throw new Error(`Total file size cannot exceed 50MB`);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Helper function to upload file\r\nexport const uploadFile = async (file, project_id, existingFiles = []) => {\r\n  try {\r\n    validateFiles([file], existingFiles);\r\n\r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${project_id}_${Date.now()}.${fileExt}`;\r\n    const filePath = `${SUBFOLDER}/${fileName}`;\r\n\r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .upload(filePath, file, {\r\n        cacheControl: '3600',\r\n        upsert: false\r\n      });\r\n\r\n    if (error) throw error;\r\n\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .getPublicUrl(filePath);\r\n\r\n    return {\r\n      url: publicUrl,\r\n      path: filePath,\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      project_id: project_id\r\n    };\r\n  } catch (error) {\r\n    console.error('File upload error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to delete file\r\nexport const deleteFile = async (path) => {\r\n  try {\r\n    if (!path.startsWith(SUBFOLDER)) {\r\n      path = `${SUBFOLDER}/${path}`;\r\n    }\r\n\r\n    const { error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .remove([path]);\r\n\r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('File deletion error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to get file size in readable format\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}