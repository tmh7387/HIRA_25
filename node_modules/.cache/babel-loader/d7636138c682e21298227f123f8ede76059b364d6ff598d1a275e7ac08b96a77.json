{"ast":null,"code":"import { supabase } from './supabase';\nexport const projectService = {\n  // Save event and all its related data\n  async saveEvent(projectId, eventData) {\n    try {\n      console.log('Saving event for project:', projectId, eventData);\n\n      // First save the event\n      const {\n        data: event,\n        error: eventError\n      } = await supabase.from('hira_events').insert({\n        project_id: projectId,\n        // Using project_id to match foreign key constraint\n        name: eventData.name,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).select().single();\n      if (eventError) {\n        console.error('Error saving event:', eventError);\n        throw eventError;\n      }\n      console.log('Event saved:', event);\n\n      // Then save each hazard for this event\n      for (const hazard of eventData.hazards) {\n        const {\n          data: hazardData,\n          error: hazardError\n        } = await supabase.from('hira_hazards').insert({\n          event_id: event.id,\n          description: hazard.description,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select().single();\n        if (hazardError) {\n          console.error('Error saving hazard:', hazardError);\n          throw hazardError;\n        }\n        console.log('Hazard saved:', hazardData);\n\n        // Save consequences for this hazard\n        for (const consequence of hazard.consequences) {\n          const {\n            data: consequenceData,\n            error: consequenceError\n          } = await supabase.from('hira_consequences').insert({\n            hazard_id: hazardData.id,\n            description: consequence.description,\n            current_controls: consequence.currentControls,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }).select().single();\n          if (consequenceError) {\n            console.error('Error saving consequence:', consequenceError);\n            throw consequenceError;\n          }\n          console.log('Consequence saved:', consequenceData);\n        }\n      }\n      return event;\n    } catch (error) {\n      console.error('Error in saveEvent:', error);\n      throw error;\n    }\n  },\n  // Load all events and related data for a project\n  async loadProjectData(projectId) {\n    try {\n      console.log('Loading project data:', projectId);\n\n      // Get all events for the project with their related data\n      const {\n        data: events,\n        error: eventsError\n      } = await supabase.from('hira_events').select(`\n          id,\n          name,\n          hira_hazards (\n            id,\n            description,\n            hira_consequences (\n              id,\n              description,\n              current_controls\n            )\n          )\n        `).eq('project_id', projectId);\n      if (eventsError) {\n        console.error('Error loading events:', eventsError);\n        throw eventsError;\n      }\n      console.log('Loaded events:', events);\n\n      // Transform the data to match the frontend structure\n      return events.map(event => ({\n        uniqueId: event.id,\n        name: event.name,\n        hazards: event.hira_hazards.map(hazard => ({\n          uniqueId: hazard.id,\n          description: hazard.description,\n          consequences: hazard.hira_consequences.map(consequence => ({\n            uniqueId: consequence.id,\n            description: consequence.description,\n            currentControls: consequence.current_controls\n          }))\n        }))\n      }));\n    } catch (error) {\n      console.error('Error in loadProjectData:', error);\n      throw error;\n    }\n  },\n  // Delete all data for a project\n  async deleteProjectData(projectId) {\n    try {\n      console.log('Deleting project data:', projectId);\n\n      // Delete in reverse order of dependencies\n      const {\n        error: consequencesError\n      } = await supabase.from('hira_consequences').delete().eq('project_id', projectId);\n      if (consequencesError) {\n        console.error('Error deleting consequences:', consequencesError);\n        throw consequencesError;\n      }\n      const {\n        error: hazardsError\n      } = await supabase.from('hira_hazards').delete().eq('project_id', projectId);\n      if (hazardsError) {\n        console.error('Error deleting hazards:', hazardsError);\n        throw hazardsError;\n      }\n      const {\n        error: eventsError\n      } = await supabase.from('hira_events').delete().eq('project_id', projectId);\n      if (eventsError) {\n        console.error('Error deleting events:', eventsError);\n        throw eventsError;\n      }\n      console.log('Project data deleted successfully');\n    } catch (error) {\n      console.error('Error in deleteProjectData:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","projectService","saveEvent","projectId","eventData","console","log","data","event","error","eventError","from","insert","project_id","name","created_at","Date","toISOString","updated_at","select","single","hazard","hazards","hazardData","hazardError","event_id","id","description","consequence","consequences","consequenceData","consequenceError","hazard_id","current_controls","currentControls","loadProjectData","events","eventsError","eq","map","uniqueId","hira_hazards","hira_consequences","deleteProjectData","consequencesError","delete","hazardsError"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/projectService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const projectService = {\r\n  // Save event and all its related data\r\n  async saveEvent(projectId, eventData) {\r\n    try {\r\n      console.log('Saving event for project:', projectId, eventData);\r\n\r\n      // First save the event\r\n      const { data: event, error: eventError } = await supabase\r\n        .from('hira_events')\r\n        .insert({\r\n          project_id: projectId, // Using project_id to match foreign key constraint\r\n          name: eventData.name,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (eventError) {\r\n        console.error('Error saving event:', eventError);\r\n        throw eventError;\r\n      }\r\n\r\n      console.log('Event saved:', event);\r\n\r\n      // Then save each hazard for this event\r\n      for (const hazard of eventData.hazards) {\r\n        const { data: hazardData, error: hazardError } = await supabase\r\n          .from('hira_hazards')\r\n          .insert({\r\n            event_id: event.id,\r\n            description: hazard.description,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (hazardError) {\r\n          console.error('Error saving hazard:', hazardError);\r\n          throw hazardError;\r\n        }\r\n\r\n        console.log('Hazard saved:', hazardData);\r\n\r\n        // Save consequences for this hazard\r\n        for (const consequence of hazard.consequences) {\r\n          const { data: consequenceData, error: consequenceError } = await supabase\r\n            .from('hira_consequences')\r\n            .insert({\r\n              hazard_id: hazardData.id,\r\n              description: consequence.description,\r\n              current_controls: consequence.currentControls,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .select()\r\n            .single();\r\n\r\n          if (consequenceError) {\r\n            console.error('Error saving consequence:', consequenceError);\r\n            throw consequenceError;\r\n          }\r\n\r\n          console.log('Consequence saved:', consequenceData);\r\n        }\r\n      }\r\n\r\n      return event;\r\n    } catch (error) {\r\n      console.error('Error in saveEvent:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Load all events and related data for a project\r\n  async loadProjectData(projectId) {\r\n    try {\r\n      console.log('Loading project data:', projectId);\r\n\r\n      // Get all events for the project with their related data\r\n      const { data: events, error: eventsError } = await supabase\r\n        .from('hira_events')\r\n        .select(`\r\n          id,\r\n          name,\r\n          hira_hazards (\r\n            id,\r\n            description,\r\n            hira_consequences (\r\n              id,\r\n              description,\r\n              current_controls\r\n            )\r\n          )\r\n        `)\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsError) {\r\n        console.error('Error loading events:', eventsError);\r\n        throw eventsError;\r\n      }\r\n\r\n      console.log('Loaded events:', events);\r\n\r\n      // Transform the data to match the frontend structure\r\n      return events.map(event => ({\r\n        uniqueId: event.id,\r\n        name: event.name,\r\n        hazards: event.hira_hazards.map(hazard => ({\r\n          uniqueId: hazard.id,\r\n          description: hazard.description,\r\n          consequences: hazard.hira_consequences.map(consequence => ({\r\n            uniqueId: consequence.id,\r\n            description: consequence.description,\r\n            currentControls: consequence.current_controls\r\n          }))\r\n        }))\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error in loadProjectData:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete all data for a project\r\n  async deleteProjectData(projectId) {\r\n    try {\r\n      console.log('Deleting project data:', projectId);\r\n\r\n      // Delete in reverse order of dependencies\r\n      const { error: consequencesError } = await supabase\r\n        .from('hira_consequences')\r\n        .delete()\r\n        .eq('project_id', projectId);\r\n\r\n      if (consequencesError) {\r\n        console.error('Error deleting consequences:', consequencesError);\r\n        throw consequencesError;\r\n      }\r\n\r\n      const { error: hazardsError } = await supabase\r\n        .from('hira_hazards')\r\n        .delete()\r\n        .eq('project_id', projectId);\r\n\r\n      if (hazardsError) {\r\n        console.error('Error deleting hazards:', hazardsError);\r\n        throw hazardsError;\r\n      }\r\n\r\n      const { error: eventsError } = await supabase\r\n        .from('hira_events')\r\n        .delete()\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsError) {\r\n        console.error('Error deleting events:', eventsError);\r\n        throw eventsError;\r\n      }\r\n\r\n      console.log('Project data deleted successfully');\r\n    } catch (error) {\r\n      console.error('Error in deleteProjectData:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}