{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tmh73\\\\Aviation Synergy\\\\MaXwell AI - General\\\\HIRA_25\\\\src\\\\components\\\\RiskAssessment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport RiskMatrixSelector from './RiskMatrixSelector';\nimport RiskMatrixReference from './RiskMatrixReference';\nimport AssessmentForm from './AssessmentForm';\nimport useProjectStore from '../stores/projectStore';\nimport { useRiskMatrixStore } from '../stores/riskMatrixStore';\nimport { updateAssessments, getAssessmentsByProjectId } from '../services/riskAssessmentService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RiskAssessment() {\n  _s();\n  const {\n    currentProject,\n    hazardIdentificationData,\n    setStepData\n  } = useProjectStore();\n  const {\n    matrixType,\n    setMatrixType\n  } = useRiskMatrixStore();\n  const events = (hazardIdentificationData === null || hazardIdentificationData === void 0 ? void 0 : hazardIdentificationData.events) || [];\n\n  // Log the initial data structure\n  console.log('Initial events:', events);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue\n  } = useForm({\n    defaultValues: {\n      assessments: events.flatMap(event => (event.hazards || []).flatMap(hazard => (hazard.consequences || []).map(consequence => ({\n        uniqueId: consequence.uniqueId,\n        consequenceId: consequence.uniqueId,\n        // Ensure this is set\n        event: event.name,\n        eventId: event.uniqueId,\n        hazard: hazard.description,\n        hazardId: hazard.uniqueId,\n        consequence: consequence.description,\n        currentControls: consequence.currentControls,\n        probability: '',\n        severity: '',\n        likelihood: '',\n        impact: '',\n        tolerability: ''\n      }))))\n    }\n  });\n\n  // Load existing assessments when component mounts\n  useEffect(() => {\n    const loadExistingAssessments = async () => {\n      if (!(currentProject !== null && currentProject !== void 0 && currentProject.id)) return;\n      try {\n        const assessments = await getAssessmentsByProjectId(currentProject.id);\n        console.log('Loaded assessments:', assessments);\n        if (assessments && assessments.length > 0) {\n          // Set matrix type from first assessment\n          if (assessments[0].matrixType) {\n            setMatrixType(assessments[0].matrixType);\n          }\n\n          // Set form values for each assessment\n          assessments.forEach((assessment, index) => {\n            setValue(`assessments.${index}.probability`, assessment.probability);\n            setValue(`assessments.${index}.severity`, assessment.severity);\n            setValue(`assessments.${index}.likelihood`, assessment.likelihood);\n            setValue(`assessments.${index}.impact`, assessment.impact);\n            setValue(`assessments.${index}.tolerability`, assessment.tolerability);\n          });\n        }\n      } catch (error) {\n        console.error('Error loading existing assessments:', error);\n      }\n    };\n    loadExistingAssessments();\n  }, [currentProject === null || currentProject === void 0 ? void 0 : currentProject.id, setValue, setMatrixType]);\n  const watchAssessments = watch('assessments') || [];\n\n  // Log the watched assessments for debugging\n  console.log('Watched assessments:', watchAssessments);\n\n  // Group assessments by event\n  const groupedAssessments = watchAssessments.reduce((acc, assessment) => {\n    if (!acc[assessment.event]) {\n      acc[assessment.event] = {\n        event: assessment.event,\n        assessments: []\n      };\n    }\n    acc[assessment.event].assessments.push(assessment);\n    return acc;\n  }, {});\n  const handleFormSubmit = async data => {\n    try {\n      console.log('Submitting form data:', data);\n\n      // Save assessments with matrix type\n      const result = await updateAssessments(currentProject.id, data, matrixType);\n      console.log('Save result:', result);\n\n      // Update store\n      await setStepData(3, result);\n    } catch (error) {\n      console.error('Error saving risk assessments:', error);\n    }\n  };\n\n  // Only render AssessmentForm if we have assessments\n  const hasAssessments = Object.keys(groupedAssessments).length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-md p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-gray-800 mb-6\",\n        children: \"Risk Assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RiskMatrixSelector, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RiskMatrixReference, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), hasAssessments ? /*#__PURE__*/_jsxDEV(AssessmentForm, {\n      groupedAssessments: groupedAssessments,\n      setValue: setValue,\n      onSubmit: handleSubmit(handleFormSubmit)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-md p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 text-center\",\n        children: \"No hazards or consequences found. Please add hazards in the previous step.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(RiskAssessment, \"eP4n7N7zWMrYDpEB0aKCcILqPiU=\", false, function () {\n  return [useProjectStore, useRiskMatrixStore, useForm];\n});\n_c = RiskAssessment;\nvar _c;\n$RefreshReg$(_c, \"RiskAssessment\");","map":{"version":3,"names":["React","useEffect","useForm","RiskMatrixSelector","RiskMatrixReference","AssessmentForm","useProjectStore","useRiskMatrixStore","updateAssessments","getAssessmentsByProjectId","jsxDEV","_jsxDEV","RiskAssessment","_s","currentProject","hazardIdentificationData","setStepData","matrixType","setMatrixType","events","console","log","register","handleSubmit","watch","setValue","defaultValues","assessments","flatMap","event","hazards","hazard","consequences","map","consequence","uniqueId","consequenceId","name","eventId","description","hazardId","currentControls","probability","severity","likelihood","impact","tolerability","loadExistingAssessments","id","length","forEach","assessment","index","error","watchAssessments","groupedAssessments","reduce","acc","push","handleFormSubmit","data","result","hasAssessments","Object","keys","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/components/RiskAssessment.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport RiskMatrixSelector from './RiskMatrixSelector';\nimport RiskMatrixReference from './RiskMatrixReference';\nimport AssessmentForm from './AssessmentForm';\nimport useProjectStore from '../stores/projectStore';\nimport { useRiskMatrixStore } from '../stores/riskMatrixStore';\nimport { updateAssessments, getAssessmentsByProjectId } from '../services/riskAssessmentService';\n\nexport default function RiskAssessment() {\n  const { currentProject, hazardIdentificationData, setStepData } = useProjectStore();\n  const { matrixType, setMatrixType } = useRiskMatrixStore();\n  const events = hazardIdentificationData?.events || [];\n\n  // Log the initial data structure\n  console.log('Initial events:', events);\n\n  const { register, handleSubmit, watch, setValue } = useForm({\n    defaultValues: {\n      assessments: events.flatMap(event => \n        (event.hazards || []).flatMap(hazard =>\n          (hazard.consequences || []).map(consequence => ({\n            uniqueId: consequence.uniqueId,\n            consequenceId: consequence.uniqueId, // Ensure this is set\n            event: event.name,\n            eventId: event.uniqueId,\n            hazard: hazard.description,\n            hazardId: hazard.uniqueId,\n            consequence: consequence.description,\n            currentControls: consequence.currentControls,\n            probability: '',\n            severity: '',\n            likelihood: '',\n            impact: '',\n            tolerability: ''\n          }))\n        )\n      )\n    }\n  });\n\n  // Load existing assessments when component mounts\n  useEffect(() => {\n    const loadExistingAssessments = async () => {\n      if (!currentProject?.id) return;\n\n      try {\n        const assessments = await getAssessmentsByProjectId(currentProject.id);\n        console.log('Loaded assessments:', assessments);\n        \n        if (assessments && assessments.length > 0) {\n          // Set matrix type from first assessment\n          if (assessments[0].matrixType) {\n            setMatrixType(assessments[0].matrixType);\n          }\n\n          // Set form values for each assessment\n          assessments.forEach((assessment, index) => {\n            setValue(`assessments.${index}.probability`, assessment.probability);\n            setValue(`assessments.${index}.severity`, assessment.severity);\n            setValue(`assessments.${index}.likelihood`, assessment.likelihood);\n            setValue(`assessments.${index}.impact`, assessment.impact);\n            setValue(`assessments.${index}.tolerability`, assessment.tolerability);\n          });\n        }\n      } catch (error) {\n        console.error('Error loading existing assessments:', error);\n      }\n    };\n\n    loadExistingAssessments();\n  }, [currentProject?.id, setValue, setMatrixType]);\n\n  const watchAssessments = watch('assessments') || [];\n\n  // Log the watched assessments for debugging\n  console.log('Watched assessments:', watchAssessments);\n\n  // Group assessments by event\n  const groupedAssessments = watchAssessments.reduce((acc, assessment) => {\n    if (!acc[assessment.event]) {\n      acc[assessment.event] = {\n        event: assessment.event,\n        assessments: []\n      };\n    }\n    acc[assessment.event].assessments.push(assessment);\n    return acc;\n  }, {});\n\n  const handleFormSubmit = async (data) => {\n    try {\n      console.log('Submitting form data:', data);\n      \n      // Save assessments with matrix type\n      const result = await updateAssessments(currentProject.id, data, matrixType);\n      console.log('Save result:', result);\n      \n      // Update store\n      await setStepData(3, result);\n    } catch (error) {\n      console.error('Error saving risk assessments:', error);\n    }\n  };\n\n  // Only render AssessmentForm if we have assessments\n  const hasAssessments = Object.keys(groupedAssessments).length > 0;\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Risk Assessment</h2>\n        <RiskMatrixSelector />\n        <RiskMatrixReference />\n      </div>\n\n      {hasAssessments ? (\n        <AssessmentForm \n          groupedAssessments={groupedAssessments}\n          setValue={setValue}\n          onSubmit={handleSubmit(handleFormSubmit)}\n        />\n      ) : (\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <p className=\"text-gray-600 text-center\">\n            No hazards or consequences found. Please add hazards in the previous step.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}