{"ast":null,"code":"import { supabase } from './supabase';\nexport async function createAssessments(projectId, assessmentsData, matrixType) {\n  console.log('Creating assessments for project:', projectId);\n\n  // Convert matrix type to lowercase to match database constraint\n  const normalizedMatrixType = matrixType.toLowerCase();\n  const assessmentPromises = assessmentsData.assessments.map(async assessment => {\n    try {\n      // Verify the consequence exists in hira_consequences\n      const {\n        data: consequence,\n        error: consequenceError\n      } = await supabase.from('hira_consequences').select(`\n          id,\n          description,\n          current_controls,\n          hazard:hira_hazards!inner(\n            id,\n            description,\n            event:hira_events!inner(\n              id,\n              name\n            )\n          )\n        `).eq('id', assessment.consequenceId).single();\n      if (consequenceError) {\n        console.error('Error finding consequence:', consequenceError);\n        throw new Error(`Consequence not found: ${assessment.consequenceId}`);\n      }\n      if (!consequence) {\n        throw new Error(`No consequence found with ID: ${assessment.consequenceId}`);\n      }\n\n      // Create the risk assessment\n      const {\n        data: createdAssessment,\n        error: assessmentError\n      } = await supabase.from('hira_risk_assessments').insert({\n        consequence_id: assessment.consequenceId,\n        matrix_type: normalizedMatrixType,\n        probability: assessment.probability ? parseInt(assessment.probability) : null,\n        severity: assessment.severity || null,\n        likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\n        impact: assessment.impact ? parseInt(assessment.impact) : null,\n        tolerability: assessment.tolerability || null\n      }).select().single();\n      if (assessmentError) {\n        console.error('Error creating assessment:', assessmentError);\n        throw assessmentError;\n      }\n      return {\n        uniqueId: createdAssessment.id,\n        event: consequence.hazard.event.name,\n        hazard: consequence.hazard.description,\n        consequence: consequence.description,\n        currentControls: consequence.current_controls,\n        matrixType: createdAssessment.matrix_type.toUpperCase(),\n        probability: createdAssessment.probability,\n        severity: createdAssessment.severity,\n        likelihood: createdAssessment.likelihood,\n        impact: createdAssessment.impact,\n        tolerability: createdAssessment.tolerability\n      };\n    } catch (error) {\n      console.error('Error processing assessment:', error);\n      throw error;\n    }\n  });\n  try {\n    const results = await Promise.all(assessmentPromises);\n    console.log('Successfully created all assessments:', results);\n    return {\n      assessments: results\n    };\n  } catch (error) {\n    console.error('Error creating assessments:', error);\n    throw error;\n  }\n}\nexport async function updateAssessments(projectId, assessmentsData, matrixType) {\n  try {\n    // First get all existing assessments for this project through the relationships\n    const {\n      data: existingAssessments,\n      error: fetchError\n    } = await supabase.from('hira_risk_assessments').select(`\n        id,\n        consequence:hira_consequences!inner(\n          hazard:hira_hazards!inner(\n            event:hira_events!inner(\n              project_id\n            )\n          )\n        )\n      `).eq('consequence.hazard.event.project_id', projectId);\n    if (fetchError) throw fetchError;\n\n    // Delete existing assessments if any exist\n    if ((existingAssessments === null || existingAssessments === void 0 ? void 0 : existingAssessments.length) > 0) {\n      const {\n        error: deleteError\n      } = await supabase.from('hira_risk_assessments').delete().in('id', existingAssessments.map(a => a.id));\n      if (deleteError) throw deleteError;\n    }\n\n    // Create new assessments with matrix type\n    return createAssessments(projectId, assessmentsData, matrixType);\n  } catch (error) {\n    console.error('Error updating assessments:', error);\n    throw error;\n  }\n}\nexport async function getAssessmentsByProjectId(projectId) {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_assessments').select(`\n        id,\n        matrix_type,\n        probability,\n        severity,\n        likelihood,\n        impact,\n        tolerability,\n        consequence:hira_consequences!inner(\n          id,\n          description,\n          current_controls,\n          hazard:hira_hazards!inner(\n            id,\n            description,\n            event:hira_events!inner(\n              id,\n              name,\n              project_id\n            )\n          )\n        )\n      `).eq('consequence.hazard.event.project_id', projectId);\n    if (error) throw error;\n    return data.map(assessment => ({\n      uniqueId: assessment.id,\n      event: assessment.consequence.hazard.event.name,\n      hazard: assessment.consequence.hazard.description,\n      consequence: assessment.consequence.description,\n      currentControls: assessment.consequence.current_controls,\n      matrixType: assessment.matrix_type.toUpperCase(),\n      probability: assessment.probability,\n      severity: assessment.severity,\n      likelihood: assessment.likelihood,\n      impact: assessment.impact,\n      tolerability: assessment.tolerability\n    }));\n  } catch (error) {\n    console.error('Error getting assessments:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","createAssessments","projectId","assessmentsData","matrixType","console","log","normalizedMatrixType","toLowerCase","assessmentPromises","assessments","map","assessment","data","consequence","error","consequenceError","from","select","eq","consequenceId","single","Error","createdAssessment","assessmentError","insert","consequence_id","matrix_type","probability","parseInt","severity","likelihood","impact","tolerability","uniqueId","id","event","hazard","name","description","currentControls","current_controls","toUpperCase","results","Promise","all","updateAssessments","existingAssessments","fetchError","length","deleteError","delete","in","a","getAssessmentsByProjectId"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/riskAssessmentService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function createAssessments(projectId, assessmentsData, matrixType) {\r\n  console.log('Creating assessments for project:', projectId);\r\n  \r\n  // Convert matrix type to lowercase to match database constraint\r\n  const normalizedMatrixType = matrixType.toLowerCase();\r\n  \r\n  const assessmentPromises = assessmentsData.assessments.map(async assessment => {\r\n    try {\r\n      // Verify the consequence exists in hira_consequences\r\n      const { data: consequence, error: consequenceError } = await supabase\r\n        .from('hira_consequences')\r\n        .select(`\r\n          id,\r\n          description,\r\n          current_controls,\r\n          hazard:hira_hazards!inner(\r\n            id,\r\n            description,\r\n            event:hira_events!inner(\r\n              id,\r\n              name\r\n            )\r\n          )\r\n        `)\r\n        .eq('id', assessment.consequenceId)\r\n        .single();\r\n\r\n      if (consequenceError) {\r\n        console.error('Error finding consequence:', consequenceError);\r\n        throw new Error(`Consequence not found: ${assessment.consequenceId}`);\r\n      }\r\n\r\n      if (!consequence) {\r\n        throw new Error(`No consequence found with ID: ${assessment.consequenceId}`);\r\n      }\r\n\r\n      // Create the risk assessment\r\n      const { data: createdAssessment, error: assessmentError } = await supabase\r\n        .from('hira_risk_assessments')\r\n        .insert({\r\n          consequence_id: assessment.consequenceId,\r\n          matrix_type: normalizedMatrixType,\r\n          probability: assessment.probability ? parseInt(assessment.probability) : null,\r\n          severity: assessment.severity || null,\r\n          likelihood: assessment.likelihood ? parseInt(assessment.likelihood) : null,\r\n          impact: assessment.impact ? parseInt(assessment.impact) : null,\r\n          tolerability: assessment.tolerability || null\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (assessmentError) {\r\n        console.error('Error creating assessment:', assessmentError);\r\n        throw assessmentError;\r\n      }\r\n\r\n      return {\r\n        uniqueId: createdAssessment.id,\r\n        event: consequence.hazard.event.name,\r\n        hazard: consequence.hazard.description,\r\n        consequence: consequence.description,\r\n        currentControls: consequence.current_controls,\r\n        matrixType: createdAssessment.matrix_type.toUpperCase(),\r\n        probability: createdAssessment.probability,\r\n        severity: createdAssessment.severity,\r\n        likelihood: createdAssessment.likelihood,\r\n        impact: createdAssessment.impact,\r\n        tolerability: createdAssessment.tolerability\r\n      };\r\n    } catch (error) {\r\n      console.error('Error processing assessment:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  try {\r\n    const results = await Promise.all(assessmentPromises);\r\n    console.log('Successfully created all assessments:', results);\r\n    return { assessments: results };\r\n  } catch (error) {\r\n    console.error('Error creating assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateAssessments(projectId, assessmentsData, matrixType) {\r\n  try {\r\n    // First get all existing assessments for this project through the relationships\r\n    const { data: existingAssessments, error: fetchError } = await supabase\r\n      .from('hira_risk_assessments')\r\n      .select(`\r\n        id,\r\n        consequence:hira_consequences!inner(\r\n          hazard:hira_hazards!inner(\r\n            event:hira_events!inner(\r\n              project_id\r\n            )\r\n          )\r\n        )\r\n      `)\r\n      .eq('consequence.hazard.event.project_id', projectId);\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    // Delete existing assessments if any exist\r\n    if (existingAssessments?.length > 0) {\r\n      const { error: deleteError } = await supabase\r\n        .from('hira_risk_assessments')\r\n        .delete()\r\n        .in('id', existingAssessments.map(a => a.id));\r\n\r\n      if (deleteError) throw deleteError;\r\n    }\r\n\r\n    // Create new assessments with matrix type\r\n    return createAssessments(projectId, assessmentsData, matrixType);\r\n  } catch (error) {\r\n    console.error('Error updating assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getAssessmentsByProjectId(projectId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_assessments')\r\n      .select(`\r\n        id,\r\n        matrix_type,\r\n        probability,\r\n        severity,\r\n        likelihood,\r\n        impact,\r\n        tolerability,\r\n        consequence:hira_consequences!inner(\r\n          id,\r\n          description,\r\n          current_controls,\r\n          hazard:hira_hazards!inner(\r\n            id,\r\n            description,\r\n            event:hira_events!inner(\r\n              id,\r\n              name,\r\n              project_id\r\n            )\r\n          )\r\n        )\r\n      `)\r\n      .eq('consequence.hazard.event.project_id', projectId);\r\n\r\n    if (error) throw error;\r\n\r\n    return data.map(assessment => ({\r\n      uniqueId: assessment.id,\r\n      event: assessment.consequence.hazard.event.name,\r\n      hazard: assessment.consequence.hazard.description,\r\n      consequence: assessment.consequence.description,\r\n      currentControls: assessment.consequence.current_controls,\r\n      matrixType: assessment.matrix_type.toUpperCase(),\r\n      probability: assessment.probability,\r\n      severity: assessment.severity,\r\n      likelihood: assessment.likelihood,\r\n      impact: assessment.impact,\r\n      tolerability: assessment.tolerability\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error getting assessments:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAErC,OAAO,eAAeC,iBAAiBA,CAACC,SAAS,EAAEC,eAAe,EAAEC,UAAU,EAAE;EAC9EC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEJ,SAAS,CAAC;;EAE3D;EACA,MAAMK,oBAAoB,GAAGH,UAAU,CAACI,WAAW,CAAC,CAAC;EAErD,MAAMC,kBAAkB,GAAGN,eAAe,CAACO,WAAW,CAACC,GAAG,CAAC,MAAMC,UAAU,IAAI;IAC7E,IAAI;MACF;MACA,MAAM;QAAEC,IAAI,EAAEC,WAAW;QAAEC,KAAK,EAAEC;MAAiB,CAAC,GAAG,MAAMhB,QAAQ,CAClEiB,IAAI,CAAC,mBAAmB,CAAC,CACzBC,MAAM,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,CAAC,CACDC,EAAE,CAAC,IAAI,EAAEP,UAAU,CAACQ,aAAa,CAAC,CAClCC,MAAM,CAAC,CAAC;MAEX,IAAIL,gBAAgB,EAAE;QACpBX,OAAO,CAACU,KAAK,CAAC,4BAA4B,EAAEC,gBAAgB,CAAC;QAC7D,MAAM,IAAIM,KAAK,CAAC,0BAA0BV,UAAU,CAACQ,aAAa,EAAE,CAAC;MACvE;MAEA,IAAI,CAACN,WAAW,EAAE;QAChB,MAAM,IAAIQ,KAAK,CAAC,iCAAiCV,UAAU,CAACQ,aAAa,EAAE,CAAC;MAC9E;;MAEA;MACA,MAAM;QAAEP,IAAI,EAAEU,iBAAiB;QAAER,KAAK,EAAES;MAAgB,CAAC,GAAG,MAAMxB,QAAQ,CACvEiB,IAAI,CAAC,uBAAuB,CAAC,CAC7BQ,MAAM,CAAC;QACNC,cAAc,EAAEd,UAAU,CAACQ,aAAa;QACxCO,WAAW,EAAEpB,oBAAoB;QACjCqB,WAAW,EAAEhB,UAAU,CAACgB,WAAW,GAAGC,QAAQ,CAACjB,UAAU,CAACgB,WAAW,CAAC,GAAG,IAAI;QAC7EE,QAAQ,EAAElB,UAAU,CAACkB,QAAQ,IAAI,IAAI;QACrCC,UAAU,EAAEnB,UAAU,CAACmB,UAAU,GAAGF,QAAQ,CAACjB,UAAU,CAACmB,UAAU,CAAC,GAAG,IAAI;QAC1EC,MAAM,EAAEpB,UAAU,CAACoB,MAAM,GAAGH,QAAQ,CAACjB,UAAU,CAACoB,MAAM,CAAC,GAAG,IAAI;QAC9DC,YAAY,EAAErB,UAAU,CAACqB,YAAY,IAAI;MAC3C,CAAC,CAAC,CACDf,MAAM,CAAC,CAAC,CACRG,MAAM,CAAC,CAAC;MAEX,IAAIG,eAAe,EAAE;QACnBnB,OAAO,CAACU,KAAK,CAAC,4BAA4B,EAAES,eAAe,CAAC;QAC5D,MAAMA,eAAe;MACvB;MAEA,OAAO;QACLU,QAAQ,EAAEX,iBAAiB,CAACY,EAAE;QAC9BC,KAAK,EAAEtB,WAAW,CAACuB,MAAM,CAACD,KAAK,CAACE,IAAI;QACpCD,MAAM,EAAEvB,WAAW,CAACuB,MAAM,CAACE,WAAW;QACtCzB,WAAW,EAAEA,WAAW,CAACyB,WAAW;QACpCC,eAAe,EAAE1B,WAAW,CAAC2B,gBAAgB;QAC7CrC,UAAU,EAAEmB,iBAAiB,CAACI,WAAW,CAACe,WAAW,CAAC,CAAC;QACvDd,WAAW,EAAEL,iBAAiB,CAACK,WAAW;QAC1CE,QAAQ,EAAEP,iBAAiB,CAACO,QAAQ;QACpCC,UAAU,EAAER,iBAAiB,CAACQ,UAAU;QACxCC,MAAM,EAAET,iBAAiB,CAACS,MAAM;QAChCC,YAAY,EAAEV,iBAAiB,CAACU;MAClC,CAAC;IACH,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC,CAAC;EAEF,IAAI;IACF,MAAM4B,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACpC,kBAAkB,CAAC;IACrDJ,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEqC,OAAO,CAAC;IAC7D,OAAO;MAAEjC,WAAW,EAAEiC;IAAQ,CAAC;EACjC,CAAC,CAAC,OAAO5B,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAe+B,iBAAiBA,CAAC5C,SAAS,EAAEC,eAAe,EAAEC,UAAU,EAAE;EAC9E,IAAI;IACF;IACA,MAAM;MAAES,IAAI,EAAEkC,mBAAmB;MAAEhC,KAAK,EAAEiC;IAAW,CAAC,GAAG,MAAMhD,QAAQ,CACpEiB,IAAI,CAAC,uBAAuB,CAAC,CAC7BC,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,qCAAqC,EAAEjB,SAAS,CAAC;IAEvD,IAAI8C,UAAU,EAAE,MAAMA,UAAU;;IAEhC;IACA,IAAI,CAAAD,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEE,MAAM,IAAG,CAAC,EAAE;MACnC,MAAM;QAAElC,KAAK,EAAEmC;MAAY,CAAC,GAAG,MAAMlD,QAAQ,CAC1CiB,IAAI,CAAC,uBAAuB,CAAC,CAC7BkC,MAAM,CAAC,CAAC,CACRC,EAAE,CAAC,IAAI,EAAEL,mBAAmB,CAACpC,GAAG,CAAC0C,CAAC,IAAIA,CAAC,CAAClB,EAAE,CAAC,CAAC;MAE/C,IAAIe,WAAW,EAAE,MAAMA,WAAW;IACpC;;IAEA;IACA,OAAOjD,iBAAiB,CAACC,SAAS,EAAEC,eAAe,EAAEC,UAAU,CAAC;EAClE,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeuC,yBAAyBA,CAACpD,SAAS,EAAE;EACzD,IAAI;IACF,MAAM;MAAEW,IAAI;MAAEE;IAAM,CAAC,GAAG,MAAMf,QAAQ,CACnCiB,IAAI,CAAC,uBAAuB,CAAC,CAC7BC,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,qCAAqC,EAAEjB,SAAS,CAAC;IAEvD,IAAIa,KAAK,EAAE,MAAMA,KAAK;IAEtB,OAAOF,IAAI,CAACF,GAAG,CAACC,UAAU,KAAK;MAC7BsB,QAAQ,EAAEtB,UAAU,CAACuB,EAAE;MACvBC,KAAK,EAAExB,UAAU,CAACE,WAAW,CAACuB,MAAM,CAACD,KAAK,CAACE,IAAI;MAC/CD,MAAM,EAAEzB,UAAU,CAACE,WAAW,CAACuB,MAAM,CAACE,WAAW;MACjDzB,WAAW,EAAEF,UAAU,CAACE,WAAW,CAACyB,WAAW;MAC/CC,eAAe,EAAE5B,UAAU,CAACE,WAAW,CAAC2B,gBAAgB;MACxDrC,UAAU,EAAEQ,UAAU,CAACe,WAAW,CAACe,WAAW,CAAC,CAAC;MAChDd,WAAW,EAAEhB,UAAU,CAACgB,WAAW;MACnCE,QAAQ,EAAElB,UAAU,CAACkB,QAAQ;MAC7BC,UAAU,EAAEnB,UAAU,CAACmB,UAAU;MACjCC,MAAM,EAAEpB,UAAU,CAACoB,MAAM;MACzBC,YAAY,EAAErB,UAAU,CAACqB;IAC3B,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}