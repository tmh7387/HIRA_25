{"ast":null,"code":"import { supabase } from './supabase';\nexport async function getHazardsByEventId(eventId) {\n  try {\n    const {\n      data: hazards,\n      error\n    } = await supabase.from('hira_hazards').select(`\n        id,\n        description,\n        hira_consequences (\n          id,\n          description,\n          current_controls\n        )\n      `).eq('event_id', eventId).order('created_at', {\n      ascending: true\n    });\n    if (error) {\n      console.error('Error fetching hazards:', error);\n      throw error;\n    }\n    return hazards.map(hazard => ({\n      uniqueId: hazard.id,\n      description: hazard.description,\n      consequences: hazard.hira_consequences.map(consequence => ({\n        uniqueId: consequence.id,\n        description: consequence.description,\n        currentControls: consequence.current_controls\n      }))\n    }));\n  } catch (error) {\n    console.error('Error getting hazards:', error);\n    throw error;\n  }\n}\nexport async function updateHazards(eventId, hazardsData) {\n  try {\n    // First get all hazards for this event\n    const {\n      data: hazards,\n      error: fetchError\n    } = await supabase.from('hira_hazards').select('id').eq('event_id', eventId);\n    if (fetchError) throw fetchError;\n    if (hazards && hazards.length > 0) {\n      // Delete all hazards for this event (cascades to consequences)\n      const {\n        error: deleteError\n      } = await supabase.from('hira_hazards').delete().eq('event_id', eventId);\n      if (deleteError) throw deleteError;\n    }\n\n    // Create hazards for this event\n    const hazardsPromises = hazardsData.map(async hazard => {\n      const {\n        data: createdHazard,\n        error: hazardError\n      } = await supabase.from('hira_hazards').insert({\n        event_id: eventId,\n        description: hazard.description,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).select().single();\n      if (hazardError) {\n        console.error('Error creating hazard:', hazardError);\n        throw hazardError;\n      }\n\n      // Create consequences for this hazard\n      const consequencesPromises = hazard.consequences.map(consequence => supabase.from('hira_consequences').insert({\n        id: consequence.uniqueId,\n        // Use the provided uniqueId as the consequence ID\n        hazard_id: createdHazard.id,\n        description: consequence.description,\n        current_controls: consequence.currentControls,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).select().single());\n      const consequencesResults = await Promise.all(consequencesPromises);\n      const consequences = consequencesResults.map(result => {\n        if (result.error) throw result.error;\n        return {\n          uniqueId: result.data.id,\n          description: result.data.description,\n          currentControls: result.data.current_controls\n        };\n      });\n      return {\n        uniqueId: createdHazard.id,\n        description: createdHazard.description,\n        consequences\n      };\n    });\n    return Promise.all(hazardsPromises);\n  } catch (error) {\n    console.error('Error updating hazards:', error);\n    throw error;\n  }\n}\nexport async function deleteHazards(eventId) {\n  try {\n    const {\n      error\n    } = await supabase.from('hira_hazards').delete().eq('event_id', eventId);\n    if (error) throw error;\n  } catch (error) {\n    console.error('Error deleting hazards:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","getHazardsByEventId","eventId","data","hazards","error","from","select","eq","order","ascending","console","map","hazard","uniqueId","id","description","consequences","hira_consequences","consequence","currentControls","current_controls","updateHazards","hazardsData","fetchError","length","deleteError","delete","hazardsPromises","createdHazard","hazardError","insert","event_id","created_at","Date","toISOString","updated_at","single","consequencesPromises","hazard_id","consequencesResults","Promise","all","result","deleteHazards"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/hazardService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function getHazardsByEventId(eventId) {\r\n  try {\r\n    const { data: hazards, error } = await supabase\r\n      .from('hira_hazards')\r\n      .select(`\r\n        id,\r\n        description,\r\n        hira_consequences (\r\n          id,\r\n          description,\r\n          current_controls\r\n        )\r\n      `)\r\n      .eq('event_id', eventId)\r\n      .order('created_at', { ascending: true });\r\n\r\n    if (error) {\r\n      console.error('Error fetching hazards:', error);\r\n      throw error;\r\n    }\r\n\r\n    return hazards.map(hazard => ({\r\n      uniqueId: hazard.id,\r\n      description: hazard.description,\r\n      consequences: hazard.hira_consequences.map(consequence => ({\r\n        uniqueId: consequence.id,\r\n        description: consequence.description,\r\n        currentControls: consequence.current_controls\r\n      }))\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error getting hazards:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateHazards(eventId, hazardsData) {\r\n  try {\r\n    // First get all hazards for this event\r\n    const { data: hazards, error: fetchError } = await supabase\r\n      .from('hira_hazards')\r\n      .select('id')\r\n      .eq('event_id', eventId);\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    if (hazards && hazards.length > 0) {\r\n      // Delete all hazards for this event (cascades to consequences)\r\n      const { error: deleteError } = await supabase\r\n        .from('hira_hazards')\r\n        .delete()\r\n        .eq('event_id', eventId);\r\n\r\n      if (deleteError) throw deleteError;\r\n    }\r\n\r\n    // Create hazards for this event\r\n    const hazardsPromises = hazardsData.map(async hazard => {\r\n      const { data: createdHazard, error: hazardError } = await supabase\r\n        .from('hira_hazards')\r\n        .insert({\r\n          event_id: eventId,\r\n          description: hazard.description,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (hazardError) {\r\n        console.error('Error creating hazard:', hazardError);\r\n        throw hazardError;\r\n      }\r\n\r\n      // Create consequences for this hazard\r\n      const consequencesPromises = hazard.consequences.map(consequence => \r\n        supabase\r\n          .from('hira_consequences')\r\n          .insert({\r\n            id: consequence.uniqueId, // Use the provided uniqueId as the consequence ID\r\n            hazard_id: createdHazard.id,\r\n            description: consequence.description,\r\n            current_controls: consequence.currentControls,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single()\r\n      );\r\n\r\n      const consequencesResults = await Promise.all(consequencesPromises);\r\n      const consequences = consequencesResults.map(result => {\r\n        if (result.error) throw result.error;\r\n        return {\r\n          uniqueId: result.data.id,\r\n          description: result.data.description,\r\n          currentControls: result.data.current_controls\r\n        };\r\n      });\r\n\r\n      return {\r\n        uniqueId: createdHazard.id,\r\n        description: createdHazard.description,\r\n        consequences\r\n      };\r\n    });\r\n\r\n    return Promise.all(hazardsPromises);\r\n  } catch (error) {\r\n    console.error('Error updating hazards:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteHazards(eventId) {\r\n  try {\r\n    const { error } = await supabase\r\n      .from('hira_hazards')\r\n      .delete()\r\n      .eq('event_id', eventId);\r\n\r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Error deleting hazards:', error);\r\n    throw error;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}