{"ast":null,"code":"import { supabase } from './supabase';\nexport async function getHazardsByEventId(eventId) {\n  try {\n    const {\n      data: hazards,\n      error\n    } = await supabase.from('hira_hazards').select(`\n        id,\n        description,\n        hira_consequences (\n          id,\n          description,\n          current_controls\n        )\n      `).eq('event_id', eventId).order('created_at', {\n      ascending: true\n    });\n    if (error) {\n      console.error('Error fetching hazards:', error);\n      throw error;\n    }\n    return hazards.map(hazard => ({\n      uniqueId: hazard.id,\n      description: hazard.description,\n      consequences: hazard.hira_consequences.map(consequence => ({\n        uniqueId: consequence.id,\n        description: consequence.description,\n        currentControls: consequence.current_controls\n      }))\n    }));\n  } catch (error) {\n    console.error('Error getting hazards:', error);\n    throw error;\n  }\n}\nexport async function updateHazards(eventId, hazardsData) {\n  try {\n    const results = [];\n\n    // Process each hazard sequentially\n    for (const hazard of hazardsData) {\n      // Update or create hazard\n      const {\n        data: hazardResult,\n        error: hazardError\n      } = await supabase.from('hira_hazards').upsert({\n        id: hazard.uniqueId,\n        event_id: eventId,\n        description: hazard.description,\n        updated_at: new Date().toISOString()\n      }).select().single();\n      if (hazardError) {\n        console.error('Error upserting hazard:', hazardError);\n        throw hazardError;\n      }\n      const consequences = [];\n      // Process each consequence sequentially\n      for (const consequence of hazard.consequences) {\n        const {\n          data: consequenceResult,\n          error: consequenceError\n        } = await supabase.from('hira_consequences').upsert({\n          id: consequence.uniqueId,\n          hazard_id: hazardResult.id,\n          description: consequence.description,\n          current_controls: consequence.currentControls,\n          updated_at: new Date().toISOString()\n        }).select().single();\n        if (consequenceError) {\n          console.error('Error upserting consequence:', consequenceError);\n          throw consequenceError;\n        }\n        consequences.push({\n          uniqueId: consequenceResult.id,\n          description: consequenceResult.description,\n          currentControls: consequenceResult.current_controls\n        });\n      }\n      results.push({\n        uniqueId: hazardResult.id,\n        description: hazardResult.description,\n        consequences\n      });\n    }\n    return results;\n  } catch (error) {\n    console.error('Error updating hazards:', error);\n    throw error;\n  }\n}\nexport async function deleteHazards(eventId) {\n  try {\n    const {\n      error\n    } = await supabase.from('hira_hazards').delete().eq('event_id', eventId);\n    if (error) throw error;\n  } catch (error) {\n    console.error('Error deleting hazards:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","getHazardsByEventId","eventId","data","hazards","error","from","select","eq","order","ascending","console","map","hazard","uniqueId","id","description","consequences","hira_consequences","consequence","currentControls","current_controls","updateHazards","hazardsData","results","hazardResult","hazardError","upsert","event_id","updated_at","Date","toISOString","single","consequenceResult","consequenceError","hazard_id","push","deleteHazards","delete"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/hazardService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function getHazardsByEventId(eventId) {\r\n  try {\r\n    const { data: hazards, error } = await supabase\r\n      .from('hira_hazards')\r\n      .select(`\r\n        id,\r\n        description,\r\n        hira_consequences (\r\n          id,\r\n          description,\r\n          current_controls\r\n        )\r\n      `)\r\n      .eq('event_id', eventId)\r\n      .order('created_at', { ascending: true });\r\n\r\n    if (error) {\r\n      console.error('Error fetching hazards:', error);\r\n      throw error;\r\n    }\r\n\r\n    return hazards.map(hazard => ({\r\n      uniqueId: hazard.id,\r\n      description: hazard.description,\r\n      consequences: hazard.hira_consequences.map(consequence => ({\r\n        uniqueId: consequence.id,\r\n        description: consequence.description,\r\n        currentControls: consequence.current_controls\r\n      }))\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error getting hazards:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateHazards(eventId, hazardsData) {\r\n  try {\r\n    const results = [];\r\n    \r\n    // Process each hazard sequentially\r\n    for (const hazard of hazardsData) {\r\n      // Update or create hazard\r\n      const { data: hazardResult, error: hazardError } = await supabase\r\n        .from('hira_hazards')\r\n        .upsert({\r\n          id: hazard.uniqueId,\r\n          event_id: eventId,\r\n          description: hazard.description,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (hazardError) {\r\n        console.error('Error upserting hazard:', hazardError);\r\n        throw hazardError;\r\n      }\r\n\r\n      const consequences = [];\r\n      // Process each consequence sequentially\r\n      for (const consequence of hazard.consequences) {\r\n        const { data: consequenceResult, error: consequenceError } = await supabase\r\n          .from('hira_consequences')\r\n          .upsert({\r\n            id: consequence.uniqueId,\r\n            hazard_id: hazardResult.id,\r\n            description: consequence.description,\r\n            current_controls: consequence.currentControls,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (consequenceError) {\r\n          console.error('Error upserting consequence:', consequenceError);\r\n          throw consequenceError;\r\n        }\r\n\r\n        consequences.push({\r\n          uniqueId: consequenceResult.id,\r\n          description: consequenceResult.description,\r\n          currentControls: consequenceResult.current_controls\r\n        });\r\n      }\r\n\r\n      results.push({\r\n        uniqueId: hazardResult.id,\r\n        description: hazardResult.description,\r\n        consequences\r\n      });\r\n    }\r\n\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error updating hazards:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteHazards(eventId) {\r\n  try {\r\n    const { error } = await supabase\r\n      .from('hira_hazards')\r\n      .delete()\r\n      .eq('event_id', eventId);\r\n\r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Error deleting hazards:', error);\r\n    throw error;\r\n  }\r\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAErC,OAAO,eAAeC,mBAAmBA,CAACC,OAAO,EAAE;EACjD,IAAI;IACF,MAAM;MAAEC,IAAI,EAAEC,OAAO;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CAC5CM,IAAI,CAAC,cAAc,CAAC,CACpBC,MAAM,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,UAAU,EAAEN,OAAO,CAAC,CACvBO,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAE3C,IAAIL,KAAK,EAAE;MACTM,OAAO,CAACN,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;IAEA,OAAOD,OAAO,CAACQ,GAAG,CAACC,MAAM,KAAK;MAC5BC,QAAQ,EAAED,MAAM,CAACE,EAAE;MACnBC,WAAW,EAAEH,MAAM,CAACG,WAAW;MAC/BC,YAAY,EAAEJ,MAAM,CAACK,iBAAiB,CAACN,GAAG,CAACO,WAAW,KAAK;QACzDL,QAAQ,EAAEK,WAAW,CAACJ,EAAE;QACxBC,WAAW,EAAEG,WAAW,CAACH,WAAW;QACpCI,eAAe,EAAED,WAAW,CAACE;MAC/B,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeiB,aAAaA,CAACpB,OAAO,EAAEqB,WAAW,EAAE;EACxD,IAAI;IACF,MAAMC,OAAO,GAAG,EAAE;;IAElB;IACA,KAAK,MAAMX,MAAM,IAAIU,WAAW,EAAE;MAChC;MACA,MAAM;QAAEpB,IAAI,EAAEsB,YAAY;QAAEpB,KAAK,EAAEqB;MAAY,CAAC,GAAG,MAAM1B,QAAQ,CAC9DM,IAAI,CAAC,cAAc,CAAC,CACpBqB,MAAM,CAAC;QACNZ,EAAE,EAAEF,MAAM,CAACC,QAAQ;QACnBc,QAAQ,EAAE1B,OAAO;QACjBc,WAAW,EAAEH,MAAM,CAACG,WAAW;QAC/Ba,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,CAAC,CACDxB,MAAM,CAAC,CAAC,CACRyB,MAAM,CAAC,CAAC;MAEX,IAAIN,WAAW,EAAE;QACff,OAAO,CAACN,KAAK,CAAC,yBAAyB,EAAEqB,WAAW,CAAC;QACrD,MAAMA,WAAW;MACnB;MAEA,MAAMT,YAAY,GAAG,EAAE;MACvB;MACA,KAAK,MAAME,WAAW,IAAIN,MAAM,CAACI,YAAY,EAAE;QAC7C,MAAM;UAAEd,IAAI,EAAE8B,iBAAiB;UAAE5B,KAAK,EAAE6B;QAAiB,CAAC,GAAG,MAAMlC,QAAQ,CACxEM,IAAI,CAAC,mBAAmB,CAAC,CACzBqB,MAAM,CAAC;UACNZ,EAAE,EAAEI,WAAW,CAACL,QAAQ;UACxBqB,SAAS,EAAEV,YAAY,CAACV,EAAE;UAC1BC,WAAW,EAAEG,WAAW,CAACH,WAAW;UACpCK,gBAAgB,EAAEF,WAAW,CAACC,eAAe;UAC7CS,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACrC,CAAC,CAAC,CACDxB,MAAM,CAAC,CAAC,CACRyB,MAAM,CAAC,CAAC;QAEX,IAAIE,gBAAgB,EAAE;UACpBvB,OAAO,CAACN,KAAK,CAAC,8BAA8B,EAAE6B,gBAAgB,CAAC;UAC/D,MAAMA,gBAAgB;QACxB;QAEAjB,YAAY,CAACmB,IAAI,CAAC;UAChBtB,QAAQ,EAAEmB,iBAAiB,CAAClB,EAAE;UAC9BC,WAAW,EAAEiB,iBAAiB,CAACjB,WAAW;UAC1CI,eAAe,EAAEa,iBAAiB,CAACZ;QACrC,CAAC,CAAC;MACJ;MAEAG,OAAO,CAACY,IAAI,CAAC;QACXtB,QAAQ,EAAEW,YAAY,CAACV,EAAE;QACzBC,WAAW,EAAES,YAAY,CAACT,WAAW;QACrCC;MACF,CAAC,CAAC;IACJ;IAEA,OAAOO,OAAO;EAChB,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAegC,aAAaA,CAACnC,OAAO,EAAE;EAC3C,IAAI;IACF,MAAM;MAAEG;IAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAAC,cAAc,CAAC,CACpBgC,MAAM,CAAC,CAAC,CACR9B,EAAE,CAAC,UAAU,EAAEN,OAAO,CAAC;IAE1B,IAAIG,KAAK,EAAE,MAAMA,KAAK;EACxB,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}