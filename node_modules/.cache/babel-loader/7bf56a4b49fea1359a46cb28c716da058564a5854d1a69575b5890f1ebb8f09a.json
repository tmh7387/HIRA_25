{"ast":null,"code":"import { supabase } from './supabase';\nexport async function createControls(projectId, controlsData) {\n  console.log('Creating controls for project:', projectId);\n  const controlPromises = controlsData.controls.map(async control => {\n    try {\n      // Verify the consequence exists\n      const {\n        data: consequence,\n        error: consequenceError\n      } = await supabase.from('hira_consequences').select('id').eq('id', control.consequenceId).single();\n      if (consequenceError) {\n        console.error('Error finding consequence:', consequenceError);\n        throw new Error(`Consequence not found: ${control.consequenceId}`);\n      }\n\n      // Create the control\n      const {\n        data: createdControl,\n        error: controlError\n      } = await supabase.from('hira_controls').insert({\n        consequence_id: control.consequenceId,\n        additional_mitigation: control.additionalMitigation,\n        risk_owner: control.riskOwner,\n        target_date: control.targetDate,\n        date_implemented: control.dateImplemented,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).select(`\n          id,\n          additional_mitigation,\n          risk_owner,\n          target_date,\n          date_implemented,\n          consequence:hira_consequences!inner(\n            id,\n            description\n          )\n        `).single();\n      if (controlError) {\n        console.error('Error creating control:', controlError);\n        throw controlError;\n      }\n      return {\n        uniqueId: createdControl.id,\n        consequence: createdControl.consequence.description,\n        consequenceId: createdControl.consequence.id,\n        additionalMitigation: createdControl.additional_mitigation,\n        riskOwner: createdControl.risk_owner,\n        targetDate: createdControl.target_date,\n        dateImplemented: createdControl.date_implemented\n      };\n    } catch (error) {\n      console.error('Error processing control:', error);\n      throw error;\n    }\n  });\n  try {\n    const results = await Promise.all(controlPromises);\n    console.log('Successfully created all controls:', results);\n    return {\n      controls: results\n    };\n  } catch (error) {\n    console.error('Error creating controls:', error);\n    throw error;\n  }\n}\nexport async function updateControls(projectId, controlsData) {\n  try {\n    // First get all existing controls for this project through the relationships\n    const {\n      data: existingControls,\n      error: fetchError\n    } = await supabase.from('hira_controls').select(`\n        id,\n        consequence:hira_consequences!inner(\n          hazard:hira_hazards!inner(\n            event:hira_events!inner(\n              project_id\n            )\n          )\n        )\n      `).eq('consequence.hazard.event.project_id', projectId);\n    if (fetchError) throw fetchError;\n\n    // Delete existing controls if any exist\n    if ((existingControls === null || existingControls === void 0 ? void 0 : existingControls.length) > 0) {\n      const {\n        error: deleteError\n      } = await supabase.from('hira_controls').delete().in('id', existingControls.map(c => c.id));\n      if (deleteError) throw deleteError;\n    }\n\n    // Create new controls\n    return createControls(projectId, controlsData);\n  } catch (error) {\n    console.error('Error updating controls:', error);\n    throw error;\n  }\n}\nexport async function getControlsByProjectId(projectId) {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('hira_controls').select(`\n        id,\n        additional_mitigation,\n        risk_owner,\n        target_date,\n        date_implemented,\n        consequence:hira_consequences!inner(\n          id,\n          description,\n          hazard:hira_hazards!inner(\n            event:hira_events!inner(\n              project_id\n            )\n          )\n        )\n      `).eq('consequence.hazard.event.project_id', projectId);\n    if (error) throw error;\n    return data.map(control => ({\n      uniqueId: control.id,\n      consequence: control.consequence.description,\n      consequenceId: control.consequence.id,\n      additionalMitigation: control.additional_mitigation,\n      riskOwner: control.risk_owner,\n      targetDate: control.target_date,\n      dateImplemented: control.date_implemented\n    }));\n  } catch (error) {\n    console.error('Error getting controls:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","createControls","projectId","controlsData","console","log","controlPromises","controls","map","control","data","consequence","error","consequenceError","from","select","eq","consequenceId","single","Error","createdControl","controlError","insert","consequence_id","additional_mitigation","additionalMitigation","risk_owner","riskOwner","target_date","targetDate","date_implemented","dateImplemented","created_at","Date","toISOString","updated_at","uniqueId","id","description","results","Promise","all","updateControls","existingControls","fetchError","length","deleteError","delete","in","c","getControlsByProjectId"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/controlService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function createControls(projectId, controlsData) {\r\n  console.log('Creating controls for project:', projectId);\r\n  \r\n  const controlPromises = controlsData.controls.map(async control => {\r\n    try {\r\n      // Verify the consequence exists\r\n      const { data: consequence, error: consequenceError } = await supabase\r\n        .from('hira_consequences')\r\n        .select('id')\r\n        .eq('id', control.consequenceId)\r\n        .single();\r\n\r\n      if (consequenceError) {\r\n        console.error('Error finding consequence:', consequenceError);\r\n        throw new Error(`Consequence not found: ${control.consequenceId}`);\r\n      }\r\n\r\n      // Create the control\r\n      const { data: createdControl, error: controlError } = await supabase\r\n        .from('hira_controls')\r\n        .insert({\r\n          consequence_id: control.consequenceId,\r\n          additional_mitigation: control.additionalMitigation,\r\n          risk_owner: control.riskOwner,\r\n          target_date: control.targetDate,\r\n          date_implemented: control.dateImplemented,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select(`\r\n          id,\r\n          additional_mitigation,\r\n          risk_owner,\r\n          target_date,\r\n          date_implemented,\r\n          consequence:hira_consequences!inner(\r\n            id,\r\n            description\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (controlError) {\r\n        console.error('Error creating control:', controlError);\r\n        throw controlError;\r\n      }\r\n\r\n      return {\r\n        uniqueId: createdControl.id,\r\n        consequence: createdControl.consequence.description,\r\n        consequenceId: createdControl.consequence.id,\r\n        additionalMitigation: createdControl.additional_mitigation,\r\n        riskOwner: createdControl.risk_owner,\r\n        targetDate: createdControl.target_date,\r\n        dateImplemented: createdControl.date_implemented\r\n      };\r\n    } catch (error) {\r\n      console.error('Error processing control:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  try {\r\n    const results = await Promise.all(controlPromises);\r\n    console.log('Successfully created all controls:', results);\r\n    return { controls: results };\r\n  } catch (error) {\r\n    console.error('Error creating controls:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateControls(projectId, controlsData) {\r\n  try {\r\n    // First get all existing controls for this project through the relationships\r\n    const { data: existingControls, error: fetchError } = await supabase\r\n      .from('hira_controls')\r\n      .select(`\r\n        id,\r\n        consequence:hira_consequences!inner(\r\n          hazard:hira_hazards!inner(\r\n            event:hira_events!inner(\r\n              project_id\r\n            )\r\n          )\r\n        )\r\n      `)\r\n      .eq('consequence.hazard.event.project_id', projectId);\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    // Delete existing controls if any exist\r\n    if (existingControls?.length > 0) {\r\n      const { error: deleteError } = await supabase\r\n        .from('hira_controls')\r\n        .delete()\r\n        .in('id', existingControls.map(c => c.id));\r\n\r\n      if (deleteError) throw deleteError;\r\n    }\r\n\r\n    // Create new controls\r\n    return createControls(projectId, controlsData);\r\n  } catch (error) {\r\n    console.error('Error updating controls:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getControlsByProjectId(projectId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('hira_controls')\r\n      .select(`\r\n        id,\r\n        additional_mitigation,\r\n        risk_owner,\r\n        target_date,\r\n        date_implemented,\r\n        consequence:hira_consequences!inner(\r\n          id,\r\n          description,\r\n          hazard:hira_hazards!inner(\r\n            event:hira_events!inner(\r\n              project_id\r\n            )\r\n          )\r\n        )\r\n      `)\r\n      .eq('consequence.hazard.event.project_id', projectId);\r\n\r\n    if (error) throw error;\r\n\r\n    return data.map(control => ({\r\n      uniqueId: control.id,\r\n      consequence: control.consequence.description,\r\n      consequenceId: control.consequence.id,\r\n      additionalMitigation: control.additional_mitigation,\r\n      riskOwner: control.risk_owner,\r\n      targetDate: control.target_date,\r\n      dateImplemented: control.date_implemented\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error getting controls:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}