{"ast":null,"code":"import { supabase } from './supabase';\nexport const projectService = {\n  // Save event and all its related data\n  async saveEvent(projectId, eventData) {\n    try {\n      console.log('Saving event for project:', projectId, eventData);\n      let event;\n      // Check if event already exists\n      if (eventData.uniqueId) {\n        const {\n          data: existingEvent,\n          error: fetchError\n        } = await supabase.from('hira_events').select(`\n            id,\n            name,\n            hira_hazards (\n              id,\n              description,\n              hira_consequences (\n                id,\n                description,\n                current_controls\n              )\n            )\n          `).eq('id', eventData.uniqueId).single();\n        if (!fetchError && existingEvent) {\n          // Update existing event\n          const {\n            data: updatedEvent,\n            error: updateError\n          } = await supabase.from('hira_events').update({\n            name: eventData.name,\n            updated_at: new Date().toISOString()\n          }).eq('id', eventData.uniqueId).select().single();\n          if (updateError) throw updateError;\n          event = updatedEvent;\n\n          // Update or delete existing hazards\n          const existingHazards = existingEvent.hira_hazards || [];\n          const newHazardIds = eventData.hazards.map(h => h.uniqueId).filter(Boolean);\n\n          // Delete hazards that are no longer present\n          if (existingHazards.length > 0) {\n            const hazardsToDelete = existingHazards.filter(h => !newHazardIds.includes(h.id)).map(h => h.id);\n            if (hazardsToDelete.length > 0) {\n              const {\n                error: deleteError\n              } = await supabase.from('hira_hazards').delete().in('id', hazardsToDelete);\n              if (deleteError) throw deleteError;\n            }\n          }\n        }\n      }\n\n      // If event doesn't exist, create new one\n      if (!event) {\n        const {\n          data: newEvent,\n          error: createError\n        } = await supabase.from('hira_events').insert({\n          project_id: projectId,\n          name: eventData.name,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select().single();\n        if (createError) throw createError;\n        event = newEvent;\n      }\n      console.log('Event saved:', event);\n\n      // Save hazards\n      for (const hazard of eventData.hazards) {\n        let hazardRecord;\n        if (hazard.uniqueId) {\n          // Update existing hazard\n          const {\n            data: updatedHazard,\n            error: updateError\n          } = await supabase.from('hira_hazards').update({\n            description: hazard.description,\n            updated_at: new Date().toISOString()\n          }).eq('id', hazard.uniqueId).select().single();\n          if (!updateError) hazardRecord = updatedHazard;\n        }\n\n        // Create new hazard if update failed or hazard doesn't exist\n        if (!hazardRecord) {\n          const {\n            data: newHazard,\n            error: createError\n          } = await supabase.from('hira_hazards').insert({\n            event_id: event.id,\n            description: hazard.description,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }).select().single();\n          if (createError) throw createError;\n          hazardRecord = newHazard;\n        }\n\n        // Handle consequences for this hazard\n        const existingConsequences = hazard.uniqueId ? (await supabase.from('hira_consequences').select('id').eq('hazard_id', hazard.uniqueId)).data || [] : [];\n        const newConsequenceIds = hazard.consequences.map(c => c.uniqueId).filter(Boolean);\n\n        // Delete consequences that are no longer present\n        if (existingConsequences.length > 0) {\n          const consequencesToDelete = existingConsequences.filter(c => !newConsequenceIds.includes(c.id)).map(c => c.id);\n          if (consequencesToDelete.length > 0) {\n            const {\n              error: deleteError\n            } = await supabase.from('hira_consequences').delete().in('id', consequencesToDelete);\n            if (deleteError) throw deleteError;\n          }\n        }\n\n        // Save consequences\n        for (const consequence of hazard.consequences) {\n          if (consequence.uniqueId) {\n            // Update existing consequence\n            const {\n              error: updateError\n            } = await supabase.from('hira_consequences').update({\n              description: consequence.description,\n              current_controls: consequence.currentControls,\n              updated_at: new Date().toISOString()\n            }).eq('id', consequence.uniqueId);\n            if (!updateError) continue;\n          }\n\n          // Create new consequence if update failed or consequence doesn't exist\n          const {\n            error: createError\n          } = await supabase.from('hira_consequences').insert({\n            hazard_id: hazardRecord.id,\n            description: consequence.description,\n            current_controls: consequence.currentControls,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          });\n          if (createError) throw createError;\n        }\n      }\n\n      // Then save each hazard for this event\n      for (const hazard of eventData.hazards) {\n        const {\n          data: hazardData,\n          error: hazardError\n        } = await supabase.from('hira_hazards').insert({\n          event_id: event.id,\n          description: hazard.description,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select().single();\n        if (hazardError) {\n          console.error('Error saving hazard:', hazardError);\n          throw hazardError;\n        }\n        console.log('Hazard saved:', hazardData);\n\n        // Save consequences for this hazard\n        const savedConsequences = [];\n        for (const consequence of hazard.consequences) {\n          const {\n            data: consequenceData,\n            error: consequenceError\n          } = await supabase.from('hira_consequences').insert({\n            hazard_id: hazardData.id,\n            description: consequence.description,\n            current_controls: consequence.currentControls,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }).select().single();\n          if (consequenceError) {\n            console.error('Error saving consequence:', consequenceError);\n            throw consequenceError;\n          }\n          console.log('Consequence saved:', consequenceData);\n          savedConsequences.push({\n            ...consequence,\n            uniqueId: consequenceData.id // Update uniqueId to match database ID\n          });\n        }\n\n        // Update hazard with saved consequences\n        hazard.consequences = savedConsequences;\n      }\n      return event;\n    } catch (error) {\n      console.error('Error in saveEvent:', error);\n      throw error;\n    }\n  },\n  // Load all events and related data for a project\n  async loadProjectData(projectId) {\n    try {\n      console.log('Loading project data:', projectId);\n\n      // Get all events for the project with their related data\n      const {\n        data: events,\n        error: eventsError\n      } = await supabase.from('hira_events').select(`\n          id,\n          name,\n          hira_hazards (\n            id,\n            description,\n            hira_consequences (\n              id,\n              description,\n              current_controls\n            )\n          )\n        `).eq('project_id', projectId);\n      if (eventsError) {\n        console.error('Error loading events:', eventsError);\n        throw eventsError;\n      }\n      console.log('Loaded events:', events);\n\n      // Transform the data to match the frontend structure\n      return events.map(event => ({\n        uniqueId: event.id,\n        name: event.name,\n        hazards: event.hira_hazards.map(hazard => ({\n          uniqueId: hazard.id,\n          description: hazard.description,\n          consequences: hazard.hira_consequences.map(consequence => ({\n            uniqueId: consequence.id,\n            // Use database ID as uniqueId\n            description: consequence.description,\n            currentControls: consequence.current_controls\n          }))\n        }))\n      }));\n    } catch (error) {\n      console.error('Error in loadProjectData:', error);\n      throw error;\n    }\n  },\n  // Delete all data for a project\n  async deleteProjectData(projectId) {\n    try {\n      console.log('Deleting project data:', projectId);\n\n      // First get all events for this project\n      const {\n        data: events,\n        error: eventsQueryError\n      } = await supabase.from('hira_events').select('id').eq('project_id', projectId);\n      if (eventsQueryError) throw eventsQueryError;\n\n      // Get all hazards for these events\n      const {\n        data: hazards,\n        error: hazardsQueryError\n      } = await supabase.from('hira_hazards').select('id').in('event_id', events.map(e => e.id));\n      if (hazardsQueryError) throw hazardsQueryError;\n\n      // Get all consequences for these hazards\n      const {\n        data: consequences,\n        error: consequencesQueryError\n      } = await supabase.from('hira_consequences').select('id').in('hazard_id', hazards.map(h => h.id));\n      if (consequencesQueryError) throw consequencesQueryError;\n\n      // Delete risk assessments linked to these consequences\n      const {\n        error: assessmentsError\n      } = await supabase.from('hira_risk_assessments').delete().in('consequence_id', consequences.map(c => c.id));\n      if (assessmentsError) throw assessmentsError;\n\n      // Delete consequences\n      const {\n        error: consequencesError\n      } = await supabase.from('hira_consequences').delete().in('hazard_id', hazards.map(h => h.id));\n      if (consequencesError) throw consequencesError;\n\n      // Delete hazards\n      const {\n        error: hazardsError\n      } = await supabase.from('hira_hazards').delete().in('event_id', events.map(e => e.id));\n      if (hazardsError) throw hazardsError;\n\n      // Delete events\n      const {\n        error: eventsError\n      } = await supabase.from('hira_events').delete().eq('project_id', projectId);\n      if (eventsError) throw eventsError;\n      console.log('Project data deleted successfully');\n    } catch (error) {\n      console.error('Error in deleteProjectData:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","projectService","saveEvent","projectId","eventData","console","log","event","uniqueId","data","existingEvent","error","fetchError","from","select","eq","single","updatedEvent","updateError","update","name","updated_at","Date","toISOString","existingHazards","hira_hazards","newHazardIds","hazards","map","h","filter","Boolean","length","hazardsToDelete","includes","id","deleteError","delete","in","newEvent","createError","insert","project_id","created_at","hazard","hazardRecord","updatedHazard","description","newHazard","event_id","existingConsequences","newConsequenceIds","consequences","c","consequencesToDelete","consequence","current_controls","currentControls","hazard_id","hazardData","hazardError","savedConsequences","consequenceData","consequenceError","push","loadProjectData","events","eventsError","hira_consequences","deleteProjectData","eventsQueryError","hazardsQueryError","e","consequencesQueryError","assessmentsError","consequencesError","hazardsError"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/projectService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const projectService = {\r\n  // Save event and all its related data\r\n  async saveEvent(projectId, eventData) {\r\n    try {\r\n      console.log('Saving event for project:', projectId, eventData);\r\n\r\n      let event;\r\n      // Check if event already exists\r\n      if (eventData.uniqueId) {\r\n        const { data: existingEvent, error: fetchError } = await supabase\r\n          .from('hira_events')\r\n          .select(`\r\n            id,\r\n            name,\r\n            hira_hazards (\r\n              id,\r\n              description,\r\n              hira_consequences (\r\n                id,\r\n                description,\r\n                current_controls\r\n              )\r\n            )\r\n          `)\r\n          .eq('id', eventData.uniqueId)\r\n          .single();\r\n\r\n        if (!fetchError && existingEvent) {\r\n          // Update existing event\r\n          const { data: updatedEvent, error: updateError } = await supabase\r\n            .from('hira_events')\r\n            .update({\r\n              name: eventData.name,\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', eventData.uniqueId)\r\n            .select()\r\n            .single();\r\n\r\n          if (updateError) throw updateError;\r\n          event = updatedEvent;\r\n\r\n          // Update or delete existing hazards\r\n          const existingHazards = existingEvent.hira_hazards || [];\r\n          const newHazardIds = eventData.hazards.map(h => h.uniqueId).filter(Boolean);\r\n\r\n          // Delete hazards that are no longer present\r\n          if (existingHazards.length > 0) {\r\n            const hazardsToDelete = existingHazards\r\n              .filter(h => !newHazardIds.includes(h.id))\r\n              .map(h => h.id);\r\n\r\n            if (hazardsToDelete.length > 0) {\r\n              const { error: deleteError } = await supabase\r\n                .from('hira_hazards')\r\n                .delete()\r\n                .in('id', hazardsToDelete);\r\n\r\n              if (deleteError) throw deleteError;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // If event doesn't exist, create new one\r\n      if (!event) {\r\n        const { data: newEvent, error: createError } = await supabase\r\n          .from('hira_events')\r\n          .insert({\r\n            project_id: projectId,\r\n            name: eventData.name,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) throw createError;\r\n        event = newEvent;\r\n      }\r\n\r\n      console.log('Event saved:', event);\r\n\r\n      // Save hazards\r\n      for (const hazard of eventData.hazards) {\r\n        let hazardRecord;\r\n        if (hazard.uniqueId) {\r\n          // Update existing hazard\r\n          const { data: updatedHazard, error: updateError } = await supabase\r\n            .from('hira_hazards')\r\n            .update({\r\n              description: hazard.description,\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', hazard.uniqueId)\r\n            .select()\r\n            .single();\r\n\r\n          if (!updateError) hazardRecord = updatedHazard;\r\n        }\r\n\r\n        // Create new hazard if update failed or hazard doesn't exist\r\n        if (!hazardRecord) {\r\n          const { data: newHazard, error: createError } = await supabase\r\n            .from('hira_hazards')\r\n            .insert({\r\n              event_id: event.id,\r\n              description: hazard.description,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .select()\r\n            .single();\r\n\r\n          if (createError) throw createError;\r\n          hazardRecord = newHazard;\r\n        }\r\n\r\n        // Handle consequences for this hazard\r\n        const existingConsequences = hazard.uniqueId ?\r\n          (await supabase\r\n            .from('hira_consequences')\r\n            .select('id')\r\n            .eq('hazard_id', hazard.uniqueId)).data || [] : [];\r\n\r\n        const newConsequenceIds = hazard.consequences.map(c => c.uniqueId).filter(Boolean);\r\n\r\n        // Delete consequences that are no longer present\r\n        if (existingConsequences.length > 0) {\r\n          const consequencesToDelete = existingConsequences\r\n            .filter(c => !newConsequenceIds.includes(c.id))\r\n            .map(c => c.id);\r\n\r\n          if (consequencesToDelete.length > 0) {\r\n            const { error: deleteError } = await supabase\r\n              .from('hira_consequences')\r\n              .delete()\r\n              .in('id', consequencesToDelete);\r\n\r\n            if (deleteError) throw deleteError;\r\n          }\r\n        }\r\n\r\n        // Save consequences\r\n        for (const consequence of hazard.consequences) {\r\n          if (consequence.uniqueId) {\r\n            // Update existing consequence\r\n            const { error: updateError } = await supabase\r\n              .from('hira_consequences')\r\n              .update({\r\n                description: consequence.description,\r\n                current_controls: consequence.currentControls,\r\n                updated_at: new Date().toISOString()\r\n              })\r\n              .eq('id', consequence.uniqueId);\r\n\r\n            if (!updateError) continue;\r\n          }\r\n\r\n          // Create new consequence if update failed or consequence doesn't exist\r\n          const { error: createError } = await supabase\r\n            .from('hira_consequences')\r\n            .insert({\r\n              hazard_id: hazardRecord.id,\r\n              description: consequence.description,\r\n              current_controls: consequence.currentControls,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            });\r\n\r\n          if (createError) throw createError;\r\n        }\r\n      }\r\n\r\n      // Then save each hazard for this event\r\n      for (const hazard of eventData.hazards) {\r\n        const { data: hazardData, error: hazardError } = await supabase\r\n          .from('hira_hazards')\r\n          .insert({\r\n            event_id: event.id,\r\n            description: hazard.description,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (hazardError) {\r\n          console.error('Error saving hazard:', hazardError);\r\n          throw hazardError;\r\n        }\r\n\r\n        console.log('Hazard saved:', hazardData);\r\n\r\n        // Save consequences for this hazard\r\n        const savedConsequences = [];\r\n        for (const consequence of hazard.consequences) {\r\n          const { data: consequenceData, error: consequenceError } = await supabase\r\n            .from('hira_consequences')\r\n            .insert({\r\n              hazard_id: hazardData.id,\r\n              description: consequence.description,\r\n              current_controls: consequence.currentControls,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .select()\r\n            .single();\r\n\r\n          if (consequenceError) {\r\n            console.error('Error saving consequence:', consequenceError);\r\n            throw consequenceError;\r\n          }\r\n\r\n          console.log('Consequence saved:', consequenceData);\r\n          savedConsequences.push({\r\n            ...consequence,\r\n            uniqueId: consequenceData.id // Update uniqueId to match database ID\r\n          });\r\n        }\r\n\r\n        // Update hazard with saved consequences\r\n        hazard.consequences = savedConsequences;\r\n      }\r\n\r\n      return event;\r\n    } catch (error) {\r\n      console.error('Error in saveEvent:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Load all events and related data for a project\r\n  async loadProjectData(projectId) {\r\n    try {\r\n      console.log('Loading project data:', projectId);\r\n\r\n      // Get all events for the project with their related data\r\n      const { data: events, error: eventsError } = await supabase\r\n        .from('hira_events')\r\n        .select(`\r\n          id,\r\n          name,\r\n          hira_hazards (\r\n            id,\r\n            description,\r\n            hira_consequences (\r\n              id,\r\n              description,\r\n              current_controls\r\n            )\r\n          )\r\n        `)\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsError) {\r\n        console.error('Error loading events:', eventsError);\r\n        throw eventsError;\r\n      }\r\n\r\n      console.log('Loaded events:', events);\r\n\r\n      // Transform the data to match the frontend structure\r\n      return events.map(event => ({\r\n        uniqueId: event.id,\r\n        name: event.name,\r\n        hazards: event.hira_hazards.map(hazard => ({\r\n          uniqueId: hazard.id,\r\n          description: hazard.description,\r\n          consequences: hazard.hira_consequences.map(consequence => ({\r\n            uniqueId: consequence.id, // Use database ID as uniqueId\r\n            description: consequence.description,\r\n            currentControls: consequence.current_controls\r\n          }))\r\n        }))\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error in loadProjectData:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete all data for a project\r\n  async deleteProjectData(projectId) {\r\n    try {\r\n      console.log('Deleting project data:', projectId);\r\n\r\n      // First get all events for this project\r\n      const { data: events, error: eventsQueryError } = await supabase\r\n        .from('hira_events')\r\n        .select('id')\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsQueryError) throw eventsQueryError;\r\n\r\n      // Get all hazards for these events\r\n      const { data: hazards, error: hazardsQueryError } = await supabase\r\n        .from('hira_hazards')\r\n        .select('id')\r\n        .in('event_id', events.map(e => e.id));\r\n\r\n      if (hazardsQueryError) throw hazardsQueryError;\r\n\r\n      // Get all consequences for these hazards\r\n      const { data: consequences, error: consequencesQueryError } = await supabase\r\n        .from('hira_consequences')\r\n        .select('id')\r\n        .in('hazard_id', hazards.map(h => h.id));\r\n\r\n      if (consequencesQueryError) throw consequencesQueryError;\r\n\r\n      // Delete risk assessments linked to these consequences\r\n      const { error: assessmentsError } = await supabase\r\n        .from('hira_risk_assessments')\r\n        .delete()\r\n        .in('consequence_id', consequences.map(c => c.id));\r\n\r\n      if (assessmentsError) throw assessmentsError;\r\n\r\n      // Delete consequences\r\n      const { error: consequencesError } = await supabase\r\n        .from('hira_consequences')\r\n        .delete()\r\n        .in('hazard_id', hazards.map(h => h.id));\r\n\r\n      if (consequencesError) throw consequencesError;\r\n\r\n      // Delete hazards\r\n      const { error: hazardsError } = await supabase\r\n        .from('hira_hazards')\r\n        .delete()\r\n        .in('event_id', events.map(e => e.id));\r\n\r\n      if (hazardsError) throw hazardsError;\r\n\r\n      // Delete events\r\n      const { error: eventsError } = await supabase\r\n        .from('hira_events')\r\n        .delete()\r\n        .eq('project_id', projectId);\r\n\r\n      if (eventsError) throw eventsError;\r\n\r\n      console.log('Project data deleted successfully');\r\n    } catch (error) {\r\n      console.error('Error in deleteProjectData:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}