{"ast":null,"code":"import { RISK_MATRIX } from '../constants/icaoMatrix';\nexport function calculateICAORiskTolerability(probability, severity) {\n  const riskIndex = `${probability}${severity}`;\n  return RISK_MATRIX[riskIndex] || 'ACCEPTABLE';\n}\nexport function calculateRiskRating(probability, severity) {\n  const riskValue = probability * severity;\n  if (riskValue <= 4) return 'Low';\n  if (riskValue <= 9) return 'Medium';\n  if (riskValue <= 14) return 'High';\n  return 'Extreme';\n}\nexport function calculateHighestRisk(assessments, matrixType) {\n  if (!assessments || assessments.length === 0) {\n    return 'LOW';\n  }\n  const riskLevels = {\n    'INTOLERABLE': 4,\n    'TOLERABLE': 3,\n    'ACCEPTABLE': 2,\n    'LOW': 1,\n    'MEDIUM': 2,\n    'HIGH': 3,\n    'EXTREME': 4\n  };\n  let highestRisk = 'LOW';\n  for (const assessment of assessments) {\n    let currentRisk;\n    if (matrixType === 'ICAO') {\n      currentRisk = calculateICAORiskTolerability(assessment.probability, assessment.severity);\n    } else {\n      currentRisk = calculateRiskRating(assessment.likelihood, assessment.impact);\n    }\n    if (riskLevels[currentRisk.toUpperCase()] > riskLevels[highestRisk.toUpperCase()]) {\n      highestRisk = currentRisk;\n    }\n  }\n  return highestRisk;\n}","map":{"version":3,"names":["RISK_MATRIX","calculateICAORiskTolerability","probability","severity","riskIndex","calculateRiskRating","riskValue","calculateHighestRisk","assessments","matrixType","length","riskLevels","highestRisk","assessment","currentRisk","likelihood","impact","toUpperCase"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/utils/riskCalculations.js"],"sourcesContent":["import { RISK_MATRIX } from '../constants/icaoMatrix';\n\nexport function calculateICAORiskTolerability(probability, severity) {\n  const riskIndex = `${probability}${severity}`;\n  return RISK_MATRIX[riskIndex] || 'ACCEPTABLE';\n}\n\nexport function calculateRiskRating(probability, severity) {\n  const riskValue = probability * severity;\n  \n  if (riskValue <= 4) return 'Low';\n  if (riskValue <= 9) return 'Medium';\n  if (riskValue <= 14) return 'High';\n  return 'Extreme';\n}\n\nexport function calculateHighestRisk(assessments, matrixType) {\n  if (!assessments || assessments.length === 0) {\n    return 'LOW';\n  }\n\n  const riskLevels = {\n    'INTOLERABLE': 4,\n    'TOLERABLE': 3,\n    'ACCEPTABLE': 2,\n    'LOW': 1,\n    'MEDIUM': 2,\n    'HIGH': 3,\n    'EXTREME': 4\n  };\n\n  let highestRisk = 'LOW';\n\n  for (const assessment of assessments) {\n    let currentRisk;\n    if (matrixType === 'ICAO') {\n      currentRisk = calculateICAORiskTolerability(assessment.probability, assessment.severity);\n    } else {\n        currentRisk = calculateRiskRating(assessment.likelihood, assessment.impact);\n    }\n\n    if (riskLevels[currentRisk.toUpperCase()] > riskLevels[highestRisk.toUpperCase()]) {\n      highestRisk = currentRisk;\n    }\n  }\n\n  return highestRisk;\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,yBAAyB;AAErD,OAAO,SAASC,6BAA6BA,CAACC,WAAW,EAAEC,QAAQ,EAAE;EACnE,MAAMC,SAAS,GAAG,GAAGF,WAAW,GAAGC,QAAQ,EAAE;EAC7C,OAAOH,WAAW,CAACI,SAAS,CAAC,IAAI,YAAY;AAC/C;AAEA,OAAO,SAASC,mBAAmBA,CAACH,WAAW,EAAEC,QAAQ,EAAE;EACzD,MAAMG,SAAS,GAAGJ,WAAW,GAAGC,QAAQ;EAExC,IAAIG,SAAS,IAAI,CAAC,EAAE,OAAO,KAAK;EAChC,IAAIA,SAAS,IAAI,CAAC,EAAE,OAAO,QAAQ;EACnC,IAAIA,SAAS,IAAI,EAAE,EAAE,OAAO,MAAM;EAClC,OAAO,SAAS;AAClB;AAEA,OAAO,SAASC,oBAAoBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAC5D,IAAI,CAACD,WAAW,IAAIA,WAAW,CAACE,MAAM,KAAK,CAAC,EAAE;IAC5C,OAAO,KAAK;EACd;EAEA,MAAMC,UAAU,GAAG;IACjB,aAAa,EAAE,CAAC;IAChB,WAAW,EAAE,CAAC;IACd,YAAY,EAAE,CAAC;IACf,KAAK,EAAE,CAAC;IACR,QAAQ,EAAE,CAAC;IACX,MAAM,EAAE,CAAC;IACT,SAAS,EAAE;EACb,CAAC;EAED,IAAIC,WAAW,GAAG,KAAK;EAEvB,KAAK,MAAMC,UAAU,IAAIL,WAAW,EAAE;IACpC,IAAIM,WAAW;IACf,IAAIL,UAAU,KAAK,MAAM,EAAE;MACzBK,WAAW,GAAGb,6BAA6B,CAACY,UAAU,CAACX,WAAW,EAAEW,UAAU,CAACV,QAAQ,CAAC;IAC1F,CAAC,MAAM;MACHW,WAAW,GAAGT,mBAAmB,CAACQ,UAAU,CAACE,UAAU,EAAEF,UAAU,CAACG,MAAM,CAAC;IAC/E;IAEA,IAAIL,UAAU,CAACG,WAAW,CAACG,WAAW,CAAC,CAAC,CAAC,GAAGN,UAAU,CAACC,WAAW,CAACK,WAAW,CAAC,CAAC,CAAC,EAAE;MACjFL,WAAW,GAAGE,WAAW;IAC3B;EACF;EAEA,OAAOF,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}