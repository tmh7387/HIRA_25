{"ast":null,"code":"import { supabase } from './supabase';\nexport async function createControl(assessmentId, controlData) {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_controls').insert({\n      assessment_id: assessmentId,\n      additional_mitigation: controlData.additionalMitigation,\n      risk_owner: controlData.riskOwner,\n      target_date: controlData.targetDate,\n      date_implemented: controlData.dateImplemented,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }).select().single();\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error creating control:', error);\n    throw error;\n  }\n}\nexport async function updateControl(controlId, controlData) {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_controls').update({\n      additional_mitigation: controlData.additionalMitigation,\n      risk_owner: controlData.riskOwner,\n      target_date: controlData.targetDate,\n      date_implemented: controlData.dateImplemented,\n      updated_at: new Date().toISOString()\n    }).eq('id', controlId).select().single();\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error updating control:', error);\n    throw error;\n  }\n}\nexport async function getControlByAssessmentId(assessmentId) {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_controls').select(`\n        id,\n        assessment_id,\n        additional_mitigation,\n        risk_owner,\n        target_date,\n        date_implemented\n      `).eq('assessment_id', assessmentId).single();\n    if (error && error.code !== 'PGRST116') {\n      // Ignore \"not found\" error\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Error getting control:', error);\n    throw error;\n  }\n}\nexport async function deleteControl(controlId) {\n  try {\n    const {\n      error\n    } = await supabase.from('hira_risk_controls').delete().eq('id', controlId);\n    if (error) throw error;\n  } catch (error) {\n    console.error('Error deleting control:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","createControl","assessmentId","controlData","data","error","from","insert","assessment_id","additional_mitigation","additionalMitigation","risk_owner","riskOwner","target_date","targetDate","date_implemented","dateImplemented","created_at","Date","toISOString","updated_at","select","single","console","updateControl","controlId","update","eq","getControlByAssessmentId","code","deleteControl","delete"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/controlService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function createControl(assessmentId, controlData) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_controls')\r\n      .insert({\r\n        assessment_id: assessmentId,\r\n        additional_mitigation: controlData.additionalMitigation,\r\n        risk_owner: controlData.riskOwner,\r\n        target_date: controlData.targetDate,\r\n        date_implemented: controlData.dateImplemented,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating control:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateControl(controlId, controlData) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_controls')\r\n      .update({\r\n        additional_mitigation: controlData.additionalMitigation,\r\n        risk_owner: controlData.riskOwner,\r\n        target_date: controlData.targetDate,\r\n        date_implemented: controlData.dateImplemented,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', controlId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error updating control:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getControlByAssessmentId(assessmentId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_controls')\r\n      .select(`\r\n        id,\r\n        assessment_id,\r\n        additional_mitigation,\r\n        risk_owner,\r\n        target_date,\r\n        date_implemented\r\n      `)\r\n      .eq('assessment_id', assessmentId)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') { // Ignore \"not found\" error\r\n      throw error;\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error getting control:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function deleteControl(controlId) {\r\n  try {\r\n    const { error } = await supabase\r\n      .from('hira_risk_controls')\r\n      .delete()\r\n      .eq('id', controlId);\r\n\r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('Error deleting control:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}