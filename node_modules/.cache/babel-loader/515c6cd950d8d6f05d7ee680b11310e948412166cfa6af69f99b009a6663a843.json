{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Constants for file upload limits\nconst MAX_FILES = 5;\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\nconst BUCKET_NAME = 'hira-files';\nconst SUBFOLDER = 'operational-images';\n\n// Helper function to list files in storage for a specific project\nexport const listFiles = async project_id => {\n  if (!project_id) {\n    console.error('Project ID is required to list files');\n    return [];\n  }\n  try {\n    console.log('Listing files for project:', project_id);\n    const {\n      data,\n      error\n    } = await supabase.storage.from(BUCKET_NAME).list(SUBFOLDER);\n    if (error) {\n      console.error('Error listing files:', error);\n      return [];\n    }\n    if (!data) {\n      console.log('No files found');\n      return [];\n    }\n\n    // Filter files by project_id in the filename\n    const projectFiles = data.filter(file => file.name.startsWith(`${project_id}_`));\n    console.log('Project files:', projectFiles);\n\n    // Get public URLs for project files\n    const filesWithUrls = await Promise.all(projectFiles.map(async file => {\n      var _file$metadata, _file$metadata2;\n      const filePath = `${SUBFOLDER}/${file.name}`;\n      const {\n        data: {\n          publicUrl\n        }\n      } = supabase.storage.from(BUCKET_NAME).getPublicUrl(filePath);\n\n      // Extract original filename from the stored name\n      const originalName = file.name.split('_').slice(2).join('_');\n      return {\n        name: originalName,\n        size: ((_file$metadata = file.metadata) === null || _file$metadata === void 0 ? void 0 : _file$metadata.size) || 0,\n        path: filePath,\n        url: publicUrl,\n        type: ((_file$metadata2 = file.metadata) === null || _file$metadata2 === void 0 ? void 0 : _file$metadata2.mimetype) || 'application/octet-stream',\n        project_id\n      };\n    }));\n    console.log('Files with URLs:', filesWithUrls);\n    return filesWithUrls;\n  } catch (error) {\n    console.error('Error listing files:', error);\n    return [];\n  }\n};\n\n// Helper function to validate files\nexport const validateFiles = (newFiles, existingFiles = []) => {\n  const totalFiles = existingFiles.length + newFiles.length;\n  if (totalFiles > MAX_FILES) {\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\n  }\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\n  const totalSize = existingSize + newSize;\n  if (totalSize > MAX_TOTAL_SIZE) {\n    throw new Error(`Total file size cannot exceed 50MB`);\n  }\n  return true;\n};\n\n// Helper function to upload file\nexport const uploadFile = async (file, project_id, existingFiles = []) => {\n  if (!project_id) {\n    throw new Error('Project ID is required to upload files');\n  }\n  try {\n    validateFiles([file], existingFiles);\n    const timestamp = Date.now();\n    const fileName = `${project_id}_${timestamp}_${file.name}`;\n    const filePath = `${SUBFOLDER}/${fileName}`;\n    console.log('Uploading file:', {\n      originalName: file.name,\n      fileName,\n      filePath,\n      project_id\n    });\n    const {\n      data,\n      error\n    } = await supabase.storage.from(BUCKET_NAME).upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false,\n      contentType: file.type,\n      duplex: 'half',\n      metadata: {\n        project_id,\n        originalName: file.name,\n        size: file.size,\n        type: file.type,\n        timestamp\n      }\n    });\n    if (error) throw error;\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from(BUCKET_NAME).getPublicUrl(filePath);\n    return {\n      url: publicUrl,\n      path: filePath,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      project_id\n    };\n  } catch (error) {\n    console.error('File upload error:', error);\n    throw error;\n  }\n};\n\n// Helper function to delete file\nexport const deleteFile = async path => {\n  try {\n    console.log('Deleting file:', path);\n    const {\n      error\n    } = await supabase.storage.from(BUCKET_NAME).remove([path]);\n    if (error) throw error;\n    console.log('File deleted successfully');\n  } catch (error) {\n    console.error('File deletion error:', error);\n    throw error;\n  }\n};\n\n// Helper function to get file size in readable format\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","MAX_FILES","MAX_TOTAL_SIZE","BUCKET_NAME","SUBFOLDER","listFiles","project_id","console","error","log","data","storage","from","list","projectFiles","filter","file","name","startsWith","filesWithUrls","Promise","all","map","_file$metadata","_file$metadata2","filePath","publicUrl","getPublicUrl","originalName","split","slice","join","size","metadata","path","url","type","mimetype","validateFiles","newFiles","existingFiles","totalFiles","length","existingSize","reduce","total","newSize","totalSize","uploadFile","timestamp","Date","now","fileName","upload","cacheControl","upsert","contentType","duplex","deleteFile","remove","formatFileSize","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Constants for file upload limits\r\nconst MAX_FILES = 5;\r\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\r\nconst BUCKET_NAME = 'hira-files';\r\nconst SUBFOLDER = 'operational-images';\r\n\r\n// Helper function to list files in storage for a specific project\r\nexport const listFiles = async (project_id) => {\r\n  if (!project_id) {\r\n    console.error('Project ID is required to list files');\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    console.log('Listing files for project:', project_id);\r\n    \r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .list(SUBFOLDER);\r\n\r\n    if (error) {\r\n      console.error('Error listing files:', error);\r\n      return [];\r\n    }\r\n\r\n    if (!data) {\r\n      console.log('No files found');\r\n      return [];\r\n    }\r\n\r\n    // Filter files by project_id in the filename\r\n    const projectFiles = data.filter(file => file.name.startsWith(`${project_id}_`));\r\n    console.log('Project files:', projectFiles);\r\n\r\n    // Get public URLs for project files\r\n    const filesWithUrls = await Promise.all(projectFiles.map(async (file) => {\r\n      const filePath = `${SUBFOLDER}/${file.name}`;\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from(BUCKET_NAME)\r\n        .getPublicUrl(filePath);\r\n\r\n      // Extract original filename from the stored name\r\n      const originalName = file.name.split('_').slice(2).join('_');\r\n\r\n      return {\r\n        name: originalName,\r\n        size: file.metadata?.size || 0,\r\n        path: filePath,\r\n        url: publicUrl,\r\n        type: file.metadata?.mimetype || 'application/octet-stream',\r\n        project_id\r\n      };\r\n    }));\r\n\r\n    console.log('Files with URLs:', filesWithUrls);\r\n    return filesWithUrls;\r\n  } catch (error) {\r\n    console.error('Error listing files:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to validate files\r\nexport const validateFiles = (newFiles, existingFiles = []) => {\r\n  const totalFiles = existingFiles.length + newFiles.length;\r\n  if (totalFiles > MAX_FILES) {\r\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\r\n  }\r\n\r\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\r\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\r\n  const totalSize = existingSize + newSize;\r\n\r\n  if (totalSize > MAX_TOTAL_SIZE) {\r\n    throw new Error(`Total file size cannot exceed 50MB`);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Helper function to upload file\r\nexport const uploadFile = async (file, project_id, existingFiles = []) => {\r\n  if (!project_id) {\r\n    throw new Error('Project ID is required to upload files');\r\n  }\r\n\r\n  try {\r\n    validateFiles([file], existingFiles);\r\n\r\n    const timestamp = Date.now();\r\n    const fileName = `${project_id}_${timestamp}_${file.name}`;\r\n    const filePath = `${SUBFOLDER}/${fileName}`;\r\n\r\n    console.log('Uploading file:', {\r\n      originalName: file.name,\r\n      fileName,\r\n      filePath,\r\n      project_id\r\n    });\r\n\r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .upload(filePath, file, {\r\n        cacheControl: '3600',\r\n        upsert: false,\r\n        contentType: file.type,\r\n        duplex: 'half',\r\n        metadata: {\r\n          project_id,\r\n          originalName: file.name,\r\n          size: file.size,\r\n          type: file.type,\r\n          timestamp\r\n        }\r\n      });\r\n\r\n    if (error) throw error;\r\n\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .getPublicUrl(filePath);\r\n\r\n    return {\r\n      url: publicUrl,\r\n      path: filePath,\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      project_id\r\n    };\r\n  } catch (error) {\r\n    console.error('File upload error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to delete file\r\nexport const deleteFile = async (path) => {\r\n  try {\r\n    console.log('Deleting file:', path);\r\n\r\n    const { error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .remove([path]);\r\n\r\n    if (error) throw error;\r\n\r\n    console.log('File deleted successfully');\r\n  } catch (error) {\r\n    console.error('File deletion error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to get file size in readable format\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}