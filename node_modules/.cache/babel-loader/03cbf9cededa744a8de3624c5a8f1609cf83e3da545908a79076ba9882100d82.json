{"ast":null,"code":"import { create } from 'zustand';\nimport { supabase } from '../services/supabase';\nconst useProjectStore = create((set, get) => ({\n  projects: [],\n  currentProject: null,\n  currentStep: 0,\n  isLoading: false,\n  error: null,\n  setCurrentProject: project => set({\n    currentProject: project\n  }),\n  setCurrentStep: step => set({\n    currentStep: step\n  }),\n  clearError: () => set({\n    error: null\n  }),\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  loadProjects: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').select('*').order('created_at', {\n        ascending: false\n      });\n      if (error) throw error;\n\n      // Parse operational_files from JSON if it exists\n      const projectsWithFiles = (data === null || data === void 0 ? void 0 : data.map(project => ({\n        ...project,\n        operational_files: project.operational_files || []\n      }))) || [];\n      set({\n        projects: projectsWithFiles\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  createProject: async projectData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // Ensure operational_files is an array\n      const formattedData = {\n        project_id: projectData.projectId,\n        title: projectData.title,\n        date: projectData.date,\n        facilitator: projectData.facilitator,\n        attendees: projectData.attendees || [],\n        operational_desc: projectData.operational_desc,\n        operational_files: projectData.operational_files || []\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').insert([formattedData]).select().single();\n      if (error) throw error;\n\n      // Parse operational_files from JSON if it exists\n      const projectWithFiles = {\n        ...data,\n        operational_files: data.operational_files || []\n      };\n      set(state => ({\n        projects: [projectWithFiles, ...state.projects],\n        currentProject: projectWithFiles\n      }));\n    } catch (error) {\n      console.error('Create project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  updateProject: async (projectId, projectData) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // Ensure operational_files is an array\n      const formattedData = {\n        title: projectData.title,\n        date: projectData.date,\n        facilitator: projectData.facilitator,\n        attendees: projectData.attendees || [],\n        operational_desc: projectData.operational_desc,\n        operational_files: projectData.operational_files || []\n      };\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').update(formattedData).eq('project_id', projectId).select().single();\n      if (error) throw error;\n\n      // Parse operational_files from JSON if it exists\n      const projectWithFiles = {\n        ...data,\n        operational_files: data.operational_files || []\n      };\n      set(state => ({\n        projects: state.projects.map(p => p.project_id === projectId ? projectWithFiles : p),\n        currentProject: projectWithFiles\n      }));\n    } catch (error) {\n      console.error('Update project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  deleteProject: async projectId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        error\n      } = await supabase.from('hira_projects').delete().eq('project_id', projectId);\n      if (error) throw error;\n      set(state => ({\n        projects: state.projects.filter(p => p.project_id !== projectId),\n        currentProject: null\n      }));\n    } catch (error) {\n      console.error('Delete project error:', error);\n      set({\n        error: error.message\n      });\n      throw error;\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  }\n}));\nexport default useProjectStore;","map":{"version":3,"names":["create","supabase","useProjectStore","set","get","projects","currentProject","currentStep","isLoading","error","setCurrentProject","project","setCurrentStep","step","clearError","setLoading","loadProjects","data","from","select","order","ascending","projectsWithFiles","map","operational_files","message","createProject","projectData","formattedData","project_id","projectId","title","date","facilitator","attendees","operational_desc","insert","single","projectWithFiles","state","console","updateProject","update","eq","p","deleteProject","delete","filter"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/stores/projectStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { supabase } from '../services/supabase';\r\n\r\nconst useProjectStore = create((set, get) => ({\r\n  projects: [],\r\n  currentProject: null,\r\n  currentStep: 0,\r\n  isLoading: false,\r\n  error: null,\r\n\r\n  setCurrentProject: (project) => set({ currentProject: project }),\r\n  setCurrentStep: (step) => set({ currentStep: step }),\r\n  clearError: () => set({ error: null }),\r\n  setLoading: (isLoading) => set({ isLoading }),\r\n\r\n  loadProjects: async () => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      // Parse operational_files from JSON if it exists\r\n      const projectsWithFiles = data?.map(project => ({\r\n        ...project,\r\n        operational_files: project.operational_files || []\r\n      })) || [];\r\n\r\n      set({ projects: projectsWithFiles });\r\n    } catch (error) {\r\n      set({ error: error.message });\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  createProject: async (projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      // Ensure operational_files is an array\r\n      const formattedData = {\r\n        project_id: projectData.projectId,\r\n        title: projectData.title,\r\n        date: projectData.date,\r\n        facilitator: projectData.facilitator,\r\n        attendees: projectData.attendees || [],\r\n        operational_desc: projectData.operational_desc,\r\n        operational_files: projectData.operational_files || []\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .insert([formattedData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Parse operational_files from JSON if it exists\r\n      const projectWithFiles = {\r\n        ...data,\r\n        operational_files: data.operational_files || []\r\n      };\r\n\r\n      set((state) => ({\r\n        projects: [projectWithFiles, ...state.projects],\r\n        currentProject: projectWithFiles\r\n      }));\r\n    } catch (error) {\r\n      console.error('Create project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  updateProject: async (projectId, projectData) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      // Ensure operational_files is an array\r\n      const formattedData = {\r\n        title: projectData.title,\r\n        date: projectData.date,\r\n        facilitator: projectData.facilitator,\r\n        attendees: projectData.attendees || [],\r\n        operational_desc: projectData.operational_desc,\r\n        operational_files: projectData.operational_files || []\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .update(formattedData)\r\n        .eq('project_id', projectId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Parse operational_files from JSON if it exists\r\n      const projectWithFiles = {\r\n        ...data,\r\n        operational_files: data.operational_files || []\r\n      };\r\n\r\n      set((state) => ({\r\n        projects: state.projects.map((p) =>\r\n          p.project_id === projectId ? projectWithFiles : p\r\n        ),\r\n        currentProject: projectWithFiles\r\n      }));\r\n    } catch (error) {\r\n      console.error('Update project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n\r\n  deleteProject: async (projectId) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { error } = await supabase\r\n        .from('hira_projects')\r\n        .delete()\r\n        .eq('project_id', projectId);\r\n\r\n      if (error) throw error;\r\n\r\n      set((state) => ({\r\n        projects: state.projects.filter((p) => p.project_id !== projectId),\r\n        currentProject: null\r\n      }));\r\n    } catch (error) {\r\n      console.error('Delete project error:', error);\r\n      set({ error: error.message });\r\n      throw error;\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  }\r\n}));\r\n\r\nexport default useProjectStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}