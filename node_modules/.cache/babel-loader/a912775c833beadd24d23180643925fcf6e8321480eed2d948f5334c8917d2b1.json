{"ast":null,"code":"import { RISK_MATRIX } from '../constants/icaoMatrix';\nexport function calculateICAORiskTolerability(probability, severity) {\n  const riskIndex = `${probability}${severity}`;\n  return RISK_MATRIX[riskIndex] || 'ACCEPTABLE';\n}\nexport function calculateRiskRating(probability, severity) {\n  const riskValue = probability * severity;\n  if (riskValue <= 4) return 'Low';\n  if (riskValue <= 9) return 'Medium';\n  if (riskValue <= 14) return 'High';\n  return 'Extreme';\n}\nexport function calculateHighestRisk(assessments, matrixType) {\n  if (!assessments || assessments.length === 0) {\n    return 'LOW';\n  }\n\n  // Define risk level hierarchy for both matrix types\n  const riskLevels = {\n    // ICAO risk levels\n    'INTOLERABLE': 4,\n    'TOLERABLE': 3,\n    'ACCEPTABLE': 2,\n    // Integrated risk levels\n    'EXTREME': 4,\n    'HIGH': 3,\n    'MEDIUM': 2,\n    'LOW': 1\n  };\n  let highestRisk = 'LOW';\n  let highestRiskLevel = 1;\n  for (const assessment of assessments) {\n    let currentRisk;\n    if (matrixType === 'ICAO') {\n      currentRisk = calculateICAORiskTolerability(assessment.probability, assessment.severity);\n    } else {\n      currentRisk = calculateRiskRating(assessment.likelihood, assessment.impact).toUpperCase();\n    }\n    const currentRiskLevel = riskLevels[currentRisk] || 1;\n    if (currentRiskLevel > highestRiskLevel) {\n      highestRiskLevel = currentRiskLevel;\n      // Map the risk level back to the appropriate display value\n      if (matrixType === 'ICAO') {\n        highestRisk = currentRisk;\n      } else {\n        switch (currentRiskLevel) {\n          case 4:\n            highestRisk = 'EXTREME';\n            break;\n          case 3:\n            highestRisk = 'HIGH';\n            break;\n          case 2:\n            highestRisk = 'MEDIUM';\n            break;\n          default:\n            highestRisk = 'LOW';\n        }\n      }\n    }\n  }\n  return highestRisk;\n}","map":{"version":3,"names":["RISK_MATRIX","calculateICAORiskTolerability","probability","severity","riskIndex","calculateRiskRating","riskValue","calculateHighestRisk","assessments","matrixType","length","riskLevels","highestRisk","highestRiskLevel","assessment","currentRisk","likelihood","impact","toUpperCase","currentRiskLevel"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/utils/riskCalculations.js"],"sourcesContent":["import { RISK_MATRIX } from '../constants/icaoMatrix';\n\nexport function calculateICAORiskTolerability(probability, severity) {\n  const riskIndex = `${probability}${severity}`;\n  return RISK_MATRIX[riskIndex] || 'ACCEPTABLE';\n}\n\nexport function calculateRiskRating(probability, severity) {\n  const riskValue = probability * severity;\n  \n  if (riskValue <= 4) return 'Low';\n  if (riskValue <= 9) return 'Medium';\n  if (riskValue <= 14) return 'High';\n  return 'Extreme';\n}\n\nexport function calculateHighestRisk(assessments, matrixType) {\n  if (!assessments || assessments.length === 0) {\n    return 'LOW';\n  }\n\n  // Define risk level hierarchy for both matrix types\n  const riskLevels = {\n    // ICAO risk levels\n    'INTOLERABLE': 4,\n    'TOLERABLE': 3,\n    'ACCEPTABLE': 2,\n    // Integrated risk levels\n    'EXTREME': 4,\n    'HIGH': 3,\n    'MEDIUM': 2,\n    'LOW': 1\n  };\n\n  let highestRisk = 'LOW';\n  let highestRiskLevel = 1;\n\n  for (const assessment of assessments) {\n    let currentRisk;\n    if (matrixType === 'ICAO') {\n      currentRisk = calculateICAORiskTolerability(assessment.probability, assessment.severity);\n    } else {\n      currentRisk = calculateRiskRating(assessment.likelihood, assessment.impact).toUpperCase();\n    }\n\n    const currentRiskLevel = riskLevels[currentRisk] || 1;\n    if (currentRiskLevel > highestRiskLevel) {\n      highestRiskLevel = currentRiskLevel;\n      // Map the risk level back to the appropriate display value\n      if (matrixType === 'ICAO') {\n        highestRisk = currentRisk;\n      } else {\n        switch (currentRiskLevel) {\n          case 4:\n            highestRisk = 'EXTREME';\n            break;\n          case 3:\n            highestRisk = 'HIGH';\n            break;\n          case 2:\n            highestRisk = 'MEDIUM';\n            break;\n          default:\n            highestRisk = 'LOW';\n        }\n      }\n    }\n  }\n\n  return highestRisk;\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,yBAAyB;AAErD,OAAO,SAASC,6BAA6BA,CAACC,WAAW,EAAEC,QAAQ,EAAE;EACnE,MAAMC,SAAS,GAAG,GAAGF,WAAW,GAAGC,QAAQ,EAAE;EAC7C,OAAOH,WAAW,CAACI,SAAS,CAAC,IAAI,YAAY;AAC/C;AAEA,OAAO,SAASC,mBAAmBA,CAACH,WAAW,EAAEC,QAAQ,EAAE;EACzD,MAAMG,SAAS,GAAGJ,WAAW,GAAGC,QAAQ;EAExC,IAAIG,SAAS,IAAI,CAAC,EAAE,OAAO,KAAK;EAChC,IAAIA,SAAS,IAAI,CAAC,EAAE,OAAO,QAAQ;EACnC,IAAIA,SAAS,IAAI,EAAE,EAAE,OAAO,MAAM;EAClC,OAAO,SAAS;AAClB;AAEA,OAAO,SAASC,oBAAoBA,CAACC,WAAW,EAAEC,UAAU,EAAE;EAC5D,IAAI,CAACD,WAAW,IAAIA,WAAW,CAACE,MAAM,KAAK,CAAC,EAAE;IAC5C,OAAO,KAAK;EACd;;EAEA;EACA,MAAMC,UAAU,GAAG;IACjB;IACA,aAAa,EAAE,CAAC;IAChB,WAAW,EAAE,CAAC;IACd,YAAY,EAAE,CAAC;IACf;IACA,SAAS,EAAE,CAAC;IACZ,MAAM,EAAE,CAAC;IACT,QAAQ,EAAE,CAAC;IACX,KAAK,EAAE;EACT,CAAC;EAED,IAAIC,WAAW,GAAG,KAAK;EACvB,IAAIC,gBAAgB,GAAG,CAAC;EAExB,KAAK,MAAMC,UAAU,IAAIN,WAAW,EAAE;IACpC,IAAIO,WAAW;IACf,IAAIN,UAAU,KAAK,MAAM,EAAE;MACzBM,WAAW,GAAGd,6BAA6B,CAACa,UAAU,CAACZ,WAAW,EAAEY,UAAU,CAACX,QAAQ,CAAC;IAC1F,CAAC,MAAM;MACLY,WAAW,GAAGV,mBAAmB,CAACS,UAAU,CAACE,UAAU,EAAEF,UAAU,CAACG,MAAM,CAAC,CAACC,WAAW,CAAC,CAAC;IAC3F;IAEA,MAAMC,gBAAgB,GAAGR,UAAU,CAACI,WAAW,CAAC,IAAI,CAAC;IACrD,IAAII,gBAAgB,GAAGN,gBAAgB,EAAE;MACvCA,gBAAgB,GAAGM,gBAAgB;MACnC;MACA,IAAIV,UAAU,KAAK,MAAM,EAAE;QACzBG,WAAW,GAAGG,WAAW;MAC3B,CAAC,MAAM;QACL,QAAQI,gBAAgB;UACtB,KAAK,CAAC;YACJP,WAAW,GAAG,SAAS;YACvB;UACF,KAAK,CAAC;YACJA,WAAW,GAAG,MAAM;YACpB;UACF,KAAK,CAAC;YACJA,WAAW,GAAG,QAAQ;YACtB;UACF;YACEA,WAAW,GAAG,KAAK;QACvB;MACF;IACF;EACF;EAEA,OAAOA,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}