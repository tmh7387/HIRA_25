{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';const supabaseUrl=process.env.REACT_APP_SUPABASE_URL;const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY;if(!supabaseUrl||!supabaseAnonKey){throw new Error('Missing Supabase environment variables');}export const supabase=createClient(supabaseUrl,supabaseAnonKey);// Constants for file upload limits\nconst MAX_FILES=5;const MAX_TOTAL_SIZE=50*1024*1024;// 50MB in bytes\nconst BUCKET_NAME='hira-files';const SUBFOLDER='operational-images';// Helper function to get project-specific folder path\nconst getProjectFolder=project_id=>`${SUBFOLDER}/${project_id}`;// Helper function to list files in storage for a specific project\nexport const listFiles=async project_id=>{if(!project_id){console.error('Project ID is required to list files');return[];}try{console.log('Listing files for project:',project_id);const projectFolder=getProjectFolder(project_id);const{data,error}=await supabase.storage.from(BUCKET_NAME).list(projectFolder);if(error){console.error('Error listing files:',error);return[];}if(!data){console.log('No files found for project:',project_id);return[];}console.log('Files found:',data);// Get public URLs for project files\nconst filesWithUrls=await Promise.all(data.map(async file=>{var _file$metadata,_file$metadata2;const filePath=`${projectFolder}/${file.name}`;const{data:{publicUrl}}=supabase.storage.from(BUCKET_NAME).getPublicUrl(filePath);return{name:file.name.replace(`${project_id}_`,''),// Remove project_id prefix from display name\nsize:(_file$metadata=file.metadata)===null||_file$metadata===void 0?void 0:_file$metadata.size,path:filePath,url:publicUrl,type:(_file$metadata2=file.metadata)===null||_file$metadata2===void 0?void 0:_file$metadata2.mimetype,project_id};}));console.log('Files with URLs:',filesWithUrls);return filesWithUrls;}catch(error){console.error('Error listing files:',error);return[];}};// Helper function to validate files\nexport const validateFiles=function(newFiles){let existingFiles=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const totalFiles=existingFiles.length+newFiles.length;if(totalFiles>MAX_FILES){throw new Error(`Maximum ${MAX_FILES} files allowed`);}const existingSize=existingFiles.reduce((total,file)=>total+(file.size||0),0);const newSize=newFiles.reduce((total,file)=>total+file.size,0);const totalSize=existingSize+newSize;if(totalSize>MAX_TOTAL_SIZE){throw new Error(`Total file size cannot exceed 50MB`);}return true;};// Helper function to upload file\nexport const uploadFile=async function(file,project_id){let existingFiles=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];if(!project_id){throw new Error('Project ID is required to upload files');}try{validateFiles([file],existingFiles);const fileExt=file.name.split('.').pop();const fileName=`${project_id}_${Date.now()}.${fileExt}`;const filePath=`${getProjectFolder(project_id)}/${fileName}`;console.log('Uploading file:',{originalName:file.name,fileName,filePath,project_id});const{data,error}=await supabase.storage.from(BUCKET_NAME).upload(filePath,file,{cacheControl:'3600',upsert:false});if(error)throw error;const{data:{publicUrl}}=supabase.storage.from(BUCKET_NAME).getPublicUrl(filePath);return{url:publicUrl,path:filePath,name:file.name,// Keep original name for display\nsize:file.size,type:file.type,project_id};}catch(error){console.error('File upload error:',error);throw error;}};// Helper function to delete file\nexport const deleteFile=async(path,project_id)=>{if(!project_id){console.error('Project ID is required to delete files');return;}try{console.log('Deleting file:',{path,project_id});const{error}=await supabase.storage.from(BUCKET_NAME).remove([path]);if(error)throw error;console.log('File deleted successfully');}catch(error){console.error('File deletion error:',error);throw error;}};// Helper function to get file size in readable format\nexport const formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","MAX_FILES","MAX_TOTAL_SIZE","BUCKET_NAME","SUBFOLDER","getProjectFolder","project_id","listFiles","console","error","log","projectFolder","data","storage","from","list","filesWithUrls","Promise","all","map","file","_file$metadata","_file$metadata2","filePath","name","publicUrl","getPublicUrl","replace","size","metadata","path","url","type","mimetype","validateFiles","newFiles","existingFiles","arguments","length","undefined","totalFiles","existingSize","reduce","total","newSize","totalSize","uploadFile","fileExt","split","pop","fileName","Date","now","originalName","upload","cacheControl","upsert","deleteFile","remove","formatFileSize","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Constants for file upload limits\r\nconst MAX_FILES = 5;\r\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\r\nconst BUCKET_NAME = 'hira-files';\r\nconst SUBFOLDER = 'operational-images';\r\n\r\n// Helper function to get project-specific folder path\r\nconst getProjectFolder = (project_id) => `${SUBFOLDER}/${project_id}`;\r\n\r\n// Helper function to list files in storage for a specific project\r\nexport const listFiles = async (project_id) => {\r\n  if (!project_id) {\r\n    console.error('Project ID is required to list files');\r\n    return [];\r\n  }\r\n\r\n  try {\r\n    console.log('Listing files for project:', project_id);\r\n    const projectFolder = getProjectFolder(project_id);\r\n    \r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .list(projectFolder);\r\n\r\n    if (error) {\r\n      console.error('Error listing files:', error);\r\n      return [];\r\n    }\r\n\r\n    if (!data) {\r\n      console.log('No files found for project:', project_id);\r\n      return [];\r\n    }\r\n\r\n    console.log('Files found:', data);\r\n\r\n    // Get public URLs for project files\r\n    const filesWithUrls = await Promise.all(data.map(async (file) => {\r\n      const filePath = `${projectFolder}/${file.name}`;\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from(BUCKET_NAME)\r\n        .getPublicUrl(filePath);\r\n\r\n      return {\r\n        name: file.name.replace(`${project_id}_`, ''), // Remove project_id prefix from display name\r\n        size: file.metadata?.size,\r\n        path: filePath,\r\n        url: publicUrl,\r\n        type: file.metadata?.mimetype,\r\n        project_id\r\n      };\r\n    }));\r\n\r\n    console.log('Files with URLs:', filesWithUrls);\r\n    return filesWithUrls;\r\n  } catch (error) {\r\n    console.error('Error listing files:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to validate files\r\nexport const validateFiles = (newFiles, existingFiles = []) => {\r\n  const totalFiles = existingFiles.length + newFiles.length;\r\n  if (totalFiles > MAX_FILES) {\r\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\r\n  }\r\n\r\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\r\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\r\n  const totalSize = existingSize + newSize;\r\n\r\n  if (totalSize > MAX_TOTAL_SIZE) {\r\n    throw new Error(`Total file size cannot exceed 50MB`);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Helper function to upload file\r\nexport const uploadFile = async (file, project_id, existingFiles = []) => {\r\n  if (!project_id) {\r\n    throw new Error('Project ID is required to upload files');\r\n  }\r\n\r\n  try {\r\n    validateFiles([file], existingFiles);\r\n\r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${project_id}_${Date.now()}.${fileExt}`;\r\n    const filePath = `${getProjectFolder(project_id)}/${fileName}`;\r\n\r\n    console.log('Uploading file:', {\r\n      originalName: file.name,\r\n      fileName,\r\n      filePath,\r\n      project_id\r\n    });\r\n\r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .upload(filePath, file, {\r\n        cacheControl: '3600',\r\n        upsert: false\r\n      });\r\n\r\n    if (error) throw error;\r\n\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .getPublicUrl(filePath);\r\n\r\n    return {\r\n      url: publicUrl,\r\n      path: filePath,\r\n      name: file.name, // Keep original name for display\r\n      size: file.size,\r\n      type: file.type,\r\n      project_id\r\n    };\r\n  } catch (error) {\r\n    console.error('File upload error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to delete file\r\nexport const deleteFile = async (path, project_id) => {\r\n  if (!project_id) {\r\n    console.error('Project ID is required to delete files');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    console.log('Deleting file:', { path, project_id });\r\n\r\n    const { error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .remove([path]);\r\n\r\n    if (error) throw error;\r\n\r\n    console.log('File deleted successfully');\r\n  } catch (error) {\r\n    console.error('File deletion error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to get file size in readable format\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}