{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Constants for file upload limits\nconst MAX_FILES = 5;\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\nconst BUCKET_NAME = 'hira-files';\nconst SUBFOLDER = 'operational-images';\n\n// Helper function to list files in storage for a specific project\nexport const listFiles = async project_id => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.storage.from(BUCKET_NAME).list(SUBFOLDER);\n    if (error) {\n      console.error('Error listing files:', error);\n      throw error;\n    }\n\n    // Filter files by project_id in their metadata\n    const projectFiles = data.filter(file => {\n      var _file$metadata;\n      return ((_file$metadata = file.metadata) === null || _file$metadata === void 0 ? void 0 : _file$metadata.project_id) === project_id;\n    });\n\n    // Get public URLs for project files\n    const filesWithUrls = await Promise.all(projectFiles.map(async file => {\n      var _file$metadata2, _file$metadata3, _file$metadata4;\n      const {\n        data: {\n          publicUrl\n        }\n      } = supabase.storage.from(BUCKET_NAME).getPublicUrl(`${SUBFOLDER}/${file.name}`);\n      return {\n        name: file.name,\n        size: (_file$metadata2 = file.metadata) === null || _file$metadata2 === void 0 ? void 0 : _file$metadata2.size,\n        path: `${SUBFOLDER}/${file.name}`,\n        url: publicUrl,\n        type: (_file$metadata3 = file.metadata) === null || _file$metadata3 === void 0 ? void 0 : _file$metadata3.mimetype,\n        project_id: (_file$metadata4 = file.metadata) === null || _file$metadata4 === void 0 ? void 0 : _file$metadata4.project_id\n      };\n    }));\n    return filesWithUrls;\n  } catch (error) {\n    console.error('Error listing files:', error);\n    return [];\n  }\n};\n\n// Helper function to validate files\nexport const validateFiles = (newFiles, existingFiles = []) => {\n  const totalFiles = existingFiles.length + newFiles.length;\n  if (totalFiles > MAX_FILES) {\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\n  }\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\n  const totalSize = existingSize + newSize;\n  if (totalSize > MAX_TOTAL_SIZE) {\n    throw new Error(`Total file size cannot exceed 50MB`);\n  }\n  return true;\n};\n\n// Helper function to upload file\nexport const uploadFile = async (file, project_id, existingFiles = []) => {\n  try {\n    validateFiles([file], existingFiles);\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${Date.now()}.${fileExt}`;\n    const filePath = `${SUBFOLDER}/${fileName}`;\n    const {\n      data,\n      error\n    } = await supabase.storage.from(BUCKET_NAME).upload(filePath, file, {\n      cacheControl: '3600',\n      upsert: false,\n      metadata: {\n        project_id,\n        mimetype: file.type,\n        size: file.size\n      }\n    });\n    if (error) throw error;\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from(BUCKET_NAME).getPublicUrl(filePath);\n    return {\n      url: publicUrl,\n      path: filePath,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      project_id\n    };\n  } catch (error) {\n    console.error('File upload error:', error);\n    throw error;\n  }\n};\n\n// Helper function to delete file\nexport const deleteFile = async path => {\n  try {\n    if (!path.startsWith(SUBFOLDER)) {\n      path = `${SUBFOLDER}/${path}`;\n    }\n    const {\n      error\n    } = await supabase.storage.from(BUCKET_NAME).remove([path]);\n    if (error) throw error;\n  } catch (error) {\n    console.error('File deletion error:', error);\n    throw error;\n  }\n};\n\n// Helper function to get file size in readable format\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","MAX_FILES","MAX_TOTAL_SIZE","BUCKET_NAME","SUBFOLDER","listFiles","project_id","data","error","storage","from","list","console","projectFiles","filter","file","_file$metadata","metadata","filesWithUrls","Promise","all","map","_file$metadata2","_file$metadata3","_file$metadata4","publicUrl","getPublicUrl","name","size","path","url","type","mimetype","validateFiles","newFiles","existingFiles","totalFiles","length","existingSize","reduce","total","newSize","totalSize","uploadFile","fileExt","split","pop","fileName","Date","now","filePath","upload","cacheControl","upsert","deleteFile","startsWith","remove","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/services/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseAnonKey) {\r\n  throw new Error('Missing Supabase environment variables');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Constants for file upload limits\r\nconst MAX_FILES = 5;\r\nconst MAX_TOTAL_SIZE = 50 * 1024 * 1024; // 50MB in bytes\r\nconst BUCKET_NAME = 'hira-files';\r\nconst SUBFOLDER = 'operational-images';\r\n\r\n// Helper function to list files in storage for a specific project\r\nexport const listFiles = async (project_id) => {\r\n  try {\r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .list(SUBFOLDER);\r\n\r\n    if (error) {\r\n      console.error('Error listing files:', error);\r\n      throw error;\r\n    }\r\n\r\n    // Filter files by project_id in their metadata\r\n    const projectFiles = data.filter(file => file.metadata?.project_id === project_id);\r\n\r\n    // Get public URLs for project files\r\n    const filesWithUrls = await Promise.all(projectFiles.map(async (file) => {\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from(BUCKET_NAME)\r\n        .getPublicUrl(`${SUBFOLDER}/${file.name}`);\r\n\r\n      return {\r\n        name: file.name,\r\n        size: file.metadata?.size,\r\n        path: `${SUBFOLDER}/${file.name}`,\r\n        url: publicUrl,\r\n        type: file.metadata?.mimetype,\r\n        project_id: file.metadata?.project_id\r\n      };\r\n    }));\r\n\r\n    return filesWithUrls;\r\n  } catch (error) {\r\n    console.error('Error listing files:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Helper function to validate files\r\nexport const validateFiles = (newFiles, existingFiles = []) => {\r\n  const totalFiles = existingFiles.length + newFiles.length;\r\n  if (totalFiles > MAX_FILES) {\r\n    throw new Error(`Maximum ${MAX_FILES} files allowed`);\r\n  }\r\n\r\n  const existingSize = existingFiles.reduce((total, file) => total + (file.size || 0), 0);\r\n  const newSize = newFiles.reduce((total, file) => total + file.size, 0);\r\n  const totalSize = existingSize + newSize;\r\n\r\n  if (totalSize > MAX_TOTAL_SIZE) {\r\n    throw new Error(`Total file size cannot exceed 50MB`);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Helper function to upload file\r\nexport const uploadFile = async (file, project_id, existingFiles = []) => {\r\n  try {\r\n    validateFiles([file], existingFiles);\r\n\r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${Date.now()}.${fileExt}`;\r\n    const filePath = `${SUBFOLDER}/${fileName}`;\r\n\r\n    const { data, error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .upload(filePath, file, {\r\n        cacheControl: '3600',\r\n        upsert: false,\r\n        metadata: {\r\n          project_id,\r\n          mimetype: file.type,\r\n          size: file.size\r\n        }\r\n      });\r\n\r\n    if (error) throw error;\r\n\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .getPublicUrl(filePath);\r\n\r\n    return {\r\n      url: publicUrl,\r\n      path: filePath,\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      project_id\r\n    };\r\n  } catch (error) {\r\n    console.error('File upload error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to delete file\r\nexport const deleteFile = async (path) => {\r\n  try {\r\n    if (!path.startsWith(SUBFOLDER)) {\r\n      path = `${SUBFOLDER}/${path}`;\r\n    }\r\n\r\n    const { error } = await supabase.storage\r\n      .from(BUCKET_NAME)\r\n      .remove([path]);\r\n\r\n    if (error) throw error;\r\n  } catch (error) {\r\n    console.error('File deletion error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to get file size in readable format\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}