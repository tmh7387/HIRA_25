{"ast":null,"code":"/**\r\n * Generates a unique project ID with a specific format:\r\n * HIRA-YYYYMMDD-HHMMSS-XXX\r\n * where XXX is a random 3-digit number\r\n * @returns {string} Generated project ID\r\n */export function generateProjectId(){const now=new Date();// Format date components\nconst year=now.getFullYear();const month=String(now.getMonth()+1).padStart(2,'0');const day=String(now.getDate()).padStart(2,'0');const hours=String(now.getHours()).padStart(2,'0');const minutes=String(now.getMinutes()).padStart(2,'0');const seconds=String(now.getSeconds()).padStart(2,'0');// Generate random 3-digit number\nconst random=String(Math.floor(Math.random()*1000)).padStart(3,'0');// Combine all parts\nreturn`HIRA-${year}${month}${day}-${hours}${minutes}${seconds}-${random}`;}/**\r\n * Validates a project ID format\r\n * @param {string} projectId - Project ID to validate\r\n * @returns {boolean} Whether the ID is valid\r\n */export function isValidProjectId(projectId){const pattern=/^HIRA-\\d{8}-\\d{6}-\\d{3}$/;return pattern.test(projectId);}/**\r\n * Extracts the timestamp from a project ID\r\n * @param {string} projectId - Project ID to parse\r\n * @returns {Date|null} Date object or null if invalid\r\n */export function getProjectTimestamp(projectId){if(!isValidProjectId(projectId))return null;const[,datePart,timePart]=projectId.split('-');const year=parseInt(datePart.substring(0,4));const month=parseInt(datePart.substring(4,6))-1;// JS months are 0-based\nconst day=parseInt(datePart.substring(6,8));const hours=parseInt(timePart.substring(0,2));const minutes=parseInt(timePart.substring(2,4));const seconds=parseInt(timePart.substring(4,6));return new Date(year,month,day,hours,minutes,seconds);}/**\r\n * Compares two project IDs chronologically\r\n * @param {string} idA - First project ID\r\n * @param {string} idB - Second project ID\r\n * @returns {number} -1 if A is earlier, 1 if B is earlier, 0 if equal\r\n */export function compareProjectIds(idA,idB){var _getProjectTimestamp,_getProjectTimestamp2;const timeA=(_getProjectTimestamp=getProjectTimestamp(idA))===null||_getProjectTimestamp===void 0?void 0:_getProjectTimestamp.getTime();const timeB=(_getProjectTimestamp2=getProjectTimestamp(idB))===null||_getProjectTimestamp2===void 0?void 0:_getProjectTimestamp2.getTime();if(!timeA||!timeB)return 0;if(timeA<timeB)return-1;if(timeA>timeB)return 1;return 0;}/**\r\n * Gets a human-readable string from a project ID\r\n * @param {string} projectId - Project ID to format\r\n * @returns {string} Formatted string or original ID if invalid\r\n */export function formatProjectId(projectId){const timestamp=getProjectTimestamp(projectId);if(!timestamp)return projectId;const[,,randomPart]=projectId.split('-');const dateStr=timestamp.toLocaleDateString();const timeStr=timestamp.toLocaleTimeString();return`${dateStr} ${timeStr} (${randomPart})`;}","map":{"version":3,"names":["generateProjectId","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","random","Math","floor","isValidProjectId","projectId","pattern","test","getProjectTimestamp","datePart","timePart","split","parseInt","substring","compareProjectIds","idA","idB","_getProjectTimestamp","_getProjectTimestamp2","timeA","getTime","timeB","formatProjectId","timestamp","randomPart","dateStr","toLocaleDateString","timeStr","toLocaleTimeString"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_AppBolt/src-new/src/utils/projectIdGenerator.js"],"sourcesContent":["/**\r\n * Generates a unique project ID with a specific format:\r\n * HIRA-YYYYMMDD-HHMMSS-XXX\r\n * where XXX is a random 3-digit number\r\n * @returns {string} Generated project ID\r\n */\r\nexport function generateProjectId() {\r\n  const now = new Date();\r\n  \r\n  // Format date components\r\n  const year = now.getFullYear();\r\n  const month = String(now.getMonth() + 1).padStart(2, '0');\r\n  const day = String(now.getDate()).padStart(2, '0');\r\n  const hours = String(now.getHours()).padStart(2, '0');\r\n  const minutes = String(now.getMinutes()).padStart(2, '0');\r\n  const seconds = String(now.getSeconds()).padStart(2, '0');\r\n  \r\n  // Generate random 3-digit number\r\n  const random = String(Math.floor(Math.random() * 1000)).padStart(3, '0');\r\n  \r\n  // Combine all parts\r\n  return `HIRA-${year}${month}${day}-${hours}${minutes}${seconds}-${random}`;\r\n}\r\n\r\n/**\r\n * Validates a project ID format\r\n * @param {string} projectId - Project ID to validate\r\n * @returns {boolean} Whether the ID is valid\r\n */\r\nexport function isValidProjectId(projectId) {\r\n  const pattern = /^HIRA-\\d{8}-\\d{6}-\\d{3}$/;\r\n  return pattern.test(projectId);\r\n}\r\n\r\n/**\r\n * Extracts the timestamp from a project ID\r\n * @param {string} projectId - Project ID to parse\r\n * @returns {Date|null} Date object or null if invalid\r\n */\r\nexport function getProjectTimestamp(projectId) {\r\n  if (!isValidProjectId(projectId)) return null;\r\n  \r\n  const [, datePart, timePart] = projectId.split('-');\r\n  \r\n  const year = parseInt(datePart.substring(0, 4));\r\n  const month = parseInt(datePart.substring(4, 6)) - 1; // JS months are 0-based\r\n  const day = parseInt(datePart.substring(6, 8));\r\n  const hours = parseInt(timePart.substring(0, 2));\r\n  const minutes = parseInt(timePart.substring(2, 4));\r\n  const seconds = parseInt(timePart.substring(4, 6));\r\n  \r\n  return new Date(year, month, day, hours, minutes, seconds);\r\n}\r\n\r\n/**\r\n * Compares two project IDs chronologically\r\n * @param {string} idA - First project ID\r\n * @param {string} idB - Second project ID\r\n * @returns {number} -1 if A is earlier, 1 if B is earlier, 0 if equal\r\n */\r\nexport function compareProjectIds(idA, idB) {\r\n  const timeA = getProjectTimestamp(idA)?.getTime();\r\n  const timeB = getProjectTimestamp(idB)?.getTime();\r\n  \r\n  if (!timeA || !timeB) return 0;\r\n  if (timeA < timeB) return -1;\r\n  if (timeA > timeB) return 1;\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Gets a human-readable string from a project ID\r\n * @param {string} projectId - Project ID to format\r\n * @returns {string} Formatted string or original ID if invalid\r\n */\r\nexport function formatProjectId(projectId) {\r\n  const timestamp = getProjectTimestamp(projectId);\r\n  if (!timestamp) return projectId;\r\n  \r\n  const [, , randomPart] = projectId.split('-');\r\n  const dateStr = timestamp.toLocaleDateString();\r\n  const timeStr = timestamp.toLocaleTimeString();\r\n  \r\n  return `${dateStr} ${timeStr} (${randomPart})`;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}