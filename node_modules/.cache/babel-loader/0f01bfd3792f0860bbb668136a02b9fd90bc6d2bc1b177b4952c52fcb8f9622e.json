{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tmh73\\\\Aviation Synergy\\\\MaXwell AI - General\\\\HIRA_25\\\\src\\\\components\\\\RiskAssessment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport RiskMatrixSelector from './RiskMatrixSelector';\nimport RiskMatrixReference from './RiskMatrixReference';\nimport AssessmentForm from './AssessmentForm';\nimport useProjectStore from '../stores/projectStore';\nimport { useRiskMatrixStore } from '../stores/riskMatrixStore';\nimport { updateAssessments, getAssessmentsByProjectId } from '../services/riskAssessmentService';\n\n// Error Alert Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ErrorAlert = ({\n  message\n}) => {\n  if (!message) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 mb-4 bg-red-50 border border-red-200 rounded-lg\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-shrink-0\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"h-5 w-5 text-red-400\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n            clipRule: \"evenodd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ml-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-red-700\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = ErrorAlert;\nexport default function RiskAssessment() {\n  _s();\n  const {\n    currentProject,\n    hazardIdentificationData,\n    riskAssessmentData,\n    setStepData,\n    setCurrentStep,\n    error: storeError\n  } = useProjectStore();\n  const {\n    matrixType,\n    setMatrixType\n  } = useRiskMatrixStore();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [localError, setLocalError] = useState(null);\n  const events = (hazardIdentificationData === null || hazardIdentificationData === void 0 ? void 0 : hazardIdentificationData.events) || [];\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue\n  } = useForm({\n    defaultValues: {\n      assessments: events.flatMap(event => (event.hazards || []).flatMap(hazard => (hazard.consequences || []).map(consequence => ({\n        uniqueId: consequence.uniqueId,\n        event: event.name,\n        eventId: event.uniqueId,\n        hazard: hazard.description,\n        hazardId: hazard.uniqueId,\n        consequence: consequence.description,\n        currentControls: consequence.currentControls,\n        probability: '',\n        severity: '',\n        likelihood: '',\n        impact: '',\n        tolerability: ''\n      }))))\n    }\n  });\n\n  // Load existing assessments when component mounts or when riskAssessmentData changes\n  useEffect(() => {\n    const loadExistingAssessments = async () => {\n      if (!(currentProject !== null && currentProject !== void 0 && currentProject.id)) return;\n      try {\n        setLocalError(null);\n\n        // If we have data in the store, use that\n        if (riskAssessmentData !== null && riskAssessmentData !== void 0 && riskAssessmentData.assessments) {\n          var _riskAssessmentData$a;\n          console.log('Using stored assessments:', riskAssessmentData.assessments);\n\n          // Find matching assessments by uniqueId (consequence ID)\n          const formAssessments = watch('assessments');\n          riskAssessmentData.assessments.forEach(assessment => {\n            const index = formAssessments.findIndex(a => a.uniqueId === assessment.uniqueId);\n            if (index !== -1) {\n              setValue(`assessments.${index}.probability`, assessment.probability);\n              setValue(`assessments.${index}.severity`, assessment.severity);\n              setValue(`assessments.${index}.likelihood`, assessment.likelihood);\n              setValue(`assessments.${index}.impact`, assessment.impact);\n              setValue(`assessments.${index}.tolerability`, assessment.tolerability);\n            }\n          });\n          if ((_riskAssessmentData$a = riskAssessmentData.assessments[0]) !== null && _riskAssessmentData$a !== void 0 && _riskAssessmentData$a.matrixType) {\n            setMatrixType(riskAssessmentData.assessments[0].matrixType);\n          }\n          return;\n        }\n\n        // Otherwise load from database\n        const assessments = await getAssessmentsByProjectId(currentProject.id);\n        console.log('Loaded assessments:', assessments);\n        if (assessments && assessments.length > 0) {\n          // Set matrix type from first assessment\n          if (assessments[0].matrixType) {\n            setMatrixType(assessments[0].matrixType);\n          }\n\n          // Find matching assessments by uniqueId (consequence ID)\n          const formAssessments = watch('assessments');\n          assessments.forEach(assessment => {\n            const index = formAssessments.findIndex(a => a.uniqueId === assessment.uniqueId);\n            if (index !== -1) {\n              setValue(`assessments.${index}.probability`, assessment.probability);\n              setValue(`assessments.${index}.severity`, assessment.severity);\n              setValue(`assessments.${index}.likelihood`, assessment.likelihood);\n              setValue(`assessments.${index}.impact`, assessment.impact);\n              setValue(`assessments.${index}.tolerability`, assessment.tolerability);\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error loading existing assessments:', error);\n        setLocalError('Failed to load existing assessments. Please try again.');\n      }\n    };\n    loadExistingAssessments();\n  }, [currentProject === null || currentProject === void 0 ? void 0 : currentProject.id, setValue, setMatrixType, riskAssessmentData, watch]);\n  const watchAssessments = watch('assessments') || [];\n\n  // Group assessments by event\n  const groupedAssessments = watchAssessments.reduce((acc, assessment) => {\n    if (!acc[assessment.event]) {\n      acc[assessment.event] = {\n        event: assessment.event,\n        assessments: []\n      };\n    }\n    acc[assessment.event].assessments.push(assessment);\n    return acc;\n  }, {});\n  const handleFormSubmit = async data => {\n    try {\n      setIsSubmitting(true);\n      setLocalError(null);\n\n      // Check if we have a current project\n      if (!(currentProject !== null && currentProject !== void 0 && currentProject.id)) {\n        throw new Error('No active project found. Please ensure the project is created first.');\n      }\n      console.log('Submitting form data:', data);\n\n      // Save assessments with matrix type\n      const result = await updateAssessments(currentProject.id, data, matrixType);\n      console.log('Save result:', result);\n\n      // Update store\n      const saved = await setStepData(3, result);\n      if (!saved) {\n        throw new Error('Failed to save risk assessment data');\n      }\n\n      // Navigate to next step\n      setCurrentStep(4);\n    } catch (error) {\n      console.error('Error saving risk assessments:', error);\n      setLocalError(error.message || 'Failed to save risk assessments. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Only render AssessmentForm if we have assessments\n  const hasAssessments = Object.keys(groupedAssessments).length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-7xl mx-auto p-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-md p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold text-gray-800 mb-6\",\n        children: \"Risk Assessment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RiskMatrixSelector, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RiskMatrixReference, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), (storeError || localError) && /*#__PURE__*/_jsxDEV(ErrorAlert, {\n      message: localError || storeError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), hasAssessments ? /*#__PURE__*/_jsxDEV(AssessmentForm, {\n      groupedAssessments: groupedAssessments,\n      setValue: setValue,\n      onSubmit: handleSubmit(handleFormSubmit),\n      isSubmitting: isSubmitting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-md p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 text-center\",\n        children: \"No hazards or consequences found. Please add hazards in the previous step.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n_s(RiskAssessment, \"II66efiyZt2lvroQ4drZeBTck4o=\", false, function () {\n  return [useProjectStore, useRiskMatrixStore, useForm];\n});\n_c2 = RiskAssessment;\nvar _c, _c2;\n$RefreshReg$(_c, \"ErrorAlert\");\n$RefreshReg$(_c2, \"RiskAssessment\");","map":{"version":3,"names":["React","useEffect","useState","useForm","RiskMatrixSelector","RiskMatrixReference","AssessmentForm","useProjectStore","useRiskMatrixStore","updateAssessments","getAssessmentsByProjectId","jsxDEV","_jsxDEV","ErrorAlert","message","className","children","viewBox","fill","fillRule","d","clipRule","fileName","_jsxFileName","lineNumber","columnNumber","_c","RiskAssessment","_s","currentProject","hazardIdentificationData","riskAssessmentData","setStepData","setCurrentStep","error","storeError","matrixType","setMatrixType","isSubmitting","setIsSubmitting","localError","setLocalError","events","register","handleSubmit","watch","setValue","defaultValues","assessments","flatMap","event","hazards","hazard","consequences","map","consequence","uniqueId","name","eventId","description","hazardId","currentControls","probability","severity","likelihood","impact","tolerability","loadExistingAssessments","id","_riskAssessmentData$a","console","log","formAssessments","forEach","assessment","index","findIndex","a","length","watchAssessments","groupedAssessments","reduce","acc","push","handleFormSubmit","data","Error","result","saved","hasAssessments","Object","keys","onSubmit","_c2","$RefreshReg$"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/components/RiskAssessment.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport RiskMatrixSelector from './RiskMatrixSelector';\nimport RiskMatrixReference from './RiskMatrixReference';\nimport AssessmentForm from './AssessmentForm';\nimport useProjectStore from '../stores/projectStore';\nimport { useRiskMatrixStore } from '../stores/riskMatrixStore';\nimport { updateAssessments, getAssessmentsByProjectId } from '../services/riskAssessmentService';\n\n// Error Alert Component\nconst ErrorAlert = ({ message }) => {\n  if (!message) return null;\n\n  return (\n    <div className=\"p-4 mb-4 bg-red-50 border border-red-200 rounded-lg\">\n      <div className=\"flex items-center\">\n        <div className=\"flex-shrink-0\">\n          <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n          </svg>\n        </div>\n        <div className=\"ml-3\">\n          <p className=\"text-sm text-red-700\">{message}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function RiskAssessment() {\n  const { currentProject, hazardIdentificationData, riskAssessmentData, setStepData, setCurrentStep, error: storeError } = useProjectStore();\n  const { matrixType, setMatrixType } = useRiskMatrixStore();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [localError, setLocalError] = useState(null);\n  const events = hazardIdentificationData?.events || [];\n\n  const { register, handleSubmit, watch, setValue } = useForm({\n    defaultValues: {\n      assessments: events.flatMap(event => \n        (event.hazards || []).flatMap(hazard =>\n          (hazard.consequences || []).map(consequence => ({\n            uniqueId: consequence.uniqueId,\n            event: event.name,\n            eventId: event.uniqueId,\n            hazard: hazard.description,\n            hazardId: hazard.uniqueId,\n            consequence: consequence.description,\n            currentControls: consequence.currentControls,\n            probability: '',\n            severity: '',\n            likelihood: '',\n            impact: '',\n            tolerability: ''\n          }))\n        )\n      )\n    }\n  });\n\n  // Load existing assessments when component mounts or when riskAssessmentData changes\n  useEffect(() => {\n    const loadExistingAssessments = async () => {\n      if (!currentProject?.id) return;\n\n      try {\n        setLocalError(null);\n\n        // If we have data in the store, use that\n        if (riskAssessmentData?.assessments) {\n          console.log('Using stored assessments:', riskAssessmentData.assessments);\n          \n          // Find matching assessments by uniqueId (consequence ID)\n          const formAssessments = watch('assessments');\n          riskAssessmentData.assessments.forEach(assessment => {\n            const index = formAssessments.findIndex(a => a.uniqueId === assessment.uniqueId);\n            if (index !== -1) {\n              setValue(`assessments.${index}.probability`, assessment.probability);\n              setValue(`assessments.${index}.severity`, assessment.severity);\n              setValue(`assessments.${index}.likelihood`, assessment.likelihood);\n              setValue(`assessments.${index}.impact`, assessment.impact);\n              setValue(`assessments.${index}.tolerability`, assessment.tolerability);\n            }\n          });\n\n          if (riskAssessmentData.assessments[0]?.matrixType) {\n            setMatrixType(riskAssessmentData.assessments[0].matrixType);\n          }\n          return;\n        }\n\n        // Otherwise load from database\n        const assessments = await getAssessmentsByProjectId(currentProject.id);\n        console.log('Loaded assessments:', assessments);\n        \n        if (assessments && assessments.length > 0) {\n          // Set matrix type from first assessment\n          if (assessments[0].matrixType) {\n            setMatrixType(assessments[0].matrixType);\n          }\n\n          // Find matching assessments by uniqueId (consequence ID)\n          const formAssessments = watch('assessments');\n          assessments.forEach(assessment => {\n            const index = formAssessments.findIndex(a => a.uniqueId === assessment.uniqueId);\n            if (index !== -1) {\n              setValue(`assessments.${index}.probability`, assessment.probability);\n              setValue(`assessments.${index}.severity`, assessment.severity);\n              setValue(`assessments.${index}.likelihood`, assessment.likelihood);\n              setValue(`assessments.${index}.impact`, assessment.impact);\n              setValue(`assessments.${index}.tolerability`, assessment.tolerability);\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error loading existing assessments:', error);\n        setLocalError('Failed to load existing assessments. Please try again.');\n      }\n    };\n\n    loadExistingAssessments();\n  }, [currentProject?.id, setValue, setMatrixType, riskAssessmentData, watch]);\n\n  const watchAssessments = watch('assessments') || [];\n\n  // Group assessments by event\n  const groupedAssessments = watchAssessments.reduce((acc, assessment) => {\n    if (!acc[assessment.event]) {\n      acc[assessment.event] = {\n        event: assessment.event,\n        assessments: []\n      };\n    }\n    acc[assessment.event].assessments.push(assessment);\n    return acc;\n  }, {});\n\n  const handleFormSubmit = async (data) => {\n    try {\n      setIsSubmitting(true);\n      setLocalError(null);\n\n      // Check if we have a current project\n      if (!currentProject?.id) {\n        throw new Error('No active project found. Please ensure the project is created first.');\n      }\n\n      console.log('Submitting form data:', data);\n      \n      // Save assessments with matrix type\n      const result = await updateAssessments(currentProject.id, data, matrixType);\n      console.log('Save result:', result);\n      \n      // Update store\n      const saved = await setStepData(3, result);\n      if (!saved) {\n        throw new Error('Failed to save risk assessment data');\n      }\n\n      // Navigate to next step\n      setCurrentStep(4);\n    } catch (error) {\n      console.error('Error saving risk assessments:', error);\n      setLocalError(error.message || 'Failed to save risk assessments. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Only render AssessmentForm if we have assessments\n  const hasAssessments = Object.keys(groupedAssessments).length > 0;\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Risk Assessment</h2>\n        <RiskMatrixSelector />\n        <RiskMatrixReference />\n      </div>\n\n      {(storeError || localError) && (\n        <ErrorAlert message={localError || storeError} />\n      )}\n\n      {hasAssessments ? (\n        <AssessmentForm \n          groupedAssessments={groupedAssessments}\n          setValue={setValue}\n          onSubmit={handleSubmit(handleFormSubmit)}\n          isSubmitting={isSubmitting}\n        />\n      ) : (\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <p className=\"text-gray-600 text-center\">\n            No hazards or consequences found. Please add hazards in the previous step.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}