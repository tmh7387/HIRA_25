{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tmh73\\\\Aviation Synergy\\\\MaXwell AI - General\\\\HIRA_25\\\\src\\\\stores\\\\projectStore.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext } from 'react';\nimport { create } from 'zustand';\nimport { supabase } from '../services/supabase';\nimport { projectService } from '../services/projectService';\nimport { controlService } from '../services/controlService';\nimport { updateHazards, getHazardsByEventId } from '../services/hazardService';\n\n// Custom error class for project operations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ProjectOperationError extends Error {\n  constructor(message, operation, details = null) {\n    super(message);\n    this.name = 'ProjectOperationError';\n    this.operation = operation;\n    this.details = details;\n  }\n}\nconst useProjectStore = create((set, get) => ({\n  // State\n  projects: [],\n  currentProject: null,\n  currentStep: 0,\n  isLoading: false,\n  error: null,\n  retryCount: 0,\n  maxRetries: 3,\n  // Form Data State\n  projectDetails: null,\n  hazardIdentificationData: null,\n  riskAssessmentData: null,\n  riskControlsData: null,\n  // Loading and Error Handlers\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  setError: error => set({\n    error\n  }),\n  clearError: () => set({\n    error: null\n  }),\n  // Reset state\n  resetState: () => set({\n    currentProject: null,\n    currentStep: 0,\n    projectDetails: null,\n    hazardIdentificationData: null,\n    riskAssessmentData: null,\n    riskControlsData: null,\n    error: null,\n    retryCount: 0\n  }),\n  // Get step data\n  getStepData: step => {\n    const store = get();\n    switch (step) {\n      case 1:\n        return store.projectDetails;\n      case 2:\n        return store.hazardIdentificationData;\n      case 3:\n        return store.riskAssessmentData;\n      case 4:\n        return store.riskControlsData;\n      default:\n        return null;\n    }\n  },\n  // Project Selection\n  setCurrentProject: async project => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      if (!project) {\n        store.resetState();\n        return;\n      }\n\n      // Set current project and project details\n      set({\n        currentProject: project,\n        projectDetails: {\n          project_id: project.project_id,\n          title: project.title,\n          date: project.date,\n          facilitator: project.facilitator,\n          attendees: project.attendees || [],\n          operational_desc: project.operational_desc || '',\n          operational_files: Array.isArray(project.operational_files) ? project.operational_files : []\n        }\n      });\n\n      // Load all available step data\n      const stepData = await Promise.all([store.loadStepData(2),\n      // Hazard Identification\n      store.loadStepData(3),\n      // Risk Assessment\n      store.loadStepData(4) // Risk Controls\n      ]);\n\n      // Determine the furthest completed step\n      let lastCompletedStep = 1; // Project details is step 1\n      stepData.forEach((exists, index) => {\n        if (exists) lastCompletedStep = index + 2;\n      });\n\n      // Set the current step to the next incomplete step\n      set({\n        currentStep: Math.min(lastCompletedStep + 1, 4)\n      });\n    } catch (error) {\n      console.error('Error setting current project:', error);\n      store.setError(`Failed to load project data: ${error.message}`);\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  // Navigation\n  setCurrentStep: step => {\n    const store = get();\n\n    // Always allow navigation to step 0 (dashboard) or 1 (project details)\n    if (step <= 1) {\n      set({\n        currentStep: step,\n        error: null\n      });\n      return true;\n    }\n\n    // For other steps, check prerequisites\n    const previousStepData = store.getStepData(step - 1);\n    if (!previousStepData) {\n      store.setError('Please complete the previous step first');\n      return false;\n    }\n    set({\n      currentStep: step,\n      error: null\n    });\n    return true;\n  },\n  // Project Operations with Retry Logic\n  loadProjects: async () => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').select('*').order('created_at', {\n        ascending: false\n      });\n      if (error) throw new ProjectOperationError('Failed to load projects', 'LOAD', error);\n      set({\n        projects: data\n      });\n    } catch (error) {\n      console.error('Load projects error:', error);\n      if (store.retryCount < store.maxRetries) {\n        set(state => ({\n          retryCount: state.retryCount + 1\n        }));\n        await store.loadProjects();\n      } else {\n        set({\n          error: `Failed to load projects after ${store.maxRetries} attempts: ${error.message}`,\n          retryCount: 0\n        });\n      }\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  createProject: async projectData => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').insert([projectData]).select().single();\n      if (error) throw new ProjectOperationError('Failed to create project', 'CREATE', error);\n      set(state => ({\n        projects: [data, ...state.projects],\n        currentProject: data,\n        projectDetails: data,\n        currentStep: 2 // Automatically advance to Hazard Identification\n      }));\n      return data;\n    } catch (error) {\n      console.error('Create project error:', error);\n      set({\n        error: `Failed to create project: ${error.message}`\n      });\n      throw error;\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  updateProject: async (id, projectData) => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_projects').update(projectData).eq('id', id).select().single();\n      if (error) throw new ProjectOperationError('Failed to update project', 'UPDATE', error);\n      set(state => ({\n        projects: state.projects.map(p => p.id === id ? data : p),\n        currentProject: data,\n        projectDetails: data\n      }));\n      return data;\n    } catch (error) {\n      console.error('Update project error:', error);\n      set({\n        error: `Failed to update project: ${error.message}`\n      });\n      throw error;\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  deleteProject: async id => {\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      // Delete all related data using projectService\n      await projectService.deleteProjectData(id);\n\n      // Then delete the project\n      const {\n        error\n      } = await supabase.from('hira_projects').delete().eq('id', id);\n      if (error) throw new ProjectOperationError('Failed to delete project', 'DELETE', error);\n      set(state => {\n        var _state$currentProject;\n        return {\n          projects: state.projects.filter(p => p.id !== id),\n          ...(((_state$currentProject = state.currentProject) === null || _state$currentProject === void 0 ? void 0 : _state$currentProject.id) === id ? {\n            currentProject: null,\n            projectDetails: null,\n            currentStep: 0\n          } : {})\n        };\n      });\n    } catch (error) {\n      console.error('Delete project error:', error);\n      set({\n        error: `Failed to delete project: ${error.message}`\n      });\n      throw error;\n    } finally {\n      store.setLoading(false);\n    }\n  },\n  // Form Data Management\n  setStepData: async (step, data) => {\n    var _store$currentProject;\n    const store = get();\n    try {\n      // Update local state\n      switch (step) {\n        case 1:\n          set({\n            projectDetails: data\n          });\n          break;\n        case 2:\n          set({\n            hazardIdentificationData: data\n          });\n          // Save to relational tables using project_id\n          if ((_store$currentProject = store.currentProject) !== null && _store$currentProject !== void 0 && _store$currentProject.project_id) {\n            console.log('Saving events and hazards:', data);\n\n            // Save each event and its hazards\n            for (const event of data.events) {\n              // First save or update the event\n              const {\n                data: savedEvent,\n                error: eventError\n              } = await supabase.from('hira_events').upsert({\n                id: event.uniqueId,\n                project_id: store.currentProject.project_id,\n                name: event.name,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n              }).select().single();\n              if (eventError) throw eventError;\n\n              // Then update hazards for this event\n              await updateHazards(savedEvent.id, event.hazards);\n            }\n          } else {\n            throw new Error('Project ID not found');\n          }\n          break;\n        case 3:\n          set({\n            riskAssessmentData: data\n          });\n          break;\n        case 4:\n          set({\n            riskControlsData: data\n          });\n          // Save risk controls using assessment_id\n          if (data.controls && data.controls.length > 0) {\n            console.log('Saving risk controls for assessments');\n            for (const control of data.controls) {\n              if (control.id) {\n                await controlService.updateRiskControl(control.id, control);\n              } else {\n                await controlService.createRiskControl(control.assessment_id, control);\n              }\n            }\n          }\n          break;\n        default:\n          throw new Error(`Invalid step: ${step}`);\n      }\n      return true;\n    } catch (error) {\n      console.error(`Error in setStepData(${step}):`, error);\n      store.setError(`Failed to save step ${step} data: ${error.message}`);\n      return false;\n    }\n  },\n  // Load step data from database\n  loadStepData: async step => {\n    var _store$riskAssessment, _store$riskAssessment2;\n    const store = get();\n    store.setLoading(true);\n    store.clearError();\n    try {\n      if (!store.currentProject) throw new Error('No current project');\n      switch (step) {\n        case 2:\n          // Hazard Identification\n          // First get all events for this project\n          const {\n            data: events,\n            error: eventsError\n          } = await supabase.from('hira_events').select('id, name').eq('project_id', store.currentProject.project_id).order('created_at', {\n            ascending: true\n          });\n          if (eventsError) throw eventsError;\n          if (events && events.length > 0) {\n            // Get hazards for each event\n            const eventsWithHazards = await Promise.all(events.map(async event => {\n              const hazards = await getHazardsByEventId(event.id);\n              return {\n                uniqueId: event.id,\n                name: event.name,\n                hazards\n              };\n            }));\n            set({\n              hazardIdentificationData: {\n                events: eventsWithHazards\n              }\n            });\n            return true;\n          }\n          return false;\n        case 3:\n          // Risk Assessment\n          // Get all consequences from the database\n          const {\n            data: consequences,\n            error: consequencesError\n          } = await supabase.from('hira_consequences').select(`\n              id,\n              description,\n              current_controls,\n              hazard:hira_hazards!inner(\n                id,\n                description,\n                event:hira_events!inner(\n                  id,\n                  name,\n                  project_id\n                )\n              )\n            `).eq('hazard.event.project_id', store.currentProject.project_id);\n          if (consequencesError) throw consequencesError;\n          if (!(consequences !== null && consequences !== void 0 && consequences.length)) return false;\n\n          // Load assessments for each consequence\n          const {\n            getAssessmentsByConsequenceId\n          } = await import('../services/riskAssessmentService');\n          const assessmentPromises = consequences.map(async consequence => {\n            const assessment = await getAssessmentsByConsequenceId(consequence.id);\n            return assessment || {\n              consequence_id: consequence.id,\n              event: consequence.hazard.event.name,\n              hazard: consequence.hazard.description,\n              consequence: consequence.description,\n              current_controls: consequence.current_controls,\n              probability: null,\n              severity: null,\n              likelihood: null,\n              impact: null,\n              tolerability: null\n            };\n          });\n          const assessments = await Promise.all(assessmentPromises);\n          set({\n            riskAssessmentData: {\n              assessments\n            }\n          });\n          return true;\n        case 4:\n          // Risk Controls\n          // Get assessment IDs from risk assessment data\n          const assessmentIds = ((_store$riskAssessment = store.riskAssessmentData) === null || _store$riskAssessment === void 0 ? void 0 : (_store$riskAssessment2 = _store$riskAssessment.assessments) === null || _store$riskAssessment2 === void 0 ? void 0 : _store$riskAssessment2.map(a => a.assessment_id)) || [];\n          if (assessmentIds.length === 0) return false;\n\n          // Load controls for each assessment\n          const controlPromises = assessmentIds.map(assessmentId => controlService.getRiskControlByAssessmentId(assessmentId));\n          const controls = await Promise.all(controlPromises);\n\n          // Filter out null results and set data\n          const validControls = controls.filter(Boolean);\n          if (validControls.length > 0) {\n            set({\n              riskControlsData: {\n                controls: validControls\n              }\n            });\n            return true;\n          }\n          return false;\n        default:\n          return false;\n      }\n    } catch (error) {\n      console.error(`Load step ${step} error:`, error);\n      store.setError(`Failed to load step ${step}: ${error.message}`);\n      return false;\n    } finally {\n      store.setLoading(false);\n    }\n  }\n}));\nconst ProjectStoreContext = /*#__PURE__*/createContext();\nexport const ProjectStoreProvider = ({\n  children\n}) => {\n  _s();\n  const store = useProjectStore();\n  return /*#__PURE__*/_jsxDEV(ProjectStoreContext.Provider, {\n    value: store,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 451,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectStoreProvider, \"mAOz46q01EClzuejUd7fG0ykt6c=\", false, function () {\n  return [useProjectStore];\n});\n_c = ProjectStoreProvider;\nexport const useProjectStoreContext = () => {\n  _s2();\n  return useContext(ProjectStoreContext);\n};\n_s2(useProjectStoreContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default useProjectStore;\nvar _c;\n$RefreshReg$(_c, \"ProjectStoreProvider\");","map":{"version":3,"names":["createContext","useContext","create","supabase","projectService","controlService","updateHazards","getHazardsByEventId","jsxDEV","_jsxDEV","ProjectOperationError","Error","constructor","message","operation","details","name","useProjectStore","set","get","projects","currentProject","currentStep","isLoading","error","retryCount","maxRetries","projectDetails","hazardIdentificationData","riskAssessmentData","riskControlsData","setLoading","setError","clearError","resetState","getStepData","step","store","setCurrentProject","project","project_id","title","date","facilitator","attendees","operational_desc","operational_files","Array","isArray","stepData","Promise","all","loadStepData","lastCompletedStep","forEach","exists","index","Math","min","console","setCurrentStep","previousStepData","loadProjects","data","from","select","order","ascending","state","createProject","projectData","insert","single","updateProject","id","update","eq","map","p","deleteProject","deleteProjectData","delete","_state$currentProject","filter","setStepData","_store$currentProject","log","event","events","savedEvent","eventError","upsert","uniqueId","created_at","Date","toISOString","updated_at","hazards","controls","length","control","updateRiskControl","createRiskControl","assessment_id","_store$riskAssessment","_store$riskAssessment2","eventsError","eventsWithHazards","consequences","consequencesError","getAssessmentsByConsequenceId","assessmentPromises","consequence","assessment","consequence_id","hazard","description","current_controls","probability","severity","likelihood","impact","tolerability","assessments","assessmentIds","a","controlPromises","assessmentId","getRiskControlByAssessmentId","validControls","Boolean","ProjectStoreContext","ProjectStoreProvider","children","_s","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useProjectStoreContext","_s2","$RefreshReg$"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/stores/projectStore.js"],"sourcesContent":["import { createContext, useContext } from 'react';\r\nimport { create } from 'zustand';\r\nimport { supabase } from '../services/supabase';\r\nimport { projectService } from '../services/projectService';\r\nimport { controlService } from '../services/controlService';\r\nimport { updateHazards, getHazardsByEventId } from '../services/hazardService';\r\n\r\n// Custom error class for project operations\r\nclass ProjectOperationError extends Error {\r\n  constructor(message, operation, details = null) {\r\n    super(message);\r\n    this.name = 'ProjectOperationError';\r\n    this.operation = operation;\r\n    this.details = details;\r\n  }\r\n}\r\n\r\nconst useProjectStore = create((set, get) => ({\r\n  // State\r\n  projects: [],\r\n  currentProject: null,\r\n  currentStep: 0,\r\n  isLoading: false,\r\n  error: null,\r\n  retryCount: 0,\r\n  maxRetries: 3,\r\n\r\n  // Form Data State\r\n  projectDetails: null,\r\n  hazardIdentificationData: null,\r\n  riskAssessmentData: null,\r\n  riskControlsData: null,\r\n\r\n  // Loading and Error Handlers\r\n  setLoading: (isLoading) => set({ isLoading }),\r\n  setError: (error) => set({ error }),\r\n  clearError: () => set({ error: null }),\r\n  \r\n  // Reset state\r\n  resetState: () => set({\r\n    currentProject: null,\r\n    currentStep: 0,\r\n    projectDetails: null,\r\n    hazardIdentificationData: null,\r\n    riskAssessmentData: null,\r\n    riskControlsData: null,\r\n    error: null,\r\n    retryCount: 0\r\n  }),\r\n\r\n  // Get step data\r\n  getStepData: (step) => {\r\n    const store = get();\r\n    switch (step) {\r\n      case 1:\r\n        return store.projectDetails;\r\n      case 2:\r\n        return store.hazardIdentificationData;\r\n      case 3:\r\n        return store.riskAssessmentData;\r\n      case 4:\r\n        return store.riskControlsData;\r\n      default:\r\n        return null;\r\n    }\r\n  },\r\n\r\n  // Project Selection\r\n  setCurrentProject: async (project) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      if (!project) {\r\n        store.resetState();\r\n        return;\r\n      }\r\n\r\n      // Set current project and project details\r\n      set({ \r\n        currentProject: project,\r\n        projectDetails: {\r\n          project_id: project.project_id,\r\n          title: project.title,\r\n          date: project.date,\r\n          facilitator: project.facilitator,\r\n          attendees: project.attendees || [],\r\n          operational_desc: project.operational_desc || '',\r\n          operational_files: Array.isArray(project.operational_files) ? project.operational_files : []\r\n        }\r\n      });\r\n\r\n      // Load all available step data\r\n      const stepData = await Promise.all([\r\n        store.loadStepData(2), // Hazard Identification\r\n        store.loadStepData(3), // Risk Assessment\r\n        store.loadStepData(4)  // Risk Controls\r\n      ]);\r\n\r\n      // Determine the furthest completed step\r\n      let lastCompletedStep = 1; // Project details is step 1\r\n      stepData.forEach((exists, index) => {\r\n        if (exists) lastCompletedStep = index + 2;\r\n      });\r\n\r\n      // Set the current step to the next incomplete step\r\n      set({ currentStep: Math.min(lastCompletedStep + 1, 4) });\r\n\r\n    } catch (error) {\r\n      console.error('Error setting current project:', error);\r\n      store.setError(`Failed to load project data: ${error.message}`);\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  // Navigation\r\n  setCurrentStep: (step) => {\r\n    const store = get();\r\n    \r\n    // Always allow navigation to step 0 (dashboard) or 1 (project details)\r\n    if (step <= 1) {\r\n      set({ currentStep: step, error: null });\r\n      return true;\r\n    }\r\n\r\n    // For other steps, check prerequisites\r\n    const previousStepData = store.getStepData(step - 1);\r\n    if (!previousStepData) {\r\n      store.setError('Please complete the previous step first');\r\n      return false;\r\n    }\r\n\r\n    set({ currentStep: step, error: null });\r\n    return true;\r\n  },\r\n\r\n  // Project Operations with Retry Logic\r\n  loadProjects: async () => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw new ProjectOperationError('Failed to load projects', 'LOAD', error);\r\n\r\n      set({ projects: data });\r\n    } catch (error) {\r\n      console.error('Load projects error:', error);\r\n      if (store.retryCount < store.maxRetries) {\r\n        set(state => ({ retryCount: state.retryCount + 1 }));\r\n        await store.loadProjects();\r\n      } else {\r\n        set({ \r\n          error: `Failed to load projects after ${store.maxRetries} attempts: ${error.message}`,\r\n          retryCount: 0\r\n        });\r\n      }\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  createProject: async (projectData) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .insert([projectData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw new ProjectOperationError('Failed to create project', 'CREATE', error);\r\n\r\n      set(state => ({\r\n        projects: [data, ...state.projects],\r\n        currentProject: data,\r\n        projectDetails: data,\r\n        currentStep: 2 // Automatically advance to Hazard Identification\r\n      }));\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Create project error:', error);\r\n      set({ error: `Failed to create project: ${error.message}` });\r\n      throw error;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  updateProject: async (id, projectData) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_projects')\r\n        .update(projectData)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw new ProjectOperationError('Failed to update project', 'UPDATE', error);\r\n\r\n      set(state => ({\r\n        projects: state.projects.map(p => p.id === id ? data : p),\r\n        currentProject: data,\r\n        projectDetails: data\r\n      }));\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Update project error:', error);\r\n      set({ error: `Failed to update project: ${error.message}` });\r\n      throw error;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  deleteProject: async (id) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      // Delete all related data using projectService\r\n      await projectService.deleteProjectData(id);\r\n\r\n      // Then delete the project\r\n      const { error } = await supabase\r\n        .from('hira_projects')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw new ProjectOperationError('Failed to delete project', 'DELETE', error);\r\n\r\n      set(state => ({\r\n        projects: state.projects.filter(p => p.id !== id),\r\n        ...(state.currentProject?.id === id ? {\r\n          currentProject: null,\r\n          projectDetails: null,\r\n          currentStep: 0\r\n        } : {})\r\n      }));\r\n    } catch (error) {\r\n      console.error('Delete project error:', error);\r\n      set({ error: `Failed to delete project: ${error.message}` });\r\n      throw error;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  },\r\n\r\n  // Form Data Management\r\n  setStepData: async (step, data) => {\r\n    const store = get();\r\n    try {\r\n      // Update local state\r\n      switch (step) {\r\n        case 1:\r\n          set({ projectDetails: data });\r\n          break;\r\n        case 2:\r\n          set({ hazardIdentificationData: data });\r\n          // Save to relational tables using project_id\r\n          if (store.currentProject?.project_id) {\r\n            console.log('Saving events and hazards:', data);\r\n            \r\n            // Save each event and its hazards\r\n            for (const event of data.events) {\r\n              // First save or update the event\r\n              const { data: savedEvent, error: eventError } = await supabase\r\n                .from('hira_events')\r\n                .upsert({\r\n                  id: event.uniqueId,\r\n                  project_id: store.currentProject.project_id,\r\n                  name: event.name,\r\n                  created_at: new Date().toISOString(),\r\n                  updated_at: new Date().toISOString()\r\n                })\r\n                .select()\r\n                .single();\r\n\r\n              if (eventError) throw eventError;\r\n\r\n              // Then update hazards for this event\r\n              await updateHazards(savedEvent.id, event.hazards);\r\n            }\r\n          } else {\r\n            throw new Error('Project ID not found');\r\n          }\r\n          break;\r\n        case 3:\r\n          set({ riskAssessmentData: data });\r\n          break;\r\n        case 4:\r\n          set({ riskControlsData: data });\r\n          // Save risk controls using assessment_id\r\n          if (data.controls && data.controls.length > 0) {\r\n            console.log('Saving risk controls for assessments');\r\n            for (const control of data.controls) {\r\n              if (control.id) {\r\n                await controlService.updateRiskControl(control.id, control);\r\n              } else {\r\n                await controlService.createRiskControl(control.assessment_id, control);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Invalid step: ${step}`);\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error in setStepData(${step}):`, error);\r\n      store.setError(`Failed to save step ${step} data: ${error.message}`);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  // Load step data from database\r\n  loadStepData: async (step) => {\r\n    const store = get();\r\n    store.setLoading(true);\r\n    store.clearError();\r\n\r\n    try {\r\n      if (!store.currentProject) throw new Error('No current project');\r\n\r\n      switch (step) {\r\n        case 2: // Hazard Identification\r\n          // First get all events for this project\r\n          const { data: events, error: eventsError } = await supabase\r\n            .from('hira_events')\r\n            .select('id, name')\r\n            .eq('project_id', store.currentProject.project_id)\r\n            .order('created_at', { ascending: true });\r\n\r\n          if (eventsError) throw eventsError;\r\n\r\n          if (events && events.length > 0) {\r\n            // Get hazards for each event\r\n            const eventsWithHazards = await Promise.all(events.map(async event => {\r\n              const hazards = await getHazardsByEventId(event.id);\r\n              return {\r\n                uniqueId: event.id,\r\n                name: event.name,\r\n                hazards\r\n              };\r\n            }));\r\n\r\n            set({ hazardIdentificationData: { events: eventsWithHazards } });\r\n            return true;\r\n          }\r\n          return false;\r\n\r\n        case 3: // Risk Assessment\r\n          // Get all consequences from the database\r\n          const { data: consequences, error: consequencesError } = await supabase\r\n            .from('hira_consequences')\r\n            .select(`\r\n              id,\r\n              description,\r\n              current_controls,\r\n              hazard:hira_hazards!inner(\r\n                id,\r\n                description,\r\n                event:hira_events!inner(\r\n                  id,\r\n                  name,\r\n                  project_id\r\n                )\r\n              )\r\n            `)\r\n            .eq('hazard.event.project_id', store.currentProject.project_id);\r\n\r\n          if (consequencesError) throw consequencesError;\r\n          if (!consequences?.length) return false;\r\n\r\n          // Load assessments for each consequence\r\n          const { getAssessmentsByConsequenceId } = await import('../services/riskAssessmentService');\r\n          const assessmentPromises = consequences.map(async consequence => {\r\n            const assessment = await getAssessmentsByConsequenceId(consequence.id);\r\n            return assessment || {\r\n              consequence_id: consequence.id,\r\n              event: consequence.hazard.event.name,\r\n              hazard: consequence.hazard.description,\r\n              consequence: consequence.description,\r\n              current_controls: consequence.current_controls,\r\n              probability: null,\r\n              severity: null,\r\n              likelihood: null,\r\n              impact: null,\r\n              tolerability: null\r\n            };\r\n          });\r\n\r\n          const assessments = await Promise.all(assessmentPromises);\r\n          set({ riskAssessmentData: { assessments } });\r\n          return true;\r\n\r\n        case 4: // Risk Controls\r\n          // Get assessment IDs from risk assessment data\r\n          const assessmentIds = store.riskAssessmentData?.assessments?.map(a => a.assessment_id) || [];\r\n          if (assessmentIds.length === 0) return false;\r\n\r\n          // Load controls for each assessment\r\n          const controlPromises = assessmentIds.map(assessmentId => \r\n            controlService.getRiskControlByAssessmentId(assessmentId)\r\n          );\r\n          const controls = await Promise.all(controlPromises);\r\n          \r\n          // Filter out null results and set data\r\n          const validControls = controls.filter(Boolean);\r\n          if (validControls.length > 0) {\r\n            set({ riskControlsData: { controls: validControls } });\r\n            return true;\r\n          }\r\n          return false;\r\n\r\n        default:\r\n          return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(`Load step ${step} error:`, error);\r\n      store.setError(`Failed to load step ${step}: ${error.message}`);\r\n      return false;\r\n    } finally {\r\n      store.setLoading(false);\r\n    }\r\n  }\r\n}));\r\n\r\nconst ProjectStoreContext = createContext();\r\n\r\nexport const ProjectStoreProvider = ({ children }) => {\r\n  const store = useProjectStore();\r\n  return (\r\n    <ProjectStoreContext.Provider value={store}>\r\n      {children}\r\n    </ProjectStoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useProjectStoreContext = () => useContext(ProjectStoreContext);\r\n\r\nexport default useProjectStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}