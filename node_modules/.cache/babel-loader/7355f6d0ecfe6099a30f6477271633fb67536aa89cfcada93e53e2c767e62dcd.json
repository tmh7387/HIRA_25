{"ast":null,"code":"import { supabase } from './supabase';\nexport const controlService = {\n  async createRiskControls(project_id, controlsData) {\n    console.log('Creating risk controls for project:', project_id);\n    const controlPromises = controlsData.controls.map(async control => {\n      try {\n        // Verify the assessment exists\n        const {\n          data: assessment,\n          error: assessmentError\n        } = await supabase.from('hira_risk_assessments').select('id').eq('id', control.assessment_id).single();\n        if (assessmentError) {\n          console.error('Error finding assessment:', assessmentError);\n          throw new Error(`Assessment not found: ${control.assessment_id}`);\n        }\n\n        // Create the risk control\n        const {\n          data: createdControl,\n          error: controlError\n        } = await supabase.from('hira_risk_controls').insert({\n          assessment_id: control.assessment_id,\n          additional_mitigation: control.additionalMitigation,\n          risk_owner: control.riskOwner,\n          target_date: control.targetDate,\n          date_implemented: control.dateImplemented,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select(`\n            id,\n            additional_mitigation,\n            risk_owner,\n            target_date,\n            date_implemented,\n            assessment:hira_risk_assessments!inner(\n              id\n            )\n          `).single();\n        if (controlError) {\n          console.error('Error creating risk control:', controlError);\n          throw controlError;\n        }\n        return {\n          uniqueId: createdControl.id,\n          assessment_id: createdControl.assessment.id,\n          additionalMitigation: createdControl.additional_mitigation,\n          riskOwner: createdControl.risk_owner,\n          targetDate: createdControl.target_date,\n          dateImplemented: createdControl.date_implemented\n        };\n      } catch (error) {\n        console.error('Error processing risk control:', error);\n        throw error;\n      }\n    });\n    try {\n      const results = await Promise.all(controlPromises);\n      console.log('Successfully created all risk controls:', results);\n      return {\n        controls: results\n      };\n    } catch (error) {\n      console.error('Error creating risk controls:', error);\n      throw error;\n    }\n  },\n  async updateControls(project_id, controlsData) {\n    try {\n      // First get all existing controls for this project through the relationships\n      const {\n        data: existingControls,\n        error: fetchError\n      } = await supabase.from('hira_risk_controls').select(`\n          id,\n          assessment:hira_risk_assessments!inner(\n            project_id\n          )\n        `).eq('assessment.project_id', project_id);\n      if (fetchError) throw fetchError;\n\n      // Delete existing controls if any exist\n      if ((existingControls === null || existingControls === void 0 ? void 0 : existingControls.length) > 0) {\n        const {\n          error: deleteError\n        } = await supabase.from('hira_risk_controls').delete().in('id', existingControls.map(c => c.id));\n        if (deleteError) throw deleteError;\n      }\n\n      // Create new controls\n      return this.createRiskControls(project_id, controlsData);\n    } catch (error) {\n      console.error('Error updating risk controls:', error);\n      throw error;\n    }\n  },\n  async getControlsByProjectId(project_id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('hira_risk_controls').select(`\n          id,\n          additional_mitigation,\n          risk_owner,\n          target_date,\n          date_implemented,\n          assessment:hira_risk_assessments!inner(\n            id,\n            project_id\n          )\n        `).eq('assessment.project_id', project_id);\n      if (error) throw error;\n      return data.map(control => ({\n        uniqueId: control.id,\n        assessment_id: control.assessment.id,\n        additionalMitigation: control.additional_mitigation,\n        riskOwner: control.risk_owner,\n        targetDate: control.target_date,\n        dateImplemented: control.date_implemented\n      }));\n    } catch (error) {\n      console.error('Error getting risk controls:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","controlService","createRiskControls","project_id","controlsData","console","log","controlPromises","controls","map","control","data","assessment","error","assessmentError","from","select","eq","assessment_id","single","Error","createdControl","controlError","insert","additional_mitigation","additionalMitigation","risk_owner","riskOwner","target_date","targetDate","date_implemented","dateImplemented","created_at","Date","toISOString","updated_at","uniqueId","id","results","Promise","all","updateControls","existingControls","fetchError","length","deleteError","delete","in","c","getControlsByProjectId"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/controlService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport const controlService = {\r\n  async createRiskControls(project_id, controlsData) {\r\n    console.log('Creating risk controls for project:', project_id);\r\n    \r\n    const controlPromises = controlsData.controls.map(async control => {\r\n      try {\r\n        // Verify the assessment exists\r\n        const { data: assessment, error: assessmentError } = await supabase\r\n          .from('hira_risk_assessments')\r\n          .select('id')\r\n          .eq('id', control.assessment_id)\r\n          .single();\r\n\r\n        if (assessmentError) {\r\n          console.error('Error finding assessment:', assessmentError);\r\n          throw new Error(`Assessment not found: ${control.assessment_id}`);\r\n        }\r\n\r\n        // Create the risk control\r\n        const { data: createdControl, error: controlError } = await supabase\r\n          .from('hira_risk_controls')\r\n          .insert({\r\n            assessment_id: control.assessment_id,\r\n            additional_mitigation: control.additionalMitigation,\r\n            risk_owner: control.riskOwner,\r\n            target_date: control.targetDate,\r\n            date_implemented: control.dateImplemented,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select(`\r\n            id,\r\n            additional_mitigation,\r\n            risk_owner,\r\n            target_date,\r\n            date_implemented,\r\n            assessment:hira_risk_assessments!inner(\r\n              id\r\n            )\r\n          `)\r\n          .single();\r\n\r\n        if (controlError) {\r\n          console.error('Error creating risk control:', controlError);\r\n          throw controlError;\r\n        }\r\n\r\n        return {\r\n          uniqueId: createdControl.id,\r\n          assessment_id: createdControl.assessment.id,\r\n          additionalMitigation: createdControl.additional_mitigation,\r\n          riskOwner: createdControl.risk_owner,\r\n          targetDate: createdControl.target_date,\r\n          dateImplemented: createdControl.date_implemented\r\n        };\r\n      } catch (error) {\r\n        console.error('Error processing risk control:', error);\r\n        throw error;\r\n      }\r\n    });\r\n\r\n    try {\r\n      const results = await Promise.all(controlPromises);\r\n      console.log('Successfully created all risk controls:', results);\r\n      return { controls: results };\r\n    } catch (error) {\r\n      console.error('Error creating risk controls:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateControls(project_id, controlsData) {\r\n    try {\r\n      // First get all existing controls for this project through the relationships\r\n      const { data: existingControls, error: fetchError } = await supabase\r\n        .from('hira_risk_controls')\r\n        .select(`\r\n          id,\r\n          assessment:hira_risk_assessments!inner(\r\n            project_id\r\n          )\r\n        `)\r\n        .eq('assessment.project_id', project_id);\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      // Delete existing controls if any exist\r\n      if (existingControls?.length > 0) {\r\n        const { error: deleteError } = await supabase\r\n          .from('hira_risk_controls')\r\n          .delete()\r\n          .in('id', existingControls.map(c => c.id));\r\n\r\n        if (deleteError) throw deleteError;\r\n      }\r\n\r\n      // Create new controls\r\n      return this.createRiskControls(project_id, controlsData);\r\n    } catch (error) {\r\n      console.error('Error updating risk controls:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getControlsByProjectId(project_id) {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('hira_risk_controls')\r\n        .select(`\r\n          id,\r\n          additional_mitigation,\r\n          risk_owner,\r\n          target_date,\r\n          date_implemented,\r\n          assessment:hira_risk_assessments!inner(\r\n            id,\r\n            project_id\r\n          )\r\n        `)\r\n        .eq('assessment.project_id', project_id);\r\n\r\n      if (error) throw error;\r\n\r\n      return data.map(control => ({\r\n        uniqueId: control.id,\r\n        assessment_id: control.assessment.id,\r\n        additionalMitigation: control.additional_mitigation,\r\n        riskOwner: control.risk_owner,\r\n        targetDate: control.target_date,\r\n        dateImplemented: control.date_implemented\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting risk controls:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}