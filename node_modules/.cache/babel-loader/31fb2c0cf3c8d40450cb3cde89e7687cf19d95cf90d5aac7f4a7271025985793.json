{"ast":null,"code":"import { supabase } from './supabase';\nexport async function createHazards(projectId, hazardsData) {\n  try {\n    // Create events and their related data\n    const eventsPromises = hazardsData.events.map(async event => {\n      // 1. Create event\n      const {\n        data: createdEvent,\n        error: eventError\n      } = await supabase.from('hira_events').insert({\n        project_id: projectId,\n        name: event.name,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).select().single();\n      if (eventError) {\n        console.error('Error creating event:', eventError);\n        throw eventError;\n      }\n\n      // 2. Create hazards for this event\n      const hazardsPromises = event.hazards.map(async hazard => {\n        const {\n          data: createdHazard,\n          error: hazardError\n        } = await supabase.from('hira_hazards').insert({\n          event_id: createdEvent.id,\n          description: hazard.description,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select().single();\n        if (hazardError) {\n          console.error('Error creating hazard:', hazardError);\n          throw hazardError;\n        }\n\n        // 3. Create consequences for this hazard\n        const consequencesPromises = hazard.consequences.map(consequence => supabase.from('hira_consequences').insert({\n          hazard_id: createdHazard.id,\n          description: consequence.description,\n          current_controls: consequence.currentControls,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        }).select().single());\n        const consequencesResults = await Promise.all(consequencesPromises);\n        const consequences = consequencesResults.map(result => {\n          if (result.error) throw result.error;\n          return {\n            uniqueId: result.data.id,\n            description: result.data.description,\n            currentControls: result.data.current_controls\n          };\n        });\n        return {\n          uniqueId: createdHazard.id,\n          description: createdHazard.description,\n          consequences\n        };\n      });\n      const hazards = await Promise.all(hazardsPromises);\n      return {\n        uniqueId: createdEvent.id,\n        name: createdEvent.name,\n        hazards\n      };\n    });\n    const events = await Promise.all(eventsPromises);\n    return {\n      events\n    };\n  } catch (error) {\n    console.error('Error creating hazards:', error);\n    throw error;\n  }\n}\nexport async function updateHazards(projectId, hazardsData) {\n  try {\n    // First get all events for this project\n    const {\n      data: events,\n      error: fetchError\n    } = await supabase.from('hira_events').select('id').eq('project_id', projectId);\n    if (fetchError) throw fetchError;\n    if (events && events.length > 0) {\n      // Delete all events for this project (cascades to hazards and consequences)\n      const {\n        error: deleteError\n      } = await supabase.from('hira_events').delete().eq('project_id', projectId);\n      if (deleteError) throw deleteError;\n    }\n\n    // Then create new data\n    return createHazards(projectId, hazardsData);\n  } catch (error) {\n    console.error('Error updating hazards:', error);\n    throw error;\n  }\n}\nexport async function getHazardsByProjectId(projectId) {\n  try {\n    const {\n      data: events,\n      error\n    } = await supabase.from('hira_events').select(`\n        id,\n        name,\n        hira_hazards (\n          id,\n          description,\n          hira_consequences (\n            id,\n            description,\n            current_controls\n          )\n        )\n      `).eq('project_id', projectId).order('created_at', {\n      ascending: true\n    });\n    if (error) {\n      console.error('Error fetching hazards:', error);\n      throw error;\n    }\n    return {\n      events: events.map(event => ({\n        uniqueId: event.id,\n        name: event.name,\n        hazards: event.hira_hazards.map(hazard => ({\n          uniqueId: hazard.id,\n          description: hazard.description,\n          consequences: hazard.hira_consequences.map(consequence => ({\n            uniqueId: consequence.id,\n            description: consequence.description,\n            currentControls: consequence.current_controls\n          }))\n        }))\n      }))\n    };\n  } catch (error) {\n    console.error('Error getting hazards:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","createHazards","projectId","hazardsData","eventsPromises","events","map","event","data","createdEvent","error","eventError","from","insert","project_id","name","created_at","Date","toISOString","updated_at","select","single","console","hazardsPromises","hazards","hazard","createdHazard","hazardError","event_id","id","description","consequencesPromises","consequences","consequence","hazard_id","current_controls","currentControls","consequencesResults","Promise","all","result","uniqueId","updateHazards","fetchError","eq","length","deleteError","delete","getHazardsByProjectId","order","ascending","hira_hazards","hira_consequences"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/hazardService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function createHazards(projectId, hazardsData) {\r\n  try {\r\n    // Create events and their related data\r\n    const eventsPromises = hazardsData.events.map(async event => {\r\n      // 1. Create event\r\n      const { data: createdEvent, error: eventError } = await supabase\r\n        .from('hira_events')\r\n        .insert({\r\n          project_id: projectId,\r\n          name: event.name,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (eventError) {\r\n        console.error('Error creating event:', eventError);\r\n        throw eventError;\r\n      }\r\n\r\n      // 2. Create hazards for this event\r\n      const hazardsPromises = event.hazards.map(async hazard => {\r\n        const { data: createdHazard, error: hazardError } = await supabase\r\n          .from('hira_hazards')\r\n          .insert({\r\n            event_id: createdEvent.id,\r\n            description: hazard.description,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (hazardError) {\r\n          console.error('Error creating hazard:', hazardError);\r\n          throw hazardError;\r\n        }\r\n\r\n        // 3. Create consequences for this hazard\r\n        const consequencesPromises = hazard.consequences.map(consequence => \r\n          supabase\r\n            .from('hira_consequences')\r\n            .insert({\r\n              hazard_id: createdHazard.id,\r\n              description: consequence.description,\r\n              current_controls: consequence.currentControls,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .select()\r\n            .single()\r\n        );\r\n\r\n        const consequencesResults = await Promise.all(consequencesPromises);\r\n        const consequences = consequencesResults.map(result => {\r\n          if (result.error) throw result.error;\r\n          return {\r\n            uniqueId: result.data.id,\r\n            description: result.data.description,\r\n            currentControls: result.data.current_controls\r\n          };\r\n        });\r\n\r\n        return {\r\n          uniqueId: createdHazard.id,\r\n          description: createdHazard.description,\r\n          consequences\r\n        };\r\n      });\r\n\r\n      const hazards = await Promise.all(hazardsPromises);\r\n\r\n      return {\r\n        uniqueId: createdEvent.id,\r\n        name: createdEvent.name,\r\n        hazards\r\n      };\r\n    });\r\n\r\n    const events = await Promise.all(eventsPromises);\r\n    return { events };\r\n  } catch (error) {\r\n    console.error('Error creating hazards:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateHazards(projectId, hazardsData) {\r\n  try {\r\n    // First get all events for this project\r\n    const { data: events, error: fetchError } = await supabase\r\n      .from('hira_events')\r\n      .select('id')\r\n      .eq('project_id', projectId);\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    if (events && events.length > 0) {\r\n      // Delete all events for this project (cascades to hazards and consequences)\r\n      const { error: deleteError } = await supabase\r\n        .from('hira_events')\r\n        .delete()\r\n        .eq('project_id', projectId);\r\n\r\n      if (deleteError) throw deleteError;\r\n    }\r\n\r\n    // Then create new data\r\n    return createHazards(projectId, hazardsData);\r\n  } catch (error) {\r\n    console.error('Error updating hazards:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getHazardsByProjectId(projectId) {\r\n  try {\r\n    const { data: events, error } = await supabase\r\n      .from('hira_events')\r\n      .select(`\r\n        id,\r\n        name,\r\n        hira_hazards (\r\n          id,\r\n          description,\r\n          hira_consequences (\r\n            id,\r\n            description,\r\n            current_controls\r\n          )\r\n        )\r\n      `)\r\n      .eq('project_id', projectId)\r\n      .order('created_at', { ascending: true });\r\n\r\n    if (error) {\r\n      console.error('Error fetching hazards:', error);\r\n      throw error;\r\n    }\r\n\r\n    return {\r\n      events: events.map(event => ({\r\n        uniqueId: event.id,\r\n        name: event.name,\r\n        hazards: event.hira_hazards.map(hazard => ({\r\n          uniqueId: hazard.id,\r\n          description: hazard.description,\r\n          consequences: hazard.hira_consequences.map(consequence => ({\r\n            uniqueId: consequence.id,\r\n            description: consequence.description,\r\n            currentControls: consequence.current_controls\r\n          }))\r\n        }))\r\n      }))\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting hazards:', error);\r\n    throw error;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}