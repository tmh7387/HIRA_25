{"ast":null,"code":"import { create } from 'zustand';\nexport const useRiskMatrixStore = create(set => ({\n  // State\n  matrixType: 'icao',\n  // Default to ICAO matrix\n\n  // Actions\n  setMatrixType: type => {\n    // Convert to lowercase for case-insensitive comparison\n    const normalizedType = type.toLowerCase();\n    if (normalizedType !== 'icao' && normalizedType !== 'integrated') {\n      console.error('Invalid matrix type:', type);\n      return;\n    }\n    set({\n      matrixType: normalizedType\n    });\n  }\n}));\nexport default useRiskMatrixStore;","map":{"version":3,"names":["create","useRiskMatrixStore","set","matrixType","setMatrixType","type","normalizedType","toLowerCase","console","error"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/stores/riskMatrixStore.js"],"sourcesContent":["import { create } from 'zustand';\n\nexport const useRiskMatrixStore = create((set) => ({\n  // State\n  matrixType: 'icao', // Default to ICAO matrix\n  \n  // Actions\n  setMatrixType: (type) => {\n    // Convert to lowercase for case-insensitive comparison\n    const normalizedType = type.toLowerCase();\n    if (normalizedType !== 'icao' && normalizedType !== 'integrated') {\n      console.error('Invalid matrix type:', type);\n      return;\n    }\n    set({ matrixType: normalizedType });\n  },\n}));\n\nexport default useRiskMatrixStore;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,OAAO,MAAMC,kBAAkB,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACjD;EACAC,UAAU,EAAE,MAAM;EAAE;;EAEpB;EACAC,aAAa,EAAGC,IAAI,IAAK;IACvB;IACA,MAAMC,cAAc,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;IACzC,IAAID,cAAc,KAAK,MAAM,IAAIA,cAAc,KAAK,YAAY,EAAE;MAChEE,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEJ,IAAI,CAAC;MAC3C;IACF;IACAH,GAAG,CAAC;MAAEC,UAAU,EAAEG;IAAe,CAAC,CAAC;EACrC;AACF,CAAC,CAAC,CAAC;AAEH,eAAeL,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}