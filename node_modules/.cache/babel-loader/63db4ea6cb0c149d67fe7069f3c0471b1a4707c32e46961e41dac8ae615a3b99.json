{"ast":null,"code":"import { supabase } from './supabase';\nexport async function createRiskControls(project_id, controlsData) {\n  console.log('Creating risk controls for project:', project_id);\n  const controlPromises = controlsData.controls.map(async control => {\n    try {\n      // Verify the assessment exists\n      const {\n        data: assessment,\n        error: assessmentError\n      } = await supabase.from('hira_risk_assessments').select('id').eq('id', control.assessment_id).single();\n      if (assessmentError) {\n        console.error('Error finding assessment:', assessmentError);\n        throw new Error(`Assessment not found: ${control.assessment_id}`);\n      }\n\n      // Create the risk control\n      const {\n        data: createdControl,\n        error: controlError\n      } = await supabase.from('hira_risk_controls').insert({\n        assessment_id: control.assessment_id,\n        additional_mitigation: control.additionalMitigation,\n        risk_owner: control.riskOwner,\n        target_date: control.targetDate,\n        date_implemented: control.dateImplemented,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }).select(`\n          id,\n          additional_mitigation,\n          risk_owner,\n          target_date,\n          date_implemented,\n          assessment:hira_risk_assessments!inner(\n            id\n          )\n        `).single();\n      if (controlError) {\n        console.error('Error creating risk control:', controlError);\n        throw controlError;\n      }\n      return {\n        uniqueId: createdControl.id,\n        assessment_id: createdControl.assessment.id,\n        additionalMitigation: createdControl.additional_mitigation,\n        riskOwner: createdControl.risk_owner,\n        targetDate: createdControl.target_date,\n        dateImplemented: createdControl.date_implemented\n      };\n    } catch (error) {\n      console.error('Error processing risk control:', error);\n      throw error;\n    }\n  });\n  try {\n    const results = await Promise.all(controlPromises);\n    console.log('Successfully created all risk controls:', results);\n    return {\n      controls: results\n    };\n  } catch (error) {\n    console.error('Error creating risk controls:', error);\n    throw error;\n  }\n}\nexport async function updateRiskControls(project_id, controlsData) {\n  try {\n    // First get all existing controls for this project through the relationships\n    const {\n      data: existingControls,\n      error: fetchError\n    } = await supabase.from('hira_risk_controls').select(`\n        id,\n        assessment:hira_risk_assessments!inner(\n          project_id\n        )\n      `).eq('assessment.project_id', project_id);\n    if (fetchError) throw fetchError;\n\n    // Delete existing controls if any exist\n    if ((existingControls === null || existingControls === void 0 ? void 0 : existingControls.length) > 0) {\n      const {\n        error: deleteError\n      } = await supabase.from('hira_risk_controls').delete().in('id', existingControls.map(c => c.id));\n      if (deleteError) throw deleteError;\n    }\n\n    // Create new controls\n    return createRiskControls(project_id, controlsData);\n  } catch (error) {\n    console.error('Error updating risk controls:', error);\n    throw error;\n  }\n}\nexport async function getRiskControlsByProjectId(project_id) {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('hira_risk_controls').select(`\n        id,\n        additional_mitigation,\n        risk_owner,\n        target_date,\n        date_implemented,\n        assessment:hira_risk_assessments!inner(\n          id,\n          project_id\n        )\n      `).eq('assessment.project_id', project_id);\n    if (error) throw error;\n    return data.map(control => ({\n      uniqueId: control.id,\n      assessment_id: control.assessment.id,\n      additionalMitigation: control.additional_mitigation,\n      riskOwner: control.risk_owner,\n      targetDate: control.target_date,\n      dateImplemented: control.date_implemented\n    }));\n  } catch (error) {\n    console.error('Error getting risk controls:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["supabase","createRiskControls","project_id","controlsData","console","log","controlPromises","controls","map","control","data","assessment","error","assessmentError","from","select","eq","assessment_id","single","Error","createdControl","controlError","insert","additional_mitigation","additionalMitigation","risk_owner","riskOwner","target_date","targetDate","date_implemented","dateImplemented","created_at","Date","toISOString","updated_at","uniqueId","id","results","Promise","all","updateRiskControls","existingControls","fetchError","length","deleteError","delete","in","c","getRiskControlsByProjectId"],"sources":["C:/Users/tmh73/Aviation Synergy/MaXwell AI - General/HIRA_25/src/services/controlService.js"],"sourcesContent":["import { supabase } from './supabase';\r\n\r\nexport async function createRiskControls(project_id, controlsData) {\r\n  console.log('Creating risk controls for project:', project_id);\r\n  \r\n  const controlPromises = controlsData.controls.map(async control => {\r\n    try {\r\n      // Verify the assessment exists\r\n      const { data: assessment, error: assessmentError } = await supabase\r\n        .from('hira_risk_assessments')\r\n        .select('id')\r\n        .eq('id', control.assessment_id)\r\n        .single();\r\n\r\n      if (assessmentError) {\r\n        console.error('Error finding assessment:', assessmentError);\r\n        throw new Error(`Assessment not found: ${control.assessment_id}`);\r\n      }\r\n\r\n      // Create the risk control\r\n      const { data: createdControl, error: controlError } = await supabase\r\n        .from('hira_risk_controls')\r\n        .insert({\r\n          assessment_id: control.assessment_id,\r\n          additional_mitigation: control.additionalMitigation,\r\n          risk_owner: control.riskOwner,\r\n          target_date: control.targetDate,\r\n          date_implemented: control.dateImplemented,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .select(`\r\n          id,\r\n          additional_mitigation,\r\n          risk_owner,\r\n          target_date,\r\n          date_implemented,\r\n          assessment:hira_risk_assessments!inner(\r\n            id\r\n          )\r\n        `)\r\n        .single();\r\n\r\n      if (controlError) {\r\n        console.error('Error creating risk control:', controlError);\r\n        throw controlError;\r\n      }\r\n\r\n      return {\r\n        uniqueId: createdControl.id,\r\n        assessment_id: createdControl.assessment.id,\r\n        additionalMitigation: createdControl.additional_mitigation,\r\n        riskOwner: createdControl.risk_owner,\r\n        targetDate: createdControl.target_date,\r\n        dateImplemented: createdControl.date_implemented\r\n      };\r\n    } catch (error) {\r\n      console.error('Error processing risk control:', error);\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  try {\r\n    const results = await Promise.all(controlPromises);\r\n    console.log('Successfully created all risk controls:', results);\r\n    return { controls: results };\r\n  } catch (error) {\r\n    console.error('Error creating risk controls:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateRiskControls(project_id, controlsData) {\r\n  try {\r\n    // First get all existing controls for this project through the relationships\r\n    const { data: existingControls, error: fetchError } = await supabase\r\n      .from('hira_risk_controls')\r\n      .select(`\r\n        id,\r\n        assessment:hira_risk_assessments!inner(\r\n          project_id\r\n        )\r\n      `)\r\n      .eq('assessment.project_id', project_id);\r\n\r\n    if (fetchError) throw fetchError;\r\n\r\n    // Delete existing controls if any exist\r\n    if (existingControls?.length > 0) {\r\n      const { error: deleteError } = await supabase\r\n        .from('hira_risk_controls')\r\n        .delete()\r\n        .in('id', existingControls.map(c => c.id));\r\n\r\n      if (deleteError) throw deleteError;\r\n    }\r\n\r\n    // Create new controls\r\n    return createRiskControls(project_id, controlsData);\r\n  } catch (error) {\r\n    console.error('Error updating risk controls:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getRiskControlsByProjectId(project_id) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('hira_risk_controls')\r\n      .select(`\r\n        id,\r\n        additional_mitigation,\r\n        risk_owner,\r\n        target_date,\r\n        date_implemented,\r\n        assessment:hira_risk_assessments!inner(\r\n          id,\r\n          project_id\r\n        )\r\n      `)\r\n      .eq('assessment.project_id', project_id);\r\n\r\n    if (error) throw error;\r\n\r\n    return data.map(control => ({\r\n      uniqueId: control.id,\r\n      assessment_id: control.assessment.id,\r\n      additionalMitigation: control.additional_mitigation,\r\n      riskOwner: control.risk_owner,\r\n      targetDate: control.target_date,\r\n      dateImplemented: control.date_implemented\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error getting risk controls:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}